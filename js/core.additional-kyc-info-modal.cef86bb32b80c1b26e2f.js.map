{"version":3,"file":"js/core.additional-kyc-info-modal.cef86bb32b80c1b26e2f.js","mappings":"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","sources":["webpack:///../../account/src/Components/form-field-info/index.ts","webpack:///../../account/src/Components/form-field-info/form-field-info.tsx","webpack:///../../account/src/Components/forms/form-select-field.tsx","webpack:///../../account/src/Components/additional-kyc-info-modal/form-config.tsx","webpack:///../../account/src/Components/additional-kyc-info-modal/additional-kyc-info-form.tsx","webpack:///../../account/src/Constants/external-urls.ts","webpack:///../../account/src/Components/additional-kyc-info-modal/additional-kyc-info-modal.tsx","webpack:///../../account/src/Components/additional-kyc-info-modal/index.ts"],"sourcesContent":["import { FormFieldInfo } from './form-field-info';\n\nexport default FormFieldInfo;\n","import React from 'react';\nimport { Popover, useOnClickOutside } from '@deriv/components';\nimport { TPopoverProps } from '@deriv/components/src/components/types';\nimport { isMobile } from '@deriv/shared';\n\n/**\n * A component that renders a popover with an info icon.\n *\n * @param {TPopoverProps} props - Props for the popover component.\n * @returns React.ReactElement - A React component.\n */\nexport const FormFieldInfo = (props: Omit<TPopoverProps, 'alignment'>) => {\n    const [is_open, setIsOpen] = React.useState(false);\n    const ref = React.useRef<HTMLDivElement>(null);\n    const validateClickOutside = (event: MouseEvent) => {\n        const target = event?.target as HTMLElement;\n        if (target.tagName === 'A') {\n            event?.stopPropagation();\n            return false;\n        }\n        return !ref.current?.contains(target);\n    };\n\n    useOnClickOutside(ref, () => setIsOpen(false), validateClickOutside);\n    return (\n        <div ref={ref}>\n            <Popover\n                {...props}\n                data_testid='dt_form-field-info__popover'\n                className='form-field-info__popover'\n                icon='info'\n                disable_message_icon\n                zIndex='9999'\n                is_open={is_open}\n                onClick={() => setIsOpen(prev_is_open => !prev_is_open)}\n                alignment={isMobile() ? 'left' : 'right'}\n            />\n        </div>\n    );\n};\n","import { Autocomplete, SelectNative } from '@deriv/components';\nimport { useStore } from '@deriv/stores';\nimport { Field, FieldProps, FormikErrors } from 'formik';\nimport React from 'react';\nimport { TGetField, TListItem } from '../additional-kyc-info-modal/form-config';\n\ntype TFormSelectField = TGetField & {\n    onItemSelection?: (item: TListItem) => void;\n    list_height?: string;\n};\n\ntype TSetFieldValue = (\n    field: string,\n    value: string,\n    shouldValidate?: boolean\n) => Promise<void | FormikErrors<Record<string, string>>>;\n\nconst FormSelectField: React.FC<TFormSelectField> = ({\n    label,\n    name,\n    required = false,\n    disabled = false,\n    list_items,\n    onItemSelection,\n    placeholder,\n    list_height,\n}) => {\n    const { ui } = useStore();\n    const { is_mobile } = ui;\n\n    const onSelect =\n        (field: string, setFieldValue: TSetFieldValue) =>\n        ({ value, text }: TListItem) => {\n            setFieldValue(field, value ? text : '', true);\n        };\n    // TODO: remove the following ts-expect-error comments once the issue is fixed within the components\n    return (\n        <Field name={name}>\n            {({ field, meta: { touched, error }, form: { setFieldValue } }: FieldProps<string>) => (\n                <React.Fragment>\n                    {is_mobile ? (\n                        <SelectNative\n                            {...field}\n                            // @ts-expect-error This needs to fixed in SelectNative component\n                            list_items={list_items}\n                            // @ts-expect-error This needs to fixed in SelectNative component\n                            label={label}\n                            required={required}\n                            disabled={disabled}\n                            error={touched ? error : undefined}\n                            use_text\n                            data-testid={`dt_${field.name}`}\n                        />\n                    ) : (\n                        <Autocomplete\n                            {...field}\n                            disabled={disabled}\n                            label={label}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            list_items={list_items}\n                            placeholder={placeholder}\n                            required={required}\n                            data-lpignore='true'\n                            autoComplete='off' // prevent chrome autocomplete\n                            error={touched ? error : undefined}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            onItemSelection={onItemSelection ?? onSelect(field.name, setFieldValue)}\n                            data-testid={`dt_${field.name}`}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            list_height={list_height}\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n\nexport default FormSelectField;\n","import React from 'react';\nimport { GetSettings, ResidenceList } from '@deriv/api-types';\nimport { Localize, localize } from '@deriv/translations';\nimport { generateValidationFunction } from '@deriv/shared';\n\n// Type for the list of items in a dropdown or select\nexport type TListItem = {\n    /**\n     * The text of the item (e.g. 'United Kingdom', 'Germany', etc.)\n     */\n    text: string;\n    /**\n     * The value of the item\n     */\n    value: string;\n};\n\nexport type TFields = 'place_of_birth' | 'tax_residence' | 'tax_identification_number' | 'account_opening_reason';\n\ntype ReqRule = ['req', React.ReactNode];\n\ntype LengthRule = ['length', React.ReactNode, { min: number; max: number }];\n\ntype RegularRule = ['regular', React.ReactNode, { regex: RegExp }];\n\ntype CustomValidator = (\n    value: string,\n    /**\n     * The options passed to the validation function\n     */\n    options: Record<string, unknown>,\n    /**\n     * The values of all fields in the form\n     */\n    values: Record<string, unknown>\n) => React.ReactNode;\n\ntype CustomRule = [CustomValidator, React.ReactNode];\n\ntype Rule = ReqRule | LengthRule | RegularRule | CustomRule;\n\ntype TInputConfig = {\n    label: React.ReactNode;\n    /**\n     * The type of the input field (e.g. 'text', 'password', 'select', etc.)\n     */\n    type?: string;\n    initial_value: string;\n    required?: boolean;\n    disabled?: boolean;\n    placeholder?: string;\n    /**\n     * The list of items for the dropdown or select\n     */\n    list_items?: TListItem[];\n    /**\n     * The validation rules for the input field (e.g. 'req', 'length', 'regular', etc.)\n     */\n    rules?: Array<Rule>;\n};\n\nexport type TGetField = Omit<TInputConfig, 'initial_value'> & { name: string };\n\nexport type TFormFieldsConfig = {\n    [key in TFields]: TInputConfig;\n};\n\n/**\n *  The base config for form fields with validation rules\n *  every field should have label, type, initial_value, disabled, required, placeholder, list_items, rules\n *\n *  `list_items` is used for dropdowns and select\n * @returns TFormFieldsConfig\n */\nexport const getFormFieldsConfig = (\n    account_settings: GetSettings,\n    residence_list: ResidenceList,\n    required_fields: TFields[]\n) => {\n    /**\n     * Check if the field is disabled based on the immutable_fields from API\n     */\n    const isFieldDisabled = (field: string) => account_settings?.immutable_fields?.includes(field);\n\n    /**\n     * Check if the field is required based on the required_fields array passed\n     */\n    const isFieldRequired = (field: TFields) => required_fields.includes(field);\n\n    const config: TFormFieldsConfig = {\n        place_of_birth: {\n            label: (\n                <Localize\n                    i18n_default_text='Place of birth{{required}}'\n                    values={{ required: isFieldRequired('place_of_birth') ? '*' : '' }}\n                />\n            ),\n            type: 'select',\n            initial_value:\n                (account_settings.place_of_birth &&\n                    residence_list.find(item => item.value === account_settings.place_of_birth)?.text) ??\n                '',\n            disabled: isFieldDisabled('place_of_birth'),\n            required: isFieldRequired('place_of_birth'),\n            list_items: residence_list as TListItem[],\n            rules: [['req', <Localize key='place_of_birth' i18n_default_text='Place of birth is required.' />]],\n        },\n        tax_residence: {\n            label: (\n                <Localize\n                    i18n_default_text='Tax residence{{required}}'\n                    values={{ required: isFieldRequired('tax_residence') ? '*' : '' }}\n                />\n            ),\n            type: 'select',\n            initial_value:\n                (account_settings.tax_residence &&\n                    residence_list.find(item => item.value === account_settings.tax_residence)?.text) ??\n                '',\n            disabled: isFieldDisabled('tax_residence'),\n            required: isFieldRequired('tax_residence'),\n            list_items: residence_list as TListItem[],\n            rules: [],\n        },\n        tax_identification_number: {\n            label: (\n                <Localize\n                    i18n_default_text='Tax Identification number{{required}}'\n                    values={{ required: isFieldRequired('tax_identification_number') ? '*' : '' }}\n                />\n            ),\n            type: 'text',\n            initial_value: account_settings.tax_identification_number ?? '',\n            disabled: isFieldDisabled('tax_identification_number'),\n            required: isFieldRequired('tax_identification_number'),\n            rules: [\n                [\n                    'length',\n                    <Localize\n                        key='TIN'\n                        i18n_default_text=\"Tax Identification Number can't be longer than 25 characters.\"\n                    />,\n                    { min: 0, max: 25 },\n                ],\n                [\n                    // check if the TIN value is available, then perform the regex test\n                    // else return true (to pass the test)\n                    // this is to allow empty string to pass the test in case of optioal TIN field\n                    (value: string) => (value ? RegExp(/^(?!^$|\\s+)[A-Za-z0-9./\\s-]{0,25}$/).test(value) : true),\n                    localize('Letters, numbers, spaces, periods, hyphens and forward slashes only.'),\n                ],\n                [\n                    (value, options, { tax_residence }) => {\n                        return value ? !!tax_residence : true;\n                    },\n                    <Localize key='TIN' i18n_default_text='Please fill in tax residence.' />,\n                ],\n                [\n                    (value: string, options, { tax_residence }) => {\n                        const tin_format = residence_list.find(\n                            res => res.text === tax_residence && res.tin_format\n                        )?.tin_format;\n                        return value && tin_format\n                            ? tin_format.some(tax_regex => new RegExp(tax_regex).test(value))\n                            : true;\n                    },\n                    <Localize key='TIN' i18n_default_text='Tax Identification Number is invalid.' />,\n                ],\n            ],\n        },\n        account_opening_reason: {\n            label: (\n                <Localize\n                    i18n_default_text='Intended use of account{{required}}'\n                    values={{ required: isFieldRequired('account_opening_reason') ? '*' : '' }}\n                />\n            ),\n            type: 'select',\n            initial_value: account_settings.account_opening_reason ?? '',\n            disabled: isFieldDisabled('account_opening_reason'),\n            required: isFieldRequired('account_opening_reason'),\n            list_items: [\n                {\n                    text: localize('Hedging'),\n                    value: 'Hedging',\n                },\n                {\n                    text: localize('Income Earning'),\n                    value: 'Income Earning',\n                },\n                {\n                    text: localize('Speculative'),\n                    value: 'Speculative',\n                },\n            ],\n            rules: [\n                [\n                    'req',\n                    <Localize key='account_opening_reason' i18n_default_text='Intended use of account is required.' />,\n                ],\n            ],\n        },\n    };\n    return config;\n};\n\n/**\n * Generate initial values for form fields\n */\nconst generateInitialValues = (fields: ReturnType<typeof getFormFieldsConfig>) => {\n    const initial_values: Record<TFields, string> = {} as Record<TFields, string>;\n    (Object.keys(fields) as TFields[]).forEach(field => {\n        initial_values[field] = fields[field].initial_value;\n    });\n    return initial_values;\n};\n\n/**\n * This function is used to transform form fields config to the format that is used in Formik or Formik Field\n */\nconst getField = (fields: TFormFieldsConfig, name: TFields, with_input_types: boolean): TGetField => {\n    const { label, placeholder, required, disabled, type, list_items } = fields[name];\n\n    return {\n        name,\n        label,\n        required,\n        disabled,\n        ...(with_input_types ? { type } : {}),\n        ...(placeholder ? { placeholder } : {}),\n        ...(list_items ? { list_items } : {}),\n    };\n};\n\n/**\n * Function to transform and return form config that can be used within the component that renders the form\n */\nexport const getFormConfig = (options: {\n    account_settings: GetSettings;\n    residence_list: ResidenceList;\n    required_fields: TFields[];\n    with_input_types?: boolean;\n}) => {\n    const { account_settings, residence_list, required_fields, with_input_types = false } = options;\n    const fields_config = getFormFieldsConfig(account_settings, residence_list, required_fields);\n    const inputs: Record<TFields, TGetField> = {} as Record<TFields, TGetField>;\n    Object.keys(fields_config).forEach(field_key => {\n        // @ts-expect-error `field_key` is always a key of `fields_config`, Hence can ignore the TS error.\n        inputs[field_key] = getField(fields_config, field_key, with_input_types);\n    });\n    return {\n        fields: inputs,\n        /** typing fields_config as any as this current config has different structure\n         * and generateValidationFunction should have generic types\n         * */\n        validate: generateValidationFunction('', fields_config as any),\n        initialValues: generateInitialValues(fields_config),\n    };\n};\n","import { Button, Loading, Modal, Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport classNames from 'classnames';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { useSettings } from '@deriv/api';\nimport { OECD_TIN_FORMAT_URL } from '../../Constants/external-urls';\nimport FormFieldInfo from '../form-field-info';\nimport { FormInputField } from '../forms/form-fields';\nimport FormSelectField from '../forms/form-select-field';\nimport { TListItem, getFormConfig } from './form-config';\n\nconst FormTitle = () => (\n    <Text\n        as='p'\n        size='s'\n        line_height='xxl'\n        align={isMobile() ? 'left' : 'center'}\n        className='additional-kyc-info-modal__form--header'\n    >\n        <Localize i18n_default_text='Please take a moment to update your information now.' />\n    </Text>\n);\n\ntype TAdditionalKycInfoFormProps = {\n    setError?: React.Dispatch<React.SetStateAction<unknown>>;\n};\n\nexport const AdditionalKycInfoForm = observer(({ setError }: TAdditionalKycInfoFormProps) => {\n    const { client, ui, notifications } = useStore();\n    const { residence_list, updateAccountStatus } = client;\n    const {\n        update,\n        mutation: { isLoading, error, status },\n        data: account_settings,\n        isLoading: isAccountSettingsLoading,\n    } = useSettings();\n\n    const { fields, initialValues, validate } = getFormConfig({\n        account_settings,\n        residence_list,\n        required_fields: ['place_of_birth', 'account_opening_reason'],\n    });\n\n    const onSubmit = (values: typeof initialValues) => {\n        const place_of_birth = residence_list?.find(item => item.text === values.place_of_birth)?.value;\n\n        const payload: Record<string, string | undefined> = {\n            place_of_birth,\n            account_opening_reason: values.account_opening_reason,\n        };\n\n        if (values.tax_identification_number) {\n            payload.tax_identification_number = values.tax_identification_number;\n        }\n\n        if (values.tax_residence) {\n            const tax_residence = residence_list?.find(item => item.text === values.tax_residence)?.value;\n            payload.tax_residence = tax_residence;\n        }\n\n        update(payload);\n    };\n\n    React.useEffect(() => {\n        if (status === 'success') {\n            updateAccountStatus();\n            notifications.refreshNotifications();\n            ui.toggleAdditionalKycInfoModal();\n            ui.toggleKycInformationSubmittedModal();\n        } else if (status === 'error') {\n            setError?.(error);\n        }\n    }, [error, notifications, setError, status, ui, updateAccountStatus]);\n\n    if (isAccountSettingsLoading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    return (\n        <Formik\n            validateOnMount\n            validateOnBlur\n            validateOnChange\n            initialValues={initialValues}\n            onSubmit={onSubmit}\n            validate={validate}\n        >\n            {({ isValid, setFieldValue }) => (\n                <Form className='additional-kyc-info-modal__form-layout'>\n                    {isLoading ? (\n                        <Loading is_fullscreen={false} />\n                    ) : (\n                        <section className='additional-kyc-info-modal__form-layout--fields'>\n                            <FormTitle />\n                            <fieldset className='additional-kyc-info-modal__form-field'>\n                                <FormSelectField {...fields.place_of_birth} />\n                            </fieldset>\n                            <fieldset\n                                className={classNames(\n                                    'additional-kyc-info-modal__form-field',\n                                    'additional-kyc-info-modal__form-field--info'\n                                )}\n                            >\n                                <FormSelectField {...fields.tax_residence} />\n                                <FormFieldInfo\n                                    message={\n                                        <Localize i18n_default_text='The country in which you meet the criteria for paying taxes. Usually the country in which you physically reside.' />\n                                    }\n                                />\n                            </fieldset>\n                            <fieldset className='additional-kyc-info-modal__form-field--info'>\n                                <FormInputField\n                                    {...fields.tax_identification_number}\n                                    data_testId='dt_tax_identification_number'\n                                />\n                                <FormFieldInfo\n                                    message={\n                                        <Localize\n                                            i18n_default_text=\"Don't know your tax identification number? <1 />Click <0>here</0> to learn more.\"\n                                            components={[\n                                                <a\n                                                    key={0}\n                                                    className='link'\n                                                    target='_blank'\n                                                    rel='noopener noreferrer'\n                                                    href={OECD_TIN_FORMAT_URL}\n                                                />,\n                                                <br key={1} />,\n                                            ]}\n                                        />\n                                    }\n                                />\n                            </fieldset>\n                            <fieldset className='additional-kyc-info-modal__form-field'>\n                                <FormSelectField\n                                    onItemSelection={({ value = '' }: TListItem) => {\n                                        setFieldValue('account_opening_reason', value, true);\n                                    }}\n                                    list_height='6rem'\n                                    {...fields.account_opening_reason}\n                                />\n                            </fieldset>\n                        </section>\n                    )}\n                    <Modal.Footer has_separator className='additional-kyc-info-modal__form-action'>\n                        <Button large primary type='submit' disabled={!isValid || isLoading}>\n                            <Localize i18n_default_text='Submit' />\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            )}\n        </Formik>\n    );\n});\n\nAdditionalKycInfoForm.displayName = 'AdditionalKycInfoForm';\n\nexport default AdditionalKycInfoForm;\n","export const OECD_TIN_FORMAT_URL =\n    'https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/';\n","import {\n    DesktopWrapper,\n    Div100vhContainer,\n    InlineMessage,\n    MobileWrapper,\n    Modal,\n    PageOverlay,\n    Text,\n    UILoader,\n} from '@deriv/components';\nimport { getPlatformSettings } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport React from 'react';\nimport AdditionalKycInfoForm from './additional-kyc-info-form';\n\ntype TAdditionalKycInfoFormWithHintBox = {\n    error?: unknown;\n    setError?: React.Dispatch<React.SetStateAction<unknown>>;\n};\n\nconst AdditionalKycInfoFormWithHintBox = ({ error, setError }: TAdditionalKycInfoFormWithHintBox) => {\n    return (\n        <React.Fragment>\n            {!!error && (\n                <InlineMessage\n                    size='sm'\n                    message={\n                        error &&\n                        typeof error === 'object' &&\n                        'message' in error &&\n                        typeof error.message === 'string' &&\n                        error.message\n                    }\n                    type='error'\n                />\n            )}\n            <AdditionalKycInfoForm setError={setError} />\n        </React.Fragment>\n    );\n};\n\nexport const AdditionalKycInfoModal = observer(() => {\n    const {\n        ui: { is_additional_kyc_info_modal_open: is_open, toggleAdditionalKycInfoModal },\n    } = useStore();\n    const [error, setError] = React.useState<unknown>('');\n\n    const toggleModal = (e?: React.MouseEvent<HTMLElement, MouseEvent> | undefined) => {\n        // if e.target is anchor tag, don't close modal for link click within modal\n        const target = e?.target as HTMLElement;\n        if (target.tagName === 'A') e?.stopPropagation();\n        toggleAdditionalKycInfoModal();\n    };\n\n    const mt5_platform_settings = getPlatformSettings('mt5');\n\n    const ModalTitle = () => (\n        <Localize\n            i18n_default_text='Additional information required for {{platform}} account(s)'\n            values={{\n                platform: mt5_platform_settings.name,\n            }}\n        />\n    );\n\n    return (\n        <React.Suspense fallback={<UILoader />}>\n            <div className='additional-kyc-info-modal__container'>\n                <DesktopWrapper>\n                    <Modal\n                        has_close_icon\n                        is_open={is_open}\n                        title={<ModalTitle />}\n                        toggleModal={toggleModal}\n                        className='additional-kyc-info'\n                        width='90.4rem'\n                        height={error ? '54.4rem' : '49.6rem'}\n                    >\n                        <Modal.Body className='additional-kyc-info-modal__form'>\n                            <AdditionalKycInfoFormWithHintBox setError={setError} error={error} />\n                        </Modal.Body>\n                    </Modal>\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <PageOverlay\n                        is_open\n                        portal_id='deriv_app'\n                        header={\n                            <Text as='p' size='xs' weight='bold'>\n                                <ModalTitle />\n                            </Text>\n                        }\n                        onClickClose={toggleAdditionalKycInfoModal}\n                        header_classname='additional-kyc-info-modal__portal-header'\n                    >\n                        <Div100vhContainer className='additional-kyc-info-modal__form' height_offset='100px'>\n                            <AdditionalKycInfoFormWithHintBox />\n                        </Div100vhContainer>\n                    </PageOverlay>\n                </MobileWrapper>\n            </div>\n        </React.Suspense>\n    );\n});\n\nAdditionalKycInfoModal.displayName = 'AdditionalKycInfoModal';\n","import { AdditionalKycInfoModal } from './additional-kyc-info-modal';\nimport './additional-kyc-info-modal.scss';\n\nexport default AdditionalKycInfoModal;\n"],"names":["props","React","is_open","setIsOpen","ref","useOnClickOutside","event","target","tagName","stopPropagation","current","contains","Popover","data_testid","className","icon","disable_message_icon","zIndex","onClick","prev_is_open","alignment","isMobile","label","name","required","disabled","list_items","onItemSelection","placeholder","list_height","is_mobile","useStore","ui","onSelect","field","setFieldValue","value","text","Field","meta","touched","error","form","SelectNative","undefined","use_text","Autocomplete","autoComplete","getFormConfig","options","fields","initial_values","account_settings","residence_list","required_fields","with_input_types","fields_config","isFieldDisabled","immutable_fields","includes","isFieldRequired","place_of_birth","Localize","i18n_default_text","values","type","initial_value","find","item","rules","key","tax_residence","tax_identification_number","min","max","RegExp","test","localize","tin_format","res","some","tax_regex","account_opening_reason","getFormFieldsConfig","inputs","Object","keys","forEach","field_key","getField","validate","generateValidationFunction","initialValues","FormTitle","Text","as","size","line_height","align","AdditionalKycInfoForm","observer","setError","client","notifications","updateAccountStatus","useSettings","update","mutation","isLoading","status","data","isAccountSettingsLoading","refreshNotifications","toggleAdditionalKycInfoModal","toggleKycInformationSubmittedModal","Loading","is_fullscreen","Formik","validateOnMount","validateOnBlur","validateOnChange","onSubmit","payload","isValid","Form","classNames","message","data_testId","components","rel","href","Modal","has_separator","Button","large","primary","displayName","AdditionalKycInfoFormWithHintBox","InlineMessage","AdditionalKycInfoModal","is_additional_kyc_info_modal_open","mt5_platform_settings","getPlatformSettings","ModalTitle","platform","fallback","UILoader","DesktopWrapper","has_close_icon","title","toggleModal","e","width","height","MobileWrapper","PageOverlay","portal_id","header","weight","onClickClose","header_classname","Div100vhContainer","height_offset"],"sourceRoot":""}