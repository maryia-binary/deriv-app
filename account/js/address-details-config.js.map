{"version":3,"file":"account/js/address-details-config.js","mappings":"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","sources":["webpack://@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/account/external umd \"@deriv/translations\"","webpack://@deriv/account/webpack/bootstrap","webpack://@deriv/account/webpack/runtime/compat get default export","webpack://@deriv/account/webpack/runtime/define property getters","webpack://@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/account/./Configs/address-details-config.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import React from 'react';\nimport { GetSettings } from '@deriv/api-types';\nimport {\n    generateValidationFunction,\n    getDefaultFields,\n    getErrorMessages,\n    regex_checks,\n    address_permitted_special_characters_message,\n    TSchema,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TUpgradeInfo } from 'Types';\n\ntype TAddressDetailsConfigProps = {\n    upgrade_info: TUpgradeInfo;\n    real_account_signup_target: string;\n    residence: string;\n    account_settings: GetSettings;\n};\n\nconst address_details_config: ({\n    account_settings,\n    is_svg,\n}: {\n    account_settings: GetSettings;\n    is_svg: boolean;\n}) => TSchema = ({ account_settings, is_svg }) => {\n    const is_gb = account_settings.country_code === 'gb';\n    if (!account_settings) {\n        return {};\n    }\n\n    const base_case = {\n        address_line_1: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.address_line_1 ?? '',\n            rules: [\n                ['req', localize('First line of address is required')],\n                ['length', localize('Only {{max}} characters, please.', { max: 70 }), { max: 70 }],\n                [\n                    'regular',\n                    localize('Use only the following special characters: {{permitted_characters}}', {\n                        permitted_characters: address_permitted_special_characters_message,\n                        interpolation: { escapeValue: false },\n                    }),\n                    {\n                        regex: regex_checks.address_details.address_line_1,\n                    },\n                ],\n                ['po_box', getErrorMessages().po_box()],\n            ].filter(x => (is_svg ? x.indexOf('po_box') !== 0 : x)),\n        },\n        address_line_2: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.address_line_2 ?? '',\n            rules: [\n                ['length', localize('Only {{max}} characters, please.', { max: 70 }), { max: 70 }],\n                [\n                    'regular',\n                    localize('Use only the following special characters: {{permitted_characters}}', {\n                        permitted_characters: address_permitted_special_characters_message,\n                        interpolation: { escapeValue: false },\n                    }),\n                    {\n                        regex: regex_checks.address_details.address_line_2,\n                    },\n                ],\n                ['po_box', getErrorMessages().po_box()],\n            ].filter(x => (is_svg ? x.indexOf('po_box') !== 0 : x)),\n        },\n        address_city: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.address_city ?? '',\n            rules: [\n                ['req', localize('City is required')],\n                ['length', localize('Only {{max}} characters, please.', { max: 99 }), { max: 99 }],\n                [\n                    'regular',\n                    localize('Only letters, periods, hyphens, apostrophes, and spaces, please.'),\n                    {\n                        regex: regex_checks.address_details.address_city,\n                    },\n                ],\n            ],\n        },\n        address_state: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.address_state ?? '',\n            rules: [\n                ['req', localize('State is required')],\n                [\n                    'regular',\n                    localize('State is not in a proper format'),\n                    {\n                        regex: regex_checks.address_details.address_state,\n                    },\n                ],\n            ],\n        },\n        address_postcode: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.address_postcode ?? '',\n            rules: [\n                [\n                    'length',\n                    localize('Please enter a {{field_name}} under {{max_number}} characters.', {\n                        field_name: localize('postal/ZIP code'),\n                        max_number: 20,\n                        interpolation: { escapeValue: false },\n                    }),\n                    { min: 0, max: 20 },\n                ],\n                [\n                    'regular',\n                    localize('Letters, numbers, spaces, hyphens only'),\n                    {\n                        regex: regex_checks.address_details.address_postcode,\n                    },\n                ],\n            ],\n        },\n    };\n\n    if (is_gb) {\n        const gb_case = {\n            ...base_case,\n            address_postcode: {\n                supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n                default_value: account_settings.address_postcode ?? '',\n                rules: [\n                    [\n                        'length',\n                        localize('Please enter a {{field_name}} under {{max_number}} characters.', {\n                            field_name: localize('postal/ZIP code'),\n                            max_number: 20,\n                            interpolation: { escapeValue: false },\n                        }),\n                        { min: 0, max: 20 },\n                    ],\n                    [\n                        'regular',\n                        localize('Letters, numbers, spaces, hyphens only'),\n                        {\n                            regex: regex_checks.address_details.address_postcode,\n                        },\n                    ],\n                    [\n                        'regular',\n                        localize('Our accounts and services are unavailable for the Jersey postal code.'),\n                        {\n                            regex: regex_checks.address_details.non_jersey_postcode,\n                        },\n                    ],\n                ],\n            },\n        };\n        return gb_case;\n    }\n    return base_case;\n};\n\nconst addressDetailsConfig = (\n    { upgrade_info, real_account_signup_target, residence, account_settings }: TAddressDetailsConfigProps,\n    AddressDetails: React.Component\n) => {\n    const is_svg = upgrade_info?.can_upgrade_to === 'svg';\n    const config = address_details_config({ account_settings, is_svg });\n    const disabled_items = account_settings.immutable_fields;\n    const is_gb_residence = residence === 'gb';\n\n    return {\n        header: {\n            active_title: localize('Complete your address details'),\n            title: localize('Address'),\n        },\n        body: AddressDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(\n                real_account_signup_target,\n                transformConfig(transformForResidence(config, residence), real_account_signup_target)\n            ),\n            disabled_items,\n            is_gb_residence,\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\n        icon: 'IcDashboardAddress',\n    };\n};\n\n/**\n * Transform general rules based on residence\n * @name transformForResidence\n * @param  rules - Original rules\n * @param residence - Client's residence\n * @return rules - Transformed rules\n */\nconst transformForResidence = (rules: TSchema, residence: string) => {\n    // Isle of Man Clients do not need to fill out state since API states_list is empty.\n    if (residence === 'im') {\n        rules.address_state.rules?.shift();\n    }\n    // GB residence are required to fill in the post code.\n    if (/^(im|gb)$/.test(residence)) {\n        rules.address_postcode.rules?.splice(0, 0, ['req', localize('Postal/ZIP code is required')]);\n    }\n    return rules;\n};\n\nexport const transformConfig = (config: TSchema, real_account_signup_target: string) => {\n    // Remove required rule for svg clients and maltainvest clients\n    if (\n        !real_account_signup_target ||\n        real_account_signup_target === 'svg' ||\n        real_account_signup_target === 'maltainvest'\n    ) {\n        config.address_state.rules?.shift();\n    }\n\n    return config;\n};\n\nexport default addressDetailsConfig;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","transformForResidence","rules","residence","address_state","shift","test","address_postcode","splice","localize","transformConfig","config","real_account_signup_target","AddressDetails","upgrade_info","account_settings","is_svg","is_gb","country_code","base_case","address_line_1","supported_in","default_value","max","permitted_characters","address_permitted_special_characters_message","interpolation","escapeValue","regex","regex_checks","getErrorMessages","po_box","filter","x","indexOf","address_line_2","address_city","field_name","max_number","min","address_details_config","can_upgrade_to","disabled_items","immutable_fields","is_gb_residence","header","active_title","title","body","form_value","getDefaultFields","props","validate","generateValidationFunction","passthrough","icon"],"sourceRoot":""}