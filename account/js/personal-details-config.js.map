{"version":3,"file":"account/js/personal-details-config.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,iBAAkBA,QAAQ,uBAAwBA,QAAQ,UAClE,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiB,sBAAuB,SAAUJ,GAChC,iBAAZC,QACdA,QAAQ,kBAAoBD,EAAQG,QAAQ,iBAAkBA,QAAQ,uBAAwBA,QAAQ,UAEtGJ,EAAK,kBAAoBC,EAAQD,EAAK,iBAAkBA,EAAK,uBAAwBA,EAAY,MAClG,CATD,CASGO,MAAM,CAACC,EAA2CC,EAAiDC,I,iECTtGR,EAAQ,GAoTR,SAA0BS,GACxB,OAAOA,EAAIC,QAAQ,qBAAqB,SAASC,GAC/C,OAAOC,EAAcD,IAAMA,CAC7B,GACF,EAXA,IA3SA,IAAIE,EAAkB,CACpB,CACEC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,qCACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,OACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,MACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,WACN,CACDD,KAAM,IACNC,MAAO,gBACN,CACDD,KAAM,IACNC,MAAO,iBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,MACN,CACDD,KAAM,KACNC,MAAO,MACN,CACDD,KAAM,IACNC,MAAO,mCACN,CACDD,KAAM,IACNC,MAAO,UACN,CACDD,KAAM,IACNC,MAAO,mBACN,CACDD,KAAM,IACNC,MAAO,iBACN,CACDD,KAAM,IACNC,MAAO,uBACN,CACDD,KAAM,IACNC,MAAO,SACN,CACDD,KAAM,IACNC,MAAO,iBACN,CACDD,KAAM,IACNC,MAAO,qBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,YACN,CACDD,KAAM,IACNC,MAAO,oBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,8CACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,aACN,CACDD,KAAM,IACNC,MAAO,SACN,CACDD,KAAM,IACNC,MAAO,oBACN,CACDD,KAAM,IACNC,MAAO,oBACN,CACDD,KAAM,IACNC,MAAO,kBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,qCACN,CACDD,KAAM,IACNC,MAAO,WACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,aACN,CACDD,KAAM,IACNC,MAAO,QACN,CACDD,KAAM,IACNC,MAAO,kBACN,CACDD,KAAM,IACNC,MAAO,iBACN,CACDD,KAAM,IACNC,MAAO,uCACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,OACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,MACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,aACN,CACDD,KAAM,IACNC,MAAO,gBACN,CACDD,KAAM,IACNC,MAAO,oBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,MACN,CACDD,KAAM,IACNC,MAAO,iCACN,CACDD,KAAM,IACNC,MAAO,QACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,MACNC,MAAO,KACN,CACDD,KAAM,MACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,kBACN,CACDD,KAAM,IACNC,MAAO,kBACN,CACDD,KAAM,KACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,uBACN,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","sources":["webpack://@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/account/../../../node_modules/diacritics/index.js","webpack://@deriv/account/../../../node_modules/i18n-iso-countries/index.js","webpack://@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/account/external umd \"@deriv/translations\"","webpack://@deriv/account/external umd \"react\"","webpack://@deriv/account/webpack/bootstrap","webpack://@deriv/account/webpack/runtime/define property getters","webpack://@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/account/./Helpers/utils.tsx","webpack://@deriv/account/./Constants/personal-details.ts","webpack://@deriv/account/./Configs/personal-details-config.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n","\"use strict\";\n\nconst codes = require(\"./codes.json\");\nconst removeDiacritics = require(\"diacritics\").remove;\nconst registeredLocales = {};\n\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\nconst alpha2 = {},\n  alpha3 = {},\n  numeric = {},\n  invertedNumeric = {};\n\ncodes.forEach(function (codeInformation) {\n  const s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\n/**\n * @private\n * @param {number} code\n */\nfunction formatNumericCode(code) {\n  return String(\"000\" + (code ? code : \"\")).slice(-3);\n}\n\n/**\n * @private\n * Avoid using obj.hasOwnProperty directly as `hasOwnProperty` could be a\n * property in itself ({ hasOwnProperty: 1 }) and cause weird bugs\n * https://eslint.org/docs/rules/no-prototype-builtins\n */\nfunction hasOwnProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\n/**\n * @private\n * Pass localeList through a filter and return a newLocaleList obj\n * with the same structure of the old localeList.\n *\n * @param {LocalizedCountryNames} localeList  Local List in raw\n * @param {Function} filter    callback to set filter rule\n * @return {String | String[]} new filtered Local List\n */\nfunction localeFilter(localeList, filter) {\n  return Object.keys(localeList).reduce(function (newLocaleList, alpha2) {\n    const nameList = localeList[alpha2];\n    newLocaleList[alpha2] = filter(nameList, alpha2);\n    return newLocaleList;\n  }, {});\n}\n\n/**\n * @private\n * Preserve for getName & getNames\n *\n * @param {GetNameOptions.select} type all | official | alias\n * @param countryNameList  string array of country's\n *                         official name and alias\n * @return {String | String[]} of a country name\n */\nfunction filterNameBy(type, countryNameList) {\n  switch (type) {\n    case \"official\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[0]\n        : countryNameList;\n\n    case \"all\":\n      return typeof countryNameList === \"string\"\n        ? [countryNameList]\n        : countryNameList;\n\n    case \"alias\":\n      return Array.isArray(countryNameList)\n        ? countryNameList[1] || countryNameList[0]\n        : countryNameList;\n\n    default:\n      throw new TypeError(\n        \"LocaleNameType must be one of these: all, official, alias!\"\n      );\n  }\n}\n\n/**\n * Register countries in browsers' environment:\n * @param {object} localeData\n * @example countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n * @return void\n */\nexports.registerLocale = function (localeData) {\n  if (!localeData.locale) {\n    throw new TypeError(\"Missing localeData.locale\");\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError(\"Missing localeData.countries\");\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n};\n\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\nexports.alpha3ToNumeric = alpha3ToNumeric;\n\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\nexports.alpha2ToNumeric = alpha2ToNumeric;\n\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\nfunction numericToAlpha3(code) {\n  const padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\nexports.numericToAlpha3 = numericToAlpha3;\n\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\nfunction numericToAlpha2(code) {\n  const padded = formatNumericCode(code);\n  return numeric[padded];\n}\nexports.numericToAlpha2 = numericToAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n    if (code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n  return undefined;\n}\nexports.toAlpha3 = toAlpha3;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n    if (code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n  return undefined;\n}\nexports.toAlpha2 = toAlpha2;\n\n/**\n * @param {string | number | Alpha2Code | Alpha3Code} code\n * @param {String} lang          language for country name\n * @param {GetNameOptions} options\n * @return {String | String[] | undefined}  name\n */\nexports.getName = function (code, lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  try {\n    const codeMaps = registeredLocales[lang.toLowerCase()];\n    const nameList = codeMaps[toAlpha2(code)];\n    return filterNameBy(options.select, nameList);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/**\n * @param {String} lang             language for country names\n * @param {GetNameOptions} options   getNames Options\n * @return {LocalizedCountryNames}  country code\n *                                  mapped to county name\n */\nexports.getNames = function (lang, options = {}) {\n  if (!(\"select\" in options)) {\n    options.select = \"official\";\n  }\n  const localeList = registeredLocales[lang.toLowerCase()];\n  if (localeList === undefined) return {};\n  return localeFilter(localeList, function (nameList) {\n    return filterNameBy(options.select, nameList);\n  });\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => string.toLowerCase();\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getSimpleAlpha2Code = function (name, lang) {\n  const normalizeString = (string) => removeDiacritics(string.toLowerCase());\n  const areSimilar = (a, b) => normalizeString(a) === normalizeString(b);\n\n  try {\n    const codenames = registeredLocales[lang.toLowerCase()];\n    for (const p in codenames) {\n      if (!hasOwnProperty(codenames, p)) {\n        continue;\n      }\n      if (typeof codenames[p] === \"string\") {\n        if (areSimilar(codenames[p], name)) {\n          return p;\n        }\n      }\n      if (Array.isArray(codenames[p])) {\n        for (const mappedName of codenames[p]) {\n          if (areSimilar(mappedName, name)) {\n            return p;\n          }\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\nexports.getAlpha2Codes = function () {\n  return alpha2;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getSimpleAlpha3Code = function (name, lang) {\n  const alpha2 = exports.getSimpleAlpha2Code(name, lang);\n  if (alpha2) {\n    return exports.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\nexports.getAlpha3Codes = function () {\n  return alpha3;\n};\n\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\nexports.getNumericCodes = function () {\n  return numeric;\n};\n\n/*\n * @return Array of supported languages\n */\nexports.langs = function () {\n  return Object.keys(registeredLocales);\n};\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\nexports.isValid = function (code) {\n  if (!code) {\n    return false;\n  }\n\n  const coerced = code.toString().toUpperCase();\n  return (\n    hasOwnProperty(alpha3, coerced) ||\n    hasOwnProperty(alpha2, coerced) ||\n    hasOwnProperty(numeric, coerced)\n  );\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import React from 'react';\nimport countries from 'i18n-iso-countries';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    toMoment,\n    validLength,\n    validName,\n    getIDVNotApplicableOption,\n    idv_error_statuses,\n    AUTH_STATUS_CODES,\n} from '@deriv/shared';\nimport { ResidenceList, GetAccountStatus } from '@deriv/api-types';\nimport { FormikValues } from 'formik';\nimport { getIDVDocuments } from '../Constants/idv-document-config';\nimport { TServerError } from '../Types';\nimport { LANGUAGE_CODES } from '../Constants/onfido';\n\nexport const documentAdditionalError = (\n    additional_document_value: string | undefined,\n    document_additional_config: FormikValues\n) => {\n    let error_message = null;\n    if (!additional_document_value) {\n        error_message = localize('Please enter your {{document_name}}. ', {\n            document_name: document_additional_config?.display_name?.toLowerCase() ?? localize('document number'),\n        });\n    } else {\n        const format_regex = getRegex(document_additional_config?.format);\n        if (!format_regex.test(additional_document_value)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    citizen: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    citizen,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const identity = account_status?.authentication?.identity;\n\n    const is_identity_verified = identity?.status === AUTH_STATUS_CODES.VERIFIED;\n    const should_skip_idv =\n        is_identity_verified || account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const DEFAULT_CONFIG = {\n        new_display_name: '',\n        example_format: '',\n    };\n    const IDV_DOCUMENT_DATA: any = getIDVDocuments(country_code);\n    return IDV_DOCUMENT_DATA[document_type] ?? DEFAULT_CONFIG;\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string): string => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        case 'national_id_no_photo':\n            return localize('Enter your National Identification Number (NIN)');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 2, max: 50 })) {\n            return localize('You should enter 2-50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format?: string) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, additional_document_value?: string) => {\n    const error_message = documentAdditionalError(additional_document_value, document_type?.additional);\n    if (error_message) {\n        return localize(error_message) + getExampleFormat(document_type.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number: string, document_type: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type.example_format;\n    if (!document_number && document_type.text) {\n        let document_name = '';\n        const example_format = getExampleFormat(document_type.example_format);\n        switch (document_type.id) {\n            case 'drivers_license':\n                document_name = 'Driver License Reference number';\n                break;\n            case 'ssnit':\n                document_name = 'SSNIT number';\n                break;\n            case 'national_id_no_photo':\n                document_name = 'NIN';\n                break;\n            default:\n                document_name = 'document number';\n                break;\n        }\n        return (\n            <Localize\n                i18n_default_text='Please enter your {{document_name}}. {{example_format}}'\n                values={{ document_name, example_format }}\n            />\n        );\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type.value);\n    if (!format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n// @ts-expect-error as the generic is a Array\nexport const flatten = <T extends Array<unknown>>(arr: T) => [].concat(...arr);\n\nexport const isServerError = (error: unknown): error is TServerError =>\n    typeof error === 'object' && error !== null && 'code' in error;\n\n/**\n *  Returns the alpha 3 code for a given country code\n * @name convertAlpha2toAlpha3\n * @param country_code  - country code\n * @returns alpha 3 code\n */\nexport const convertAlpha2toAlpha3 = (country_code: string) =>\n    country_code.length !== 3 ? countries.alpha2ToAlpha3(country_code.toUpperCase()) : country_code;\n\n/**\n * Returns the alpha 2 code for a given country code\n * @name convertAlpha3toAlpha2\n * @param country_code - country code\n * @returns alpha 2 code\n */\n\nexport const convertAlpha3toAlpha2 = (country_code: string) =>\n    country_code.length !== 2 ? countries.alpha3ToAlpha2(country_code.toUpperCase()) : country_code;\n\n/**\n * Generates a language code supported by Onfido\n * @name getOnfidoSupportedLocaleCode\n * @param language_code\n * @returns language code supported by Onfido\n */\nexport const getOnfidoSupportedLocaleCode = (language_code: string) => {\n    try {\n        const code = language_code.toLowerCase().split('_');\n        if (code[0] === 'id') {\n            return LANGUAGE_CODES.ID;\n        }\n        return code.length > 1 ? `${code[0]}_${code[1].toUpperCase()}` : code[0];\n    } catch (e) {\n        return LANGUAGE_CODES.EN;\n    }\n};\n\nexport const getIDVDocumentType = (\n    idv_latest_attempt: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    residence: DeepRequired<ResidenceList[0]>\n) => {\n    if (!idv_latest_attempt || !Object.keys(residence).length) return localize('identity document');\n    const { document_type } = idv_latest_attempt;\n    if (!document_type) return localize('identity document');\n    const {\n        identity: {\n            services: {\n                idv: { documents_supported },\n            },\n        },\n    } = residence;\n    return documents_supported[document_type as string].display_name;\n};\n\nexport const validate = <T,>(errors: Record<string, string>, values: T) => {\n    return (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field as keyof typeof values] as string;\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n};\n\ntype TIDVErrorStatus = typeof idv_error_statuses[keyof typeof idv_error_statuses];\nexport const verifyFields = (status: TIDVErrorStatus) => {\n    switch (status) {\n        case idv_error_statuses.poi_dob_mismatch:\n            return ['date_of_birth'];\n        case idv_error_statuses.poi_name_mismatch:\n            return ['first_name', 'last_name'];\n        default:\n            return ['first_name', 'last_name', 'date_of_birth'];\n    }\n};\n","export const PHONE_NUMBER_LENGTH = {\n    MIN: 9,\n    MAX: 35,\n};\n","import { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport {\n    TSchema,\n    generateValidationFunction,\n    getDefaultFields,\n    getErrorMessages,\n    toMoment,\n    validLength,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { shouldShowIdentityInformation } from 'Helpers/utils';\nimport { TUpgradeInfo } from 'Types';\nimport { PHONE_NUMBER_LENGTH } from 'Constants/personal-details';\n\ntype TPersonalDetailsConfig = {\n    upgrade_info?: TUpgradeInfo;\n    real_account_signup_target: string;\n    residence_list: ResidenceList;\n    account_settings: GetSettings & {\n        document_type: string;\n        document_number: string;\n    };\n    residence: string;\n    account_status: GetAccountStatus;\n    is_high_risk_client_for_mt5?: boolean;\n};\n\nexport const personal_details_config = ({\n    residence_list,\n    account_settings,\n    real_account_signup_target,\n    is_high_risk_client_for_mt5,\n}: TPersonalDetailsConfig) => {\n    if (!residence_list || !account_settings) {\n        return {};\n    }\n\n    const default_residence = (real_account_signup_target === 'maltainvest' && account_settings?.residence) || '';\n\n    const config = {\n        account_opening_reason: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.account_opening_reason ?? '',\n            rules: [['req', localize('Account opening reason is required.')]],\n        },\n        salutation: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.salutation ?? '',\n            rules: [['req', localize('Salutation is required.')]],\n        },\n        first_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.first_name ?? '',\n            rules: [\n                ['req', localize('First name is required.')],\n                ['length', localize('First name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        last_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.last_name ?? '',\n            rules: [\n                ['req', localize('Last name is required.')],\n                ['length', localize('Last name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        date_of_birth: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.date_of_birth\n                ? toMoment(account_settings.date_of_birth).format('YYYY-MM-DD')\n                : '',\n            rules: [\n                ['req', localize('Date of birth is required.')],\n                [\n                    (v: string) => toMoment(v).isValid() && toMoment(v).isBefore(toMoment().subtract(18, 'years')),\n                    localize('You must be 18 years old and above.'),\n                ],\n            ],\n        },\n        place_of_birth: {\n            supported_in: ['maltainvest', 'iom', 'malta'],\n            default_value:\n                (account_settings.place_of_birth &&\n                    residence_list.find(item => item.value === account_settings.place_of_birth)?.text) ||\n                '',\n            rules: [['req', localize('Place of birth is required.')]],\n        },\n        citizen: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value:\n                (account_settings.citizen &&\n                    residence_list.find(item => item.value === account_settings.citizen)?.text) ||\n                '',\n            rules: [['req', localize('Citizenship is required')]],\n        },\n        phone: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.phone ?? '',\n            rules: [\n                ['req', localize('Phone is required.')],\n                ['phone', localize('Phone is not in a proper format.')],\n                [\n                    (value: string) => {\n                        // phone_trim uses regex that trims non-digits\n                        const phone_trim = value.replace(/\\D/g, '');\n                        // minimum characters required is 9 numbers (excluding +- signs or space)\n                        return validLength(phone_trim, { min: PHONE_NUMBER_LENGTH.MIN, max: PHONE_NUMBER_LENGTH.MAX });\n                    },\n                    localize('You should enter {{min}}-{{max}} numbers.', {\n                        min: PHONE_NUMBER_LENGTH.MIN,\n                        max: PHONE_NUMBER_LENGTH.MAX,\n                    }),\n                ],\n            ],\n        },\n        tax_residence: {\n            //if tax_residence is already set, we will use it as default value else for mf clients we will use residence as default value\n            default_value:\n                (account_settings?.tax_residence &&\n                    residence_list.find(item => item.value === account_settings?.tax_residence)?.text) ||\n                default_residence,\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Tax residence is required.')]],\n        },\n        tax_identification_number: {\n            default_value: account_settings.tax_identification_number ?? '',\n            supported_in: ['maltainvest'],\n            rules: [\n                ['req', localize('Tax Identification Number is required.')],\n                [\n                    'length',\n                    localize(\"Tax Identification Number can't be longer than 25 characters.\"),\n                    { min: 0, max: 25 },\n                ],\n                [\n                    // check if the TIN value is available, then perform the regex test\n                    // else return true (to pass the test)\n                    // this is to allow empty string to pass the test in case of optioal TIN field\n                    (value: string) => (value ? RegExp(/^(?!^$|\\s+)[A-Za-z0-9./\\s-]{0,25}$/).test(value) : true),\n                    localize('Letters, numbers, spaces, periods, hyphens and forward slashes only.'),\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        // check if  TIN value is available,\n                        // only then ask client to fill in tax residence\n                        return value ? !!tax_residence : true;\n                    },\n                    localize('Please fill in Tax residence.'),\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        const tin_format = residence_list.find(\n                            res => res.text === tax_residence && res.tin_format\n                        )?.tin_format;\n                        return value && tin_format ? tin_format.some(regex => new RegExp(regex).test(value)) : true;\n                    },\n                    localize('Tax Identification Number is not properly formatted.'),\n                ],\n            ],\n        },\n        employment_status: {\n            default_value: account_settings.employment_status ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Employment status is required.')]],\n        },\n        tax_identification_confirm: {\n            default_value: false,\n            supported_in: ['maltainvest'],\n            rules: [['confirm', localize('Please confirm your tax information.')]],\n        },\n        document_type: {\n            default_value: account_settings.document_type ?? {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n            },\n            supported_in: ['svg'],\n            rules: [],\n        },\n        document_number: {\n            default_value: account_settings.document_number ?? '',\n            supported_in: ['svg'],\n            rules: [],\n        },\n        confirmation_checkbox: {\n            default_value: false,\n            supported_in: ['svg'],\n            rules: [],\n        },\n    };\n\n    // Need to check if client is high risk (only have SVG i.e. China & Russia)\n    // No need to get additinal details when client is high risk\n    if (!is_high_risk_client_for_mt5 && real_account_signup_target !== 'maltainvest') {\n        const properties_to_update: (keyof typeof config)[] = [\n            'place_of_birth',\n            'tax_residence',\n            'tax_identification_number',\n            'account_opening_reason',\n        ];\n\n        properties_to_update.forEach(key => {\n            config[key].supported_in.push('svg');\n            // Remove required rule for TIN and Tax residence from the config to make the fields optional\n            if (key === 'tax_identification_number' || key === 'tax_residence') {\n                config[key].rules = config[key].rules.filter(rule => rule[0] !== 'req');\n            }\n        });\n    }\n\n    return config;\n};\n\nconst personalDetailsConfig = <T>(\n    {\n        upgrade_info,\n        real_account_signup_target,\n        residence_list,\n        account_settings,\n        account_status,\n        residence,\n        is_high_risk_client_for_mt5,\n    }: TPersonalDetailsConfig,\n    PersonalDetails: T,\n    is_appstore = false\n) => {\n    const config = personal_details_config({\n        residence_list,\n        account_settings,\n        real_account_signup_target,\n        residence,\n        account_status,\n        is_high_risk_client_for_mt5,\n    });\n    const disabled_items = account_settings.immutable_fields;\n    return {\n        header: {\n            active_title: is_appstore ? localize('A few personal details') : localize('Complete your personal details'),\n            title: is_appstore ? localize('PERSONAL') : localize('Personal details'),\n        },\n        body: PersonalDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(\n                real_account_signup_target,\n                transformConfig(config, {\n                    real_account_signup_target,\n                    residence_list,\n                    account_settings,\n                    account_status,\n                    residence,\n                })\n            ),\n            is_svg: upgrade_info?.can_upgrade_to === 'svg',\n            is_mf: real_account_signup_target === 'maltainvest',\n            account_opening_reason_list: [\n                {\n                    text: localize('Hedging'),\n                    value: 'Hedging',\n                },\n                {\n                    text: localize('Income Earning'),\n                    value: 'Income Earning',\n                },\n                {\n                    text: localize('Speculative'),\n                    value: 'Speculative',\n                },\n            ],\n            salutation_list: [\n                {\n                    label: localize('Mr'),\n                    value: 'Mr',\n                },\n\n                {\n                    label: localize('Ms'),\n                    value: 'Ms',\n                },\n            ],\n            disabled_items,\n            account_status,\n            residence,\n            account_settings,\n            real_account_signup_target,\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\n        icon: 'IcDashboardPersonalDetails',\n    };\n};\n\nconst transformConfig = (\n    config: TSchema,\n    { real_account_signup_target, residence_list, account_settings, account_status, residence }: TPersonalDetailsConfig\n) => {\n    // Remove required rule for malta and iom\n    if (['malta', 'iom'].includes(real_account_signup_target) && config.tax_residence) {\n        config?.tax_residence?.rules?.shift();\n    }\n    // Remove IDV for non supporting SVG countries\n    if (\n        !shouldShowIdentityInformation({\n            account_status,\n            account_settings,\n            residence,\n            residence_list,\n            real_account_signup_target,\n        })\n    ) {\n        delete config.document_type;\n        delete config.document_number;\n    }\n    return config;\n};\n\nexport default personalDetailsConfig;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_react__","str","replace","c","diacriticsMap","replacementList","base","chars","i","length","j","codes","removeDiacritics","registeredLocales","alpha2","alpha3","numeric","invertedNumeric","formatNumericCode","code","String","slice","hasOwnProperty","object","property","Object","prototype","call","filterNameBy","type","countryNameList","Array","isArray","TypeError","alpha3ToAlpha2","alpha2ToAlpha3","numericToAlpha3","padded","numericToAlpha2","toAlpha2","test","toUpperCase","forEach","codeInformation","s","registerLocale","localeData","locale","countries","alpha3ToNumeric","alpha2ToNumeric","toAlpha3","getName","lang","options","select","nameList","toLowerCase","err","getNames","localeList","undefined","filter","keys","reduce","newLocaleList","localeFilter","getAlpha2Code","name","normalizeString","string","areSimilar","a","b","codenames","p","mappedName","getSimpleAlpha2Code","getAlpha2Codes","getAlpha3Code","getSimpleAlpha3Code","getAlpha3Codes","getNumericCodes","langs","isValid","coerced","toString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","getIDVNotApplicableOption","PHONE_NUMBER_LENGTH","transformConfig","config","real_account_signup_target","residence_list","account_settings","account_status","residence","includes","tax_residence","rules","shift","citizen","country","find","item","value","maltainvest","identity","authentication","should_skip_idv","status","AUTH_STATUS_CODES","some","Boolean","services","idv","is_country_supported","shouldShowIdentityInformation","document_type","document_number","PersonalDetails","upgrade_info","is_high_risk_client_for_mt5","is_appstore","default_residence","account_opening_reason","supported_in","default_value","localize","salutation","first_name","min","max","getErrorMessages","last_name","date_of_birth","toMoment","format","v","isBefore","subtract","place_of_birth","text","phone","phone_trim","validLength","tax_identification_number","RegExp","tin_format","res","regex","employment_status","tax_identification_confirm","id","example_format","confirmation_checkbox","push","rule","personal_details_config","disabled_items","immutable_fields","header","active_title","title","body","form_value","getDefaultFields","props","validate","generateValidationFunction","is_svg","can_upgrade_to","is_mf","account_opening_reason_list","salutation_list","label","passthrough","icon"],"sourceRoot":""}