{"version":3,"file":"js/core.reality-check-modal.657838ced5fe5a32d07a.js","mappings":"uNAOMA,EAAa,SAAH,GAWV,IAVFC,EAAkB,EAAlBA,mBACAC,EAAU,EAAVA,WACAC,EAAS,EAATA,UACAC,EAAa,EAAbA,cACAC,EAAU,EAAVA,WACAC,EAAK,EAALA,MACAC,EAAM,EAANA,OACAC,EAAQ,EAARA,SACAC,EAAa,EAAbA,cACAC,EAAY,EAAZA,aAEMC,EAAWV,EAAmBW,mBAAqBN,EACzD,OACI,gBAAC,EAAAO,MAAK,CACFC,UAAU,gBACVX,UAAWA,EACXY,QAASV,EACTH,WAAYA,EACZc,gBAAgB,EAChBC,OAAOC,EAAAA,EAAAA,UAAS,6BAChBC,SAAS,sBACTC,MAAM,SAEN,gBAAC,EAAAC,OAAM,CACHC,cAAe,CACXC,SAAU,IAEdC,SAAUd,EACVF,SAAUA,IAET,gBAAGiB,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAcC,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAU,OACxE,gBAAC,EAAAC,KAAI,CAACC,YAAU,GACZ,gBAAC,EAAApB,MAAA,KAAU,KACP,gBAAC,EAAAqB,kBAAiB,CACdpB,UAAU,yBACVqB,sBAAsB,QACtBC,aAAaC,EAAAA,EAAAA,cAEb,gBAAC,EAAAC,KAAI,CACDC,GAAG,IACHC,KAAK,KACLC,YAAY,IACZ3B,UAAU,wDAETH,EACG,gBAAC,EAAA+B,SAAQ,CAACC,kBAAkB,8OAE5B,gBAAC,EAAAD,SAAQ,CAACC,kBAAkB,gPAGpC,gBAAC,EAAAL,KAAI,CACDC,GAAG,IACHC,KAAK,KACLC,YAAY,IACZ3B,UAAU,wDAEV,gBAAC,EAAA4B,SAAQ,CACLC,kBAAkB,mEAClBC,WAAY,CAAC,qBAAGC,IAAK,EAAG/B,UAAU,OAAOgC,QAASrC,QAI1D,uBAAKK,UAAU,6DAEf,gBAAC,EAAAwB,KAAI,CACDC,GAAG,IACHC,KAAK,KACLC,YAAY,IACZM,MAAM,SACNjC,UAAU,mDAEV,gBAAC,EAAA4B,SAAQ,CAACC,kBAAkB,sEAGhC,gBAACvC,EAAa,CACVwB,OAAQA,EACRC,QAASA,EACTJ,OAAQA,EACRK,aAAcA,EACdC,WAAYA,MAIxB,gBAAC,EAAAlB,MAAA,OAAY,CAACmC,eAAa,GACvB,gBAAC,EAAAC,iBAAgB,CACbnC,UAAU,wBACVoC,YAAU,EACVC,cAAcjC,EAAAA,EAAAA,UAAS,WACvBkB,aAAcR,EAAOL,WAAaI,GAAWD,EAC7C0B,OAAOlC,EAAAA,EAAAA,UAAS,oBAChBmC,SAAU9C,KAGf,IAK3B,EAEAP,EAAWsD,UAAY,CACnBrD,mBAAoBsD,IAAAA,OACpBrD,WAAYqD,IAAAA,KACZpD,UAAWoD,IAAAA,KACXnD,cAAemD,IAAAA,KACfjD,MAAOiD,IAAAA,KACPlD,WAAYkD,IAAAA,KACZhD,OAAQgD,IAAAA,KACR/C,SAAU+C,IAAAA,KACV9C,cAAe8C,IAAAA,KACf7C,aAAc6C,IAAAA,MAGlB,U,i7DCtGA,IAAMC,EAAM,SAAH,OAAMJ,EAAK,EAALA,MAAOK,EAAK,EAALA,MAAK,OACvB,uBAAK3C,UAAU,sBACX,4BAAOsC,GACP,8BAASK,GACP,EAGJC,EAAU,SAAH,OAAMN,EAAK,EAALA,MAAOK,EAAK,EAALA,MAAK,OAC3B,gBAAC,EAAAnB,KAAI,CAACC,GAAG,IAAIC,KAAK,KAAK1B,UAAU,uBAC7B,4BAAOsC,GACP,2BACA,8BAASK,GACN,EAGLE,EAAe,SAAH,GAYZ,IAXFzD,EAAU,EAAVA,WACAC,EAAS,EAATA,UACAC,EAAa,EAAbA,cACAC,EAAU,EAAVA,WACAE,EAAM,EAANA,OACAC,EAAQ,EAARA,SACAoD,EAAa,EAAbA,cACAnD,EAAa,EAAbA,cACAoD,EAAsB,EAAtBA,uBACAC,EAAW,EAAXA,YACApD,EAAY,EAAZA,aAE+D,IAAlBqD,EAAAA,SAAe,CAAC,GAAE,GAAxDC,EAAe,KAAEC,EAAiB,KAEzCF,EAAAA,WAAgB,WACZ,IAAMG,EAAaC,YAAYC,MAE/BC,EAAAA,GAAAA,eAAkBC,MAAK,SAAAC,GACnB,IAAMC,EAAgBD,EAASC,cAC/B,GAAKA,EAAL,CAEA,IACMC,EADYN,YAAYC,MACCF,EACzBQ,EAAeZ,EAAYa,IAAIF,EAAY,gBAEjDR,E,+VAAkB,CAAD,CACbW,uBAAuBC,EAAAA,EAAAA,aAAYH,GACnCI,gBAAiBC,EAAmBP,EAAcQ,WAAYN,EAAaO,QAC3EC,OAAQV,EAAcW,YAAcX,EAAcY,WAClDC,qBAAqBR,EAAAA,EAAAA,aAAwC,KAA3BL,EAAcQ,YAChDM,SAAUd,EAAcW,YAAcX,EAAcY,YACjDZ,GAZmB,CAc9B,GAEJ,GAAG,IAEH,IAAMO,EAAqB,SAACC,EAAYN,GACpC,IAAMa,GAAmBC,EAAAA,EAAAA,iBAAgBR,EAAYN,GAErD,OAAOxD,EAAAA,EAAAA,UAAS,6DAA8D,CAC1EuE,QAASF,EAAiBG,IAAI,QAC9BC,SAAUJ,EAAiBG,IAAI,SAC/BE,WAAYL,EAAiBG,IAAI,YAEzC,EAEA,OAAIG,EAAAA,EAAAA,eAAc7B,GACP,gBAAC,EAAA8B,QAAO,MAIf,gBAAC,EAAAjF,MAAK,CACFC,UAAU,gBACVX,UAAWA,EACXY,QAASV,EACTH,WAAYA,EACZiB,SAAS,sBACTH,gBAAgB,EAChBC,MACI,gBAAC,WAAc,KACX,gBAAC,EAAA8E,eAAc,KACX,gBAAC,EAAArD,SAAQ,CACLC,kBAAkB,+CAClBf,OAAQ,CAAEoE,UAAWhC,EAAgBqB,wBAG7C,gBAAC,EAAAY,cAAa,KACV,gBAAC,EAAAvD,SAAQ,CAACC,kBAAkB,mCAC5B,2BACCqB,EAAgBqB,sBAI7BjE,OAAO8E,EAAAA,EAAAA,YAAa,QAAU,SAE9B,gBAAC,EAAA7E,OAAM,CACHC,cAAe,CACXC,SAAUsC,GAEdrC,SAAUd,EACVF,SAAUA,IAET,gBAAGiB,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAcC,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAU,OACxE,gBAAC,EAAAC,KAAI,CAACC,YAAU,GACZ,gBAAC,EAAApB,MAAA,KAAU,KACP,gBAAC,EAAAsF,iBAAgB,CAACC,OAAO,OAAOC,UAAU,EAAOC,aAAaJ,EAAAA,EAAAA,aAC1D,gBAAC,EAAAhE,kBAAiB,CACdpB,UAAU,gCACVsB,aAAaC,EAAAA,EAAAA,aACbF,sBAAsB,SAEtB,uBAAKrB,UAAU,yBACX,uBAAKA,UAAU,iCACX,gBAAC0C,EAAG,CAACJ,OAAOlC,EAAAA,EAAAA,UAAS,YAAauC,MAAOO,EAAgBuC,UACzD,gBAAC/C,EAAG,CAACJ,OAAOlC,EAAAA,EAAAA,UAAS,YAAauC,MAAOO,EAAgBwC,WACzD,gBAAChD,EAAG,CACAJ,OAAOlC,EAAAA,EAAAA,UAAS,YAChBuC,MACI,gBAAC,EAAAgD,MAAK,CACFC,OAAQ1C,EAAgBsB,SACxBkB,SAAUxC,EAAgBwC,aAItC,gBAAChD,EAAG,CACAJ,OAAOlC,EAAAA,EAAAA,UAAS,iBAChBuC,MACI,gBAAC,WAAc,OACRO,EAAgBkB,SACdlB,EAAgBkB,OAAS,EAAI,IAAM,KACxC,gBAAC,EAAAuB,MAAK,CACFC,OAAQ1C,EAAgBkB,OACxBsB,SAAUxC,EAAgBwC,cAK1C,gBAAChD,EAAG,CACAJ,OAAOlC,EAAAA,EAAAA,UAAS,mBAChBuC,MAAOO,EAAgB2C,YAE3B,gBAACnD,EAAG,CAACJ,OAAOlC,EAAAA,EAAAA,UAAS,iBAAkBuC,MAAOO,EAAgB4C,aAC9D,gBAACpD,EAAG,CACAJ,OAAOlC,EAAAA,EAAAA,UAAS,oBAChBuC,MACI,gBAAC,EAAAgD,MAAK,CACFC,OAAQ1C,EAAgB6C,iBACxBL,SAAUxC,EAAgBwC,cAK1C,gBAAC,EAAAM,OAAM,CACHC,KAAK,SACLC,WAAS,EACTC,OAAK,EACLnE,QACIkB,EAAgBkD,oBAAsBtD,EAAgBnD,EAE1DK,UAAU,4DAETI,EAAAA,EAAAA,UAAS,mBAIlB,gBAAC,EAAA+E,cAAa,KACV,uBAAKnF,UAAU,8BAGnB,uBAAKA,UAAU,yBACX,gBAAC4C,EAAO,CACJN,OAAOlC,EAAAA,EAAAA,UAAS,qBAChBuC,MAAOO,EAAgBc,kBAE3B,gBAACpB,EAAO,CACJN,OAAOlC,EAAAA,EAAAA,UAAS,eAChBuC,MAAOO,EAAgBqB,sBAE3B,gBAAC3B,EAAO,CACJN,OAAOlC,EAAAA,EAAAA,UAAS,iBAChBuC,MAAOO,EAAgBY,wBAG3B,gBAAC,EAAAmB,eAAc,KACX,uBAAKjF,UAAU,8BAGnB,gBAAC,EAAAwB,KAAI,CACDC,GAAG,IACHC,KAAK,KACLC,YAAY,IACZM,MAAM,SACNjC,UAAU,mDAEV,gBAAC,EAAA4B,SAAQ,CAACC,kBAAkB,uDAGhC,gBAACvC,EAAa,CACVwB,OAAQA,EACRC,QAASA,EACTJ,OAAQA,EACRK,aAAcA,EACdC,WAAYA,QAMhC,gBAAC,EAAAlB,MAAA,OAAY,CAACmC,eAAa,GACvB,gBAAC,EAAAC,iBAAgB,CACbnC,UAAU,wBACVoC,YAAU,EACVC,cAAcjC,EAAAA,EAAAA,UAAS,WACvBkB,aAAcR,EAAOL,WAAaI,GAAWD,EAC7C0B,OAAOlC,EAAAA,EAAAA,UAAS,oBAChBmC,SAAU9C,KAGf,IAK3B,EAEAoD,EAAaL,UAAY,CACrBpD,WAAYqD,IAAAA,KACZpD,UAAWoD,IAAAA,KACXnD,cAAemD,IAAAA,KACflD,WAAYkD,IAAAA,KACZhD,OAAQgD,IAAAA,KACR/C,SAAU+C,IAAAA,KACVK,cAAeL,IAAAA,KACf9C,cAAe8C,IAAAA,KACfM,uBAAwBN,IAAAA,OACxBO,YAAaP,IAAAA,OACb7C,aAAc6C,IAAAA,MAGlB,U,oOCpPA,IAAMnD,EAAgB,SAAH,OAAMwB,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASJ,EAAM,EAANA,OAAQK,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAU,OACtE,uBAAKjB,UAAU,2BACX,gBAAC,EAAAqG,MAAK,CAACC,KAAK,aACP,gBAAGC,EAAK,EAALA,MAAK,OACL,gBAAC,EAAAC,MAAK,KACED,EAAK,CACT,gBAAc,OACdN,KAAK,OACL3D,OAAOlC,EAAAA,EAAAA,UAAS,iBAChBuC,MAAO7B,EAAOL,SACdgG,SAAUzF,EACV0F,OAAQzF,EACR0F,MAAMvG,EAAAA,EAAAA,UAAS,4CACfwG,UAAQ,EACRC,MAAO9F,EAAQN,UAAYE,EAAOF,SAClCqG,aAAa,MACbC,UAAU,MACZ,IAGR,EAGJC,EAAoB,SAAH,GAajB,IAZF7H,EAAkB,EAAlBA,mBACAC,EAAU,EAAVA,WACAC,EAAS,EAATA,UACA4H,EAAY,EAAZA,aACA1H,EAAU,EAAVA,WACAC,EAAK,EAALA,MACA0H,EAAuB,EAAvBA,wBACAnE,EAAsB,EAAtBA,uBACAC,EAAW,EAAXA,YACAmE,EAAuB,EAAvBA,wBACAC,EAAkB,EAAlBA,mBACAC,EAAyB,EAAzBA,0BAEMC,GAAUC,EAAAA,EAAAA,cASV5H,EAAgB,WAElByH,EAAmB,GACnBE,EAAQE,KAAKC,EAAAA,OAAAA,WACbJ,EAA0B,EAC9B,EAEMzH,EAAe,SAAAkB,GACjB,IAAM+F,EAAQ,CAAC,EAEf,GAAK/F,EAAOL,SAEL,CACH,OAA2BiH,EAAAA,EAAAA,aAAY5G,EAAOL,SAAU,CAAEwF,KAAM,SAAU0B,IAAK,GAAIC,IAAK,KAAhFC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QACVD,IAAOhB,EAAMpG,SAAWqH,EACjC,MAJIjB,EAAMpG,UAAWL,EAAAA,EAAAA,UAAS,2BAM9B,OAAOyG,CACX,EAEMnH,EAAW,SAAAoB,GACbuG,EAA0B,GAC1BF,EAAwBrG,EAAOL,SACnC,EAKA,OAAKyG,GAA2BnE,EAExB,gBAAC,EAAY,CACT3D,WAAYA,EACZC,UAAWA,EACXE,WAAYA,EACZuD,cAzCU,WAElBsE,EAAmB,GACnBE,EAAQE,KAAKC,EAAAA,OAAAA,WACbJ,EAA0B,EAC9B,EAqCY1H,cAAeA,EACfC,aAAcA,EACdF,SAAUA,EACVD,OAAQwH,EACRlE,uBAAwBA,EACxBC,YAAaA,EACb1D,cAAeA,IAMvB,gBAAC,EAAU,CACPH,mBAAoBA,EACpBC,WAAYA,EACZC,UAAWA,EACXE,WAAYA,EACZC,MAAOA,EACPG,cAAeA,EACfC,aAAcA,EACdF,SAAUA,EACVD,OAAQwH,EACR3H,cAAeA,GAG3B,EAEA0H,EAAkBxE,UAAY,CAC1BrD,mBAAoBsD,IAAAA,OACpBrD,WAAYqD,IAAAA,KACZpD,UAAWoD,IAAAA,KACX6E,QAAS7E,IAAAA,OACTwE,aAAcxE,IAAAA,KACdjD,MAAOiD,IAAAA,KACPlD,WAAYkD,IAAAA,KACZyE,wBAAyBzE,IAAAA,KACzBM,uBAAwBN,IAAAA,OACxBO,YAAaP,IAAAA,OACb0E,wBAAyB1E,IAAAA,KACzB2E,mBAAoB3E,IAAAA,KACpB4E,0BAA2B5E,IAAAA,MAG/B,MCrIA,GDqIesF,EAAAA,EAAAA,KAAQ,gBAAGC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAE,EAAFA,GAAE,MAAQ,CAChDjB,aAAce,EAAOvI,OACrBN,mBAAoB6I,EAAO7I,mBAC3BI,WAAYyI,EAAOG,yBACnB3I,MAA4C,QAArCwI,EAAOI,0BACdlB,wBAAyBc,EAAOd,wBAChCnE,uBAAwBiF,EAAOjF,uBAC/BoE,wBAAyBa,EAAOb,wBAChCE,0BAA2BW,EAAOX,0BAClCrE,YAAaiF,EAAOjF,YACpB3D,UAAW6I,EAAG7I,UACdD,WAAY8I,EAAG9I,WACfgI,mBAAoBc,EAAGd,mBAC1B,GAbD,CAaIJ,E","sources":["webpack:///./App/Containers/RealityCheckModal/brief-modal.jsx","webpack:///./App/Containers/RealityCheckModal/summary-modal.jsx","webpack:///./App/Containers/RealityCheckModal/reality-check-modal.jsx","webpack:///./App/Containers/RealityCheckModal/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport { Div100vhContainer, Modal, FormSubmitButton, Text } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\n\nconst BriefModal = ({\n    country_standpoint,\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    is_mx,\n    logout,\n    onSubmit,\n    openStatement,\n    validateForm,\n}) => {\n    const is_uk_mx = country_standpoint.is_united_kingdom && is_mx;\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            has_close_icon={false}\n            title={localize('Trading statistics report')}\n            portalId='modal_root_absolute'\n            width='720px'\n        >\n            <Formik\n                initialValues={{\n                    interval: '',\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <Div100vhContainer\n                                className='reality-check__wrapper'\n                                max_autoheight_offset='204px'\n                                is_disabled={isDesktop()}\n                            >\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    className='reality-check__text reality-check__text--description'\n                                >\n                                    {is_uk_mx ? (\n                                        <Localize i18n_default_text='Gaming trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.' />\n                                    ) : (\n                                        <Localize i18n_default_text='Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.' />\n                                    )}\n                                </Text>\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    className='reality-check__text reality-check__text--description'\n                                >\n                                    <Localize\n                                        i18n_default_text='Would like to check your statement first? <0>Check Statement</0>'\n                                        components={[<a key={0} className='link' onClick={openStatement} />]}\n                                    />\n                                </Text>\n\n                                <div className='reality-check__separator reality-check__separator--large' />\n\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    line_height='m'\n                                    align='center'\n                                    className='reality-check__text reality-check__text--center'\n                                >\n                                    <Localize i18n_default_text='Please specify your preferred interval reality check in minutes:' />\n                                </Text>\n\n                                <IntervalField\n                                    values={values}\n                                    touched={touched}\n                                    errors={errors}\n                                    handleChange={handleChange}\n                                    handleBlur={handleBlur}\n                                />\n                            </Div100vhContainer>\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nBriefModal.propTypes = {\n    country_standpoint: PropTypes.object,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_mx: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openStatement: PropTypes.func,\n    validateForm: PropTypes.func,\n};\n\nexport default BriefModal;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    Modal,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Loading,\n    ThemedScrollbars,\n    Money,\n    Button,\n    FormSubmitButton,\n    Text,\n} from '@deriv/components';\nimport { isDesktop, isEmptyObject, getDiffDuration, toGMTFormat, isMobile } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\n\nconst Row = ({ label, value }) => (\n    <div className='reality-check__row'>\n        <span>{label}</span>\n        <strong>{value}</strong>\n    </div>\n);\n\nconst RowInfo = ({ label, value }) => (\n    <Text as='p' size='xs' className='reality-check__text'>\n        <span>{label}</span>\n        <br />\n        <strong>{value}</strong>\n    </Text>\n);\n\nconst SummaryModal = ({\n    disableApp,\n    enableApp,\n    IntervalField,\n    is_visible,\n    logout,\n    onSubmit,\n    openPositions,\n    openStatement,\n    reality_check_duration,\n    server_time,\n    validateForm,\n}) => {\n    const [computed_values, setComputedValues] = React.useState({});\n\n    React.useEffect(() => {\n        const before_req = performance.now();\n\n        WS.realityCheck().then(response => {\n            const reality_check = response.reality_check;\n            if (!reality_check) return;\n\n            const after_req = performance.now();\n            const time_taken = after_req - before_req;\n            const current_time = server_time.add(time_taken, 'milliseconds');\n\n            setComputedValues({\n                current_date_time_gmt: toGMTFormat(current_time),\n                duration_string: getSessionDuration(reality_check.start_time, current_time.unix()),\n                profit: reality_check.sell_amount - reality_check.buy_amount,\n                start_date_time_gmt: toGMTFormat(+reality_check.start_time * 1000),\n                turnover: reality_check.sell_amount + reality_check.buy_amount,\n                ...reality_check,\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const getSessionDuration = (start_time, current_time) => {\n        const session_duration = getDiffDuration(start_time, current_time);\n\n        return localize('{{num_day}} days {{num_hour}} hours {{num_minute}} minutes', {\n            num_day: session_duration.get('days'),\n            num_hour: session_duration.get('hours'),\n            num_minute: session_duration.get('minutes'),\n        });\n    };\n\n    if (isEmptyObject(computed_values)) {\n        return <Loading />;\n    }\n\n    return (\n        <Modal\n            className='reality-check'\n            enableApp={enableApp}\n            is_open={is_visible}\n            disableApp={disableApp}\n            portalId='modal_root_absolute'\n            has_close_icon={false}\n            title={\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Localize\n                            i18n_default_text='Your trading statistics since: {{date_time}}'\n                            values={{ date_time: computed_values.start_date_time_gmt }}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <Localize i18n_default_text='Your trading statistics since:' />\n                        <br />\n                        {computed_values.start_date_time_gmt}\n                    </MobileWrapper>\n                </React.Fragment>\n            }\n            width={isMobile() ? '304px' : '720px'}\n        >\n            <Formik\n                initialValues={{\n                    interval: reality_check_duration,\n                }}\n                validate={validateForm}\n                onSubmit={onSubmit}\n            >\n                {({ errors, isSubmitting, isValid, values, touched, handleChange, handleBlur }) => (\n                    <Form noValidate>\n                        <Modal.Body>\n                            <ThemedScrollbars height='75vh' autoHide={false} is_bypassed={isMobile()}>\n                                <Div100vhContainer\n                                    className='reality-check__column-wrapper'\n                                    is_disabled={isDesktop()}\n                                    max_autoheight_offset='204px'\n                                >\n                                    <div className='reality-check__column'>\n                                        <div className='reality-check__column-content'>\n                                            <Row label={localize('Login ID')} value={computed_values.loginid} />\n                                            <Row label={localize('Currency')} value={computed_values.currency} />\n                                            <Row\n                                                label={localize('Turnover')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.turnover}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Profit / Loss')}\n                                                value={\n                                                    <React.Fragment>\n                                                        {!!computed_values.profit &&\n                                                            (computed_values.profit < 0 ? '-' : '+')}\n                                                        <Money\n                                                            amount={computed_values.profit}\n                                                            currency={computed_values.currency}\n                                                        />\n                                                    </React.Fragment>\n                                                }\n                                            />\n                                            <Row\n                                                label={localize('Contract bought')}\n                                                value={computed_values.buy_count}\n                                            />\n                                            <Row label={localize('Contract sold')} value={computed_values.sell_count} />\n                                            <Row\n                                                label={localize('Potential profit')}\n                                                value={\n                                                    <Money\n                                                        amount={computed_values.potential_profit}\n                                                        currency={computed_values.currency}\n                                                    />\n                                                }\n                                            />\n                                        </div>\n                                        <Button\n                                            type='button'\n                                            secondary\n                                            large\n                                            onClick={\n                                                computed_values.open_contract_count ? openPositions : openStatement\n                                            }\n                                            className='reality-check__button reality-check__button--full-width'\n                                        >\n                                            {localize('Go to Reports')}\n                                        </Button>\n                                    </div>\n\n                                    <MobileWrapper>\n                                        <div className='reality-check__separator' />\n                                    </MobileWrapper>\n\n                                    <div className='reality-check__column'>\n                                        <RowInfo\n                                            label={localize('Session duration:')}\n                                            value={computed_values.duration_string}\n                                        />\n                                        <RowInfo\n                                            label={localize('Login time:')}\n                                            value={computed_values.start_date_time_gmt}\n                                        />\n                                        <RowInfo\n                                            label={localize('Current time:')}\n                                            value={computed_values.current_date_time_gmt}\n                                        />\n\n                                        <DesktopWrapper>\n                                            <div className='reality-check__separator' />\n                                        </DesktopWrapper>\n\n                                        <Text\n                                            as='p'\n                                            size='xs'\n                                            line_height='m'\n                                            align='center'\n                                            className='reality-check__text reality-check__text--center'\n                                        >\n                                            <Localize i18n_default_text='Your preferred time interval between each report:' />\n                                        </Text>\n\n                                        <IntervalField\n                                            values={values}\n                                            touched={touched}\n                                            errors={errors}\n                                            handleChange={handleChange}\n                                            handleBlur={handleBlur}\n                                        />\n                                    </div>\n                                </Div100vhContainer>\n                            </ThemedScrollbars>\n                        </Modal.Body>\n                        <Modal.Footer has_separator>\n                            <FormSubmitButton\n                                className='reality-check__submit'\n                                has_cancel\n                                cancel_label={localize('Log out')}\n                                is_disabled={!values.interval || !isValid || isSubmitting}\n                                label={localize('Continue trading')}\n                                onCancel={logout}\n                            />\n                        </Modal.Footer>\n                    </Form>\n                )}\n            </Formik>\n        </Modal>\n    );\n};\n\nSummaryModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    IntervalField: PropTypes.func,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSubmit: PropTypes.func,\n    openPositions: PropTypes.func,\n    openStatement: PropTypes.func,\n    reality_check_duration: PropTypes.number,\n    server_time: PropTypes.object,\n    validateForm: PropTypes.func,\n};\n\nexport default SummaryModal;\n","import { Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Input } from '@deriv/components';\nimport { routes, validNumber } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport BriefModal from './brief-modal.jsx';\nimport SummaryModal from './summary-modal.jsx';\n\nconst IntervalField = ({ values, touched, errors, handleChange, handleBlur }) => (\n    <div className='reality-check__fieldset'>\n        <Field name='interval'>\n            {({ field }) => (\n                <Input\n                    {...field}\n                    data-lpignore='true'\n                    type='text'\n                    label={localize('Time interval')}\n                    value={values.interval}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    hint={localize('Interval should be between 10-60 minutes')}\n                    required\n                    error={touched.interval && errors.interval}\n                    autoComplete='off'\n                    maxLength='2'\n                />\n            )}\n        </Field>\n    </div>\n);\n\nconst RealityCheckModal = ({\n    country_standpoint,\n    disableApp,\n    enableApp,\n    logoutClient,\n    is_visible,\n    is_mx,\n    reality_check_dismissed,\n    reality_check_duration,\n    server_time,\n    setRealityCheckDuration,\n    setReportsTabIndex,\n    setVisibilityRealityCheck,\n}) => {\n    const history = useHistory();\n\n    const openPositions = () => {\n        // index of open positions in reports' side menu is 0\n        setReportsTabIndex(0);\n        history.push(routes.positions);\n        setVisibilityRealityCheck(0);\n    };\n\n    const openStatement = () => {\n        // index of statement in reports' side menu is 2\n        setReportsTabIndex(2);\n        history.push(routes.statement);\n        setVisibilityRealityCheck(0);\n    };\n\n    const validateForm = values => {\n        const error = {};\n\n        if (!values.interval) {\n            error.interval = localize('This field is required.');\n        } else {\n            const { is_ok, message } = validNumber(values.interval, { type: 'number', min: 10, max: 60 });\n            if (!is_ok) error.interval = message;\n        }\n\n        return error;\n    };\n\n    const onSubmit = values => {\n        setVisibilityRealityCheck(0);\n        setRealityCheckDuration(values.interval);\n    };\n\n    // if user has seen the brief once and set\n    // the initial reality check interval\n    // we can show the summary from now on\n    if (!reality_check_dismissed && reality_check_duration) {\n        return (\n            <SummaryModal\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_visible={is_visible}\n                openPositions={openPositions}\n                openStatement={openStatement}\n                validateForm={validateForm}\n                onSubmit={onSubmit}\n                logout={logoutClient}\n                reality_check_duration={reality_check_duration}\n                server_time={server_time}\n                IntervalField={IntervalField}\n            />\n        );\n    }\n\n    return (\n        <BriefModal\n            country_standpoint={country_standpoint}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_visible={is_visible}\n            is_mx={is_mx}\n            openStatement={openStatement}\n            validateForm={validateForm}\n            onSubmit={onSubmit}\n            logout={logoutClient}\n            IntervalField={IntervalField}\n        />\n    );\n};\n\nRealityCheckModal.propTypes = {\n    country_standpoint: PropTypes.object,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    history: PropTypes.object,\n    logoutClient: PropTypes.func,\n    is_mx: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    reality_check_dismissed: PropTypes.bool,\n    reality_check_duration: PropTypes.number,\n    server_time: PropTypes.number,\n    setRealityCheckDuration: PropTypes.func,\n    setReportsTabIndex: PropTypes.func,\n    setVisibilityRealityCheck: PropTypes.func,\n};\n\nexport default connect(({ client, common, ui }) => ({\n    logoutClient: client.logout,\n    country_standpoint: client.country_standpoint,\n    is_visible: client.is_reality_check_visible,\n    is_mx: client.landing_company_shortcode === 'iom',\n    reality_check_dismissed: client.reality_check_dismissed,\n    reality_check_duration: client.reality_check_duration,\n    setRealityCheckDuration: client.setRealityCheckDuration,\n    setVisibilityRealityCheck: client.setVisibilityRealityCheck,\n    server_time: common.server_time,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    setReportsTabIndex: ui.setReportsTabIndex,\n}))(RealityCheckModal);\n","import RealityCheckModal from './reality-check-modal.jsx';\n\nexport default RealityCheckModal;\n"],"names":["BriefModal","country_standpoint","disableApp","enableApp","IntervalField","is_visible","is_mx","logout","onSubmit","openStatement","validateForm","is_uk_mx","is_united_kingdom","Modal","className","is_open","has_close_icon","title","localize","portalId","width","Formik","initialValues","interval","validate","errors","isSubmitting","isValid","values","touched","handleChange","handleBlur","Form","noValidate","Div100vhContainer","max_autoheight_offset","is_disabled","isDesktop","Text","as","size","line_height","Localize","i18n_default_text","components","key","onClick","align","has_separator","FormSubmitButton","has_cancel","cancel_label","label","onCancel","propTypes","PropTypes","Row","value","RowInfo","SummaryModal","openPositions","reality_check_duration","server_time","React","computed_values","setComputedValues","before_req","performance","now","WS","then","response","reality_check","time_taken","current_time","add","current_date_time_gmt","toGMTFormat","duration_string","getSessionDuration","start_time","unix","profit","sell_amount","buy_amount","start_date_time_gmt","turnover","session_duration","getDiffDuration","num_day","get","num_hour","num_minute","isEmptyObject","Loading","DesktopWrapper","date_time","MobileWrapper","isMobile","ThemedScrollbars","height","autoHide","is_bypassed","loginid","currency","Money","amount","buy_count","sell_count","potential_profit","Button","type","secondary","large","open_contract_count","Field","name","field","Input","onChange","onBlur","hint","required","error","autoComplete","maxLength","RealityCheckModal","logoutClient","reality_check_dismissed","setRealityCheckDuration","setReportsTabIndex","setVisibilityRealityCheck","history","useHistory","push","routes","validNumber","min","max","is_ok","message","connect","client","common","ui","is_reality_check_visible","landing_company_shortcode"],"sourceRoot":""}