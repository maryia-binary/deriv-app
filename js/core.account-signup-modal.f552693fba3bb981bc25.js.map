{"version":3,"file":"js/core.account-signup-modal.f552693fba3bb981bc25.js","mappings":"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","sources":["webpack:///./App/Containers/CitizenshipModal/set-citizenship-form.jsx","webpack:///./App/Containers/AccountSignupModal/signup-separator-container.jsx","webpack:///./App/Containers/PasswordSelectionModal/password-selection-modal.jsx","webpack:///./App/Containers/AccountSignupModal/validate-signup-fields.jsx","webpack:///./App/Containers/AccountSignupModal/account-signup-modal.jsx","webpack:///./App/Containers/AccountSignupModal/index.js","webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx"],"sourcesContent":["import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetCitizenshipForm = ({ class_prefix, errors, touched, setFieldValue, citizenship_list }) => (\n    <div className={`${class_prefix}__residence-selection`}>\n        <Field name='citizenship'>\n            {({ field }) => (\n                <React.Fragment>\n                    <Autocomplete\n                        {...field}\n                        autoComplete='off'\n                        input_id='dt_core_set-citizenship-form_signup-citizenship-select'\n                        type='text'\n                        label={localize('Citizenship')}\n                        error={touched.citizenship && errors.citizenship}\n                        required\n                        list_items={citizenship_list}\n                        onItemSelection={({ value, text }) => setFieldValue('citizenship', value ? text : '', true)}\n                    />\n                </React.Fragment>\n            )}\n        </Field>\n        <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n            <Localize i18n_default_text='Select your citizenship/nationality as it appears on your passport or other government-issued ID.' />\n        </Text>\n    </div>\n);\n\nSetCitizenshipForm.propTypes = {\n    class_prefix: PropTypes.string,\n    citizenship_list: PropTypes.arrayOf(PropTypes.object),\n    errors: PropTypes.object,\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetCitizenshipForm;\n","import classNames from 'classnames';\nimport * as React from 'react';\n\nconst SignupSeparatorContainer = ({ children }) => <div className='signup-separator-container'>{children}</div>;\n\nconst SignupSeparatorContainerLine = ({ is_invisible }) => (\n    <div\n        className={classNames('signup-separator-container__line', {\n            'signup-separator-container__line--invisible': is_invisible,\n        })}\n    />\n);\n\nSignupSeparatorContainer.Line = SignupSeparatorContainerLine;\n\nexport default SignupSeparatorContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'formik';\n\nimport { Button, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { getErrorMessages, redirectToSignUp } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { Analytics } from '@deriv/analytics';\n\nimport SignupSeparatorContainer from '../AccountSignupModal/signup-separator-container.jsx';\n\nimport 'Sass/app/modules/account-signup.scss';\n\nconst PasswordSelectionModal = observer(\n    ({\n        api_error,\n        errors,\n        handleBlur,\n        handleChange,\n        isModalVisible,\n        isSubmitting,\n        touched,\n        pw_input,\n        setFieldTouched,\n        updatePassword,\n        values,\n    }) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        React.useEffect(() => {\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'password_screen_opened',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n            });\n\n            //eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        return (\n            <div className='account-signup__password-selection'>\n                <Text\n                    as='p'\n                    size={is_mobile ? 'xs' : 's'}\n                    weight='bold'\n                    className='account-signup__heading'\n                    align='center'\n                >\n                    <Localize i18n_default_text='Keep your account secure with a password' />\n                </Text>\n                <Field name='password'>\n                    {({ field }) => (\n                        <PasswordMeter\n                            input={pw_input}\n                            has_error={!!(touched.password && errors.password)}\n                            custom_feedback_messages={getErrorMessages().password_warnings}\n                        >\n                            <PasswordInput\n                                {...field}\n                                autoComplete='new-password'\n                                className='account-signup__password-field'\n                                label={localize('Create a password')}\n                                error={touched.password && errors.password}\n                                required\n                                value={values.password}\n                                onBlur={handleBlur}\n                                onChange={e => {\n                                    const input = e.target;\n                                    setFieldTouched('password', true);\n                                    if (input) updatePassword(input.value);\n                                    handleChange(e);\n                                }}\n                                input_id='dt_core_account-signup-modal_account-signup-password-field'\n                            />\n                        </PasswordMeter>\n                    )}\n                </Field>\n\n                <Text as='p' size='xxs' className='account-signup__subtext' align='center'>\n                    <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                </Text>\n                <SignupSeparatorContainer />\n                {api_error ? (\n                    <React.Fragment>\n                        <Text\n                            as='p'\n                            size='xxs'\n                            color='loss-danger'\n                            className='account-signup__subtext account-signup__subtext--error'\n                            align='center'\n                        >\n                            {api_error}\n                        </Text>\n                        <div className='account-signup__error-wrapper'>\n                            <Button\n                                large\n                                secondary\n                                text={localize('Cancel')}\n                                type='button'\n                                onClick={() => isModalVisible(false)}\n                            />\n                            <Button\n                                large\n                                primary\n                                text={localize('Create new account')}\n                                type='button'\n                                onClick={() => redirectToSignUp()}\n                            />\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <div className='account-signup__footer'>\n                        <Button\n                            className={classNames('account-signup__btn', {\n                                'account-signup__btn--disabled': !values.password || errors.password || isSubmitting,\n                            })}\n                            id='dt_core_account-signup-modal_submit-btn'\n                            type='submit'\n                            is_disabled={!values.password || !!errors.password || isSubmitting}\n                            text={localize('Start trading')}\n                            large\n                            primary\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default PasswordSelectionModal;\n","import { validPassword, validLength, website_name, getErrorMessages } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst validateSignupFields = (values, residence_list) => {\n    const errors = {};\n\n    if (\n        !validLength(values.password, {\n            min: 8,\n            max: 25,\n        })\n    ) {\n        errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n            min_number: 8,\n            max_number: 25,\n        });\n    } else if (!validPassword(values.password)) {\n        errors.password = getErrorMessages().password();\n    }\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.residence.toLowerCase()\n        );\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    if (!values.citizenship) {\n        errors.citizenship = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(\n            item => item.text.toLowerCase() === values.citizenship.toLowerCase()\n        );\n\n        if (index_of_selection === -1) {\n            errors.citizenship = true;\n        }\n    }\n\n    return errors;\n};\n\nexport default validateSignupFields;\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Button, Checkbox, Dialog, Loading, Text } from '@deriv/components';\nimport { getLocation, SessionStore } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nimport { WS } from 'Services';\nimport { connect } from 'Stores/connect';\nimport { Analytics } from '@deriv/analytics';\n\nimport CitizenshipForm from '../CitizenshipModal/set-citizenship-form.jsx';\nimport PasswordSelectionModal from '../PasswordSelectionModal/password-selection-modal.jsx';\nimport ResidenceForm from '../SetResidenceModal/set-residence-form.jsx';\n\nimport validateSignupFields from './validate-signup-fields.jsx';\n\nimport 'Sass/app/modules/account-signup.scss';\n\nconst AccountSignup = ({ enableApp, is_mobile, isModalVisible, clients_country, onSignup, residence_list }) => {\n    const signupInitialValues = { citizenship: '', password: '', residence: '' };\n    const [api_error, setApiError] = React.useState(false);\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [country, setCountry] = React.useState('');\n    const history_value = React.useRef();\n    const [pw_input, setPWInput] = React.useState('');\n    const [is_password_modal, setIsPasswordModal] = React.useState(false);\n    const [is_disclaimer_accepted, setIsDisclaimerAccepted] = React.useState(false);\n\n    const checkResidenceIsBrazil = selected_country =>\n        selected_country && residence_list[indexOfSelection(selected_country)]?.value?.toLowerCase() === 'br';\n\n    const disableButton = (values, errors) =>\n        !(checkResidenceIsBrazil(values.residence) ? is_disclaimer_accepted : true) ||\n        !values.residence ||\n        !!errors.residence ||\n        !values.citizenship ||\n        !!errors.citizenship;\n\n    const updatePassword = new_password => {\n        setPWInput(new_password);\n    };\n\n    // didMount lifecycle hook\n    React.useEffect(() => {\n        WS.wait('website_status', 'residence_list').then(() => {\n            if (clients_country && residence_list) {\n                setCountry(getLocation(residence_list, clients_country, 'text'));\n            }\n            setIsLoading(false);\n        });\n\n        Analytics.trackEvent('ce_virtual_signup_form', {\n            action: 'signup_confirmed',\n            form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n        });\n\n        Analytics.trackEvent('ce_virtual_signup_form', {\n            action: 'country_selection_screen_opened',\n            form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n        });\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const validateSignupPassthrough = values => validateSignupFields(values, residence_list);\n\n    const indexOfSelection = selected_country =>\n        residence_list.findIndex(item => item.text.toLowerCase() === selected_country?.toLowerCase());\n\n    const onSignupPassthrough = values => {\n        const index_of_selected_residence = indexOfSelection(values.residence);\n        const index_of_selected_citizenship = indexOfSelection(values.citizenship);\n\n        const modded_values = {\n            ...values,\n            residence: residence_list[index_of_selected_residence].value,\n            citizenship: residence_list[index_of_selected_citizenship].value,\n        };\n\n        onSignup(modded_values, onSignupComplete);\n    };\n\n    const onSignupComplete = error => {\n        if (error) {\n            setApiError(error);\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_flow_error',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n                error_message: error,\n            });\n        } else {\n            isModalVisible(false);\n            SessionStore.remove('signup_query_param');\n            enableApp();\n\n            Analytics.trackEvent('ce_virtual_signup_form', {\n                action: 'signup_done',\n                form_name: is_mobile ? 'virtual_signup_web_mobile_default' : 'virtual_signup_web_desktop_default',\n            });\n        }\n    };\n\n    return (\n        <div className='account-signup'>\n            {is_loading ? (\n                <Loading is_fullscreen={false} />\n            ) : (\n                <Formik\n                    initialValues={signupInitialValues}\n                    validate={validateSignupPassthrough}\n                    onSubmit={onSignupPassthrough}\n                    residence_list={residence_list}\n                >\n                    {({\n                        isSubmitting,\n                        handleBlur,\n                        errors,\n                        handleChange,\n                        values,\n                        setFieldValue,\n                        setFieldTouched,\n                        touched,\n                    }) => (\n                        <Form>\n                            {!is_password_modal ? (\n                                <div className='account-signup__location-selection'>\n                                    <Text\n                                        as='h1'\n                                        size={is_mobile ? 'xs' : 's'}\n                                        weight='bold'\n                                        className='account-signup__heading'\n                                    >\n                                        {localize('Select your country and citizenship:')}\n                                    </Text>\n                                    <ResidenceForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        onResidenceSelectionChanged={() => setIsDisclaimerAccepted(false)}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        residence_list={residence_list}\n                                        default_value={country}\n                                        history_value={history_value.current}\n                                    />\n                                    <CitizenshipForm\n                                        class_prefix='account-signup'\n                                        errors={errors}\n                                        touched={touched}\n                                        setFieldTouched={setFieldTouched}\n                                        setFieldValue={setFieldValue}\n                                        citizenship_list={residence_list}\n                                    />\n                                    {checkResidenceIsBrazil(values.residence) && (\n                                        <Checkbox\n                                            checked={is_disclaimer_accepted}\n                                            onChange={() => setIsDisclaimerAccepted(!is_disclaimer_accepted)}\n                                            className='account-signup__checkbox'\n                                            classNameLabel='account-signup__label'\n                                            label={localize(\n                                                'I hereby confirm that my request for opening an account with Deriv to trade OTC products issued and offered exclusively outside Brazil was initiated by me. I fully understand that Deriv is not regulated by CVM and by approaching Deriv I intend to set up a relation with a foreign company.'\n                                            )}\n                                        />\n                                    )}\n                                    <div className='account-signup__footer'>\n                                        <Button\n                                            className='account-signup__btn'\n                                            is_disabled={disableButton(values, errors)}\n                                            type='button'\n                                            onClick={() => {\n                                                history_value.current = values;\n                                                setIsPasswordModal(true);\n                                            }}\n                                            primary\n                                            large\n                                            text={localize('Next')}\n                                        />\n                                    </div>\n                                </div>\n                            ) : (\n                                <PasswordSelectionModal\n                                    api_error={api_error}\n                                    errors={errors}\n                                    handleBlur={handleBlur}\n                                    handleChange={handleChange}\n                                    isModalVisible={isModalVisible}\n                                    isSubmitting={isSubmitting}\n                                    touched={touched}\n                                    pw_input={pw_input}\n                                    setFieldTouched={setFieldTouched}\n                                    updatePassword={updatePassword}\n                                    values={values}\n                                />\n                            )}\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </div>\n    );\n};\n\nAccountSignup.propTypes = {\n    clients_country: PropTypes.string,\n    enableApp: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.array,\n    is_mobile: PropTypes.bool,\n    isModalVisible: PropTypes.func,\n};\n\nconst AccountSignupModal = ({\n    enableApp,\n    disableApp,\n    clients_country,\n    is_loading,\n    is_mobile,\n    is_visible,\n    is_logged_in,\n    logout,\n    onSignup,\n    residence_list,\n    toggleAccountSignupModal,\n}) => {\n    React.useEffect(() => {\n        // a logged in user should not be able to create a new account\n        if (is_visible && is_logged_in) {\n            logout();\n        }\n    }, [is_visible, is_logged_in, logout]);\n\n    return (\n        <Dialog\n            className='account-signup__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_mobile_full_width={false}\n        >\n            <AccountSignup\n                clients_country={clients_country}\n                onSignup={onSignup}\n                residence_list={residence_list}\n                is_mobile={is_mobile}\n                isModalVisible={toggleAccountSignupModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n};\n\nAccountSignupModal.propTypes = {\n    clients_country: PropTypes.string,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_mobile: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logout: PropTypes.func,\n    onSignup: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    toggleAccountSignupModal: PropTypes.func,\n};\n\nexport default connect(({ ui, client }) => ({\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    is_mobile: ui.is_mobile,\n    onSignup: client.onSignup,\n    is_logged_in: client.is_logged_in,\n    residence_list: client.residence_list,\n    clients_country: client.clients_country,\n    logout: client.logout,\n}))(AccountSignupModal);\n","import AccountSignupModal from './account-signup-modal.jsx';\n\nexport default AccountSignupModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    children,\n    class_prefix = 'set-residence',\n    default_value,\n    history_value,\n    errors,\n    onResidenceSelectionChanged,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            input_id='dt_core_set-residence-form_signup-residence-select'\n                            type='text'\n                            label={localize('Country of residence')}\n                            historyValue={history_value}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => {\n                                setFieldValue('residence', value ? text : '', true);\n                                onResidenceSelectionChanged?.();\n                            }}\n                        />\n                    </React.Fragment>\n                )}\n            </Field>\n            {!errors?.residence?.length && (\n                <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n                    <Localize i18n_default_text='Country of residence is where you currently live.' />\n                </Text>\n            )}\n            <div className={`${class_prefix}__button_wrapper`}>{children}</div>\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.object,\n    class_prefix: PropTypes.string,\n    default_value: PropTypes.string,\n    history_value: PropTypes.string,\n    errors: PropTypes.object,\n    onResidenceSelectionChanged: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetResidenceForm;\n"],"names":["SetCitizenshipForm","class_prefix","errors","touched","setFieldValue","citizenship_list","className","Field","name","field","Autocomplete","autoComplete","input_id","type","label","localize","error","citizenship","required","list_items","onItemSelection","value","text","Text","as","size","color","Localize","i18n_default_text","propTypes","PropTypes","setFieldTouched","SignupSeparatorContainer","children","Line","is_invisible","classNames","observer","api_error","handleBlur","handleChange","isModalVisible","isSubmitting","pw_input","updatePassword","values","is_mobile","useStore","ui","React","Analytics","action","form_name","weight","align","PasswordMeter","input","has_error","password","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","onBlur","onChange","e","target","Button","large","secondary","onClick","primary","redirectToSignUp","id","is_disabled","residence_list","validLength","min","max","validPassword","min_number","max_number","residence","index_of_selection","findIndex","item","toLowerCase","disabled","website_name","AccountSignup","enableApp","clients_country","onSignup","setApiError","is_loading","setIsLoading","country","setCountry","history_value","setPWInput","is_password_modal","setIsPasswordModal","is_disclaimer_accepted","setIsDisclaimerAccepted","checkResidenceIsBrazil","selected_country","indexOfSelection","disableButton","new_password","WS","then","getLocation","onSignupComplete","error_message","SessionStore","Loading","is_fullscreen","Formik","initialValues","validate","validateSignupFields","onSubmit","index_of_selected_residence","index_of_selected_citizenship","modded_values","Form","onResidenceSelectionChanged","default_value","current","Checkbox","checked","classNameLabel","AccountSignupModal","disableApp","is_visible","is_logged_in","logout","toggleAccountSignupModal","Dialog","length","is_mobile_full_width","connect","client","is_account_signup_modal_visible","SetResidenceForm","historyValue"],"sourceRoot":""}