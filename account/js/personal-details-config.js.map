{"version":3,"file":"account/js/personal-details-config.js","mappings":"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","sources":["webpack://@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/account/external umd \"@deriv/translations\"","webpack://@deriv/account/external umd \"react\"","webpack://@deriv/account/webpack/bootstrap","webpack://@deriv/account/webpack/runtime/define property getters","webpack://@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/account/./Helpers/utils.tsx","webpack://@deriv/account/./Constants/personal-details.ts","webpack://@deriv/account/./Configs/personal-details-config.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import React from 'react';\nimport { Localize, localize } from '@deriv/translations';\nimport { filterObjProperties, toMoment, validLength, validName, getIDVNotApplicableOption } from '@deriv/shared';\nimport { ResidenceList, GetAccountStatus } from '@deriv/api-types';\nimport { FormikValues } from 'formik';\nimport { getIDVDocuments } from '../Constants/idv-document-config';\nimport { TServerError } from '../Types';\n\nexport const documentAdditionalError = (document_additional: string, document_additional_format: string) => {\n    let error_message = null;\n    if (!document_additional) {\n        error_message = localize('Please enter your document number. ');\n    } else {\n        const format_regex = getRegex(document_additional_format);\n        if (!format_regex.test(document_additional)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    citizen: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    citizen,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const should_skip_idv = account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const DEFAULT_CONFIG = {\n        new_display_name: '',\n        example_format: '',\n    };\n    const IDV_DOCUMENT_DATA: any = getIDVDocuments(country_code);\n    return IDV_DOCUMENT_DATA[document_type] ?? DEFAULT_CONFIG;\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string): string => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const validate =\n    (errors: Record<string, string>, values: Record<string, string>) =>\n    (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field];\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 2, max: 50 })) {\n            return localize('You should enter 2-50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format?: string) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, document_additional: string) => {\n    const error_message = documentAdditionalError(document_additional, document_type.additional?.format);\n    if (error_message) {\n        return localize(error_message) + getExampleFormat(document_type.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number: string, document_type: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type.example_format;\n    if (!document_number && document_type.text) {\n        let document_name = '';\n        const example_format = getExampleFormat(document_type.example_format);\n        switch (document_type.id) {\n            case 'drivers_license':\n                document_name = 'Driver License Reference number';\n                break;\n            case 'ssnit':\n                document_name = 'SSNIT number';\n                break;\n            default:\n                document_name = 'document number';\n                break;\n        }\n        return (\n            <Localize\n                i18n_default_text='Please enter your {{document_name}}. {{example_format}}'\n                values={{ document_name, example_format }}\n            />\n        );\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type.value);\n    if (!format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n// @ts-expect-error as the generic is a Array\nexport const flatten = <T extends Array<unknown>>(arr: T) => [].concat(...arr);\n\nexport const isServerError = (error: unknown): error is TServerError =>\n    typeof error === 'object' && error !== null && 'code' in error;\n","export const PHONE_NUMBER_LENGTH = {\n    MIN: 9,\n    MAX: 35,\n};\n","import { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport {\n    TSchema,\n    generateValidationFunction,\n    getDefaultFields,\n    getErrorMessages,\n    toMoment,\n    validLength,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { shouldShowIdentityInformation } from 'Helpers/utils';\nimport { TUpgradeInfo } from 'Types';\nimport { PHONE_NUMBER_LENGTH } from 'Constants/personal-details';\n\ntype TPersonalDetailsConfig = {\n    upgrade_info?: TUpgradeInfo;\n    real_account_signup_target: string;\n    residence_list: ResidenceList;\n    account_settings: GetSettings & {\n        document_type: string;\n        document_number: string;\n    };\n    residence: string;\n    account_status: GetAccountStatus;\n    is_high_risk_client_for_mt5?: boolean;\n};\n\nexport const personal_details_config = ({\n    residence_list,\n    account_settings,\n    real_account_signup_target,\n    is_high_risk_client_for_mt5,\n}: TPersonalDetailsConfig) => {\n    if (!residence_list || !account_settings) {\n        return {};\n    }\n\n    const default_residence = (real_account_signup_target === 'maltainvest' && account_settings?.residence) || '';\n\n    const config = {\n        account_opening_reason: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.account_opening_reason ?? '',\n            rules: [['req', localize('Account opening reason is required.')]],\n        },\n        salutation: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.salutation ?? '',\n            rules: [['req', localize('Salutation is required.')]],\n        },\n        first_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.first_name ?? '',\n            rules: [\n                ['req', localize('First name is required.')],\n                ['length', localize('First name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        last_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.last_name ?? '',\n            rules: [\n                ['req', localize('Last name is required.')],\n                ['length', localize('Last name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        date_of_birth: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.date_of_birth\n                ? toMoment(account_settings.date_of_birth).format('YYYY-MM-DD')\n                : '',\n            rules: [\n                ['req', localize('Date of birth is required.')],\n                [\n                    (v: string) => toMoment(v).isValid() && toMoment(v).isBefore(toMoment().subtract(18, 'years')),\n                    localize('You must be 18 years old and above.'),\n                ],\n            ],\n        },\n        place_of_birth: {\n            supported_in: ['maltainvest', 'iom', 'malta'],\n            default_value:\n                (account_settings.place_of_birth &&\n                    residence_list.find(item => item.value === account_settings.place_of_birth)?.text) ||\n                '',\n            rules: [['req', localize('Place of birth is required.')]],\n        },\n        citizen: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value:\n                (account_settings.citizen &&\n                    residence_list.find(item => item.value === account_settings.citizen)?.text) ||\n                '',\n            rules: [['req', localize('Citizenship is required')]],\n        },\n        phone: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.phone ?? '',\n            rules: [\n                ['req', localize('Phone is required.')],\n                ['phone', localize('Phone is not in a proper format.')],\n                [\n                    (value: string) => {\n                        // phone_trim uses regex that trims non-digits\n                        const phone_trim = value.replace(/\\D/g, '');\n                        // minimum characters required is 9 numbers (excluding +- signs or space)\n                        return validLength(phone_trim, { min: PHONE_NUMBER_LENGTH.MIN, max: PHONE_NUMBER_LENGTH.MAX });\n                    },\n                    localize('You should enter {{min}}-{{max}} numbers.', {\n                        min: PHONE_NUMBER_LENGTH.MIN,\n                        max: PHONE_NUMBER_LENGTH.MAX,\n                    }),\n                ],\n            ],\n        },\n        tax_residence: {\n            //if tax_residence is already set, we will use it as default value else for mf clients we will use residence as default value\n            default_value:\n                (account_settings?.tax_residence &&\n                    residence_list.find(item => item.value === account_settings?.tax_residence)?.text) ||\n                default_residence,\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Tax residence is required.')]],\n        },\n        tax_identification_number: {\n            default_value: account_settings.tax_identification_number ?? '',\n            supported_in: ['maltainvest'],\n            rules: [\n                ['req', localize('Tax Identification Number is required.')],\n                [\n                    'length',\n                    localize(\"Tax Identification Number can't be longer than 25 characters.\"),\n                    { min: 0, max: 25 },\n                ],\n                [\n                    // check if the TIN value is available, then perform the regex test\n                    // else return true (to pass the test)\n                    // this is to allow empty string to pass the test in case of optioal TIN field\n                    (value: string) => (value ? RegExp(/^(?!^$|\\s+)[A-Za-z0-9./\\s-]{0,25}$/).test(value) : true),\n                    localize('Letters, numbers, spaces, periods, hyphens and forward slashes only.'),\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        // check if  TIN value is available,\n                        // only then ask client to fill in tax residence\n                        return value ? !!tax_residence : true;\n                    },\n                    localize('Please fill in Tax residence.'),\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        const tin_format = residence_list.find(\n                            res => res.text === tax_residence && res.tin_format\n                        )?.tin_format;\n                        return value && tin_format ? tin_format.some(regex => new RegExp(regex).test(value)) : true;\n                    },\n                    localize('Tax Identification Number is not properly formatted.'),\n                ],\n            ],\n        },\n        employment_status: {\n            default_value: account_settings.employment_status ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Employment status is required.')]],\n        },\n        tax_identification_confirm: {\n            default_value: false,\n            supported_in: ['maltainvest'],\n            rules: [['confirm', localize('Please confirm your tax information.')]],\n        },\n        document_type: {\n            default_value: account_settings.document_type ?? {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n            },\n            supported_in: ['svg'],\n            rules: [],\n        },\n        document_number: {\n            default_value: account_settings.document_number ?? '',\n            supported_in: ['svg'],\n            rules: [],\n        },\n    };\n\n    // Need to check if client is high risk (only have SVG i.e. China & Russia)\n    // No need to get additinal details when client is high risk\n    if (!is_high_risk_client_for_mt5 && real_account_signup_target !== 'maltainvest') {\n        const properties_to_update: (keyof typeof config)[] = [\n            'place_of_birth',\n            'tax_residence',\n            'tax_identification_number',\n            'account_opening_reason',\n        ];\n\n        properties_to_update.forEach(key => {\n            config[key].supported_in.push('svg');\n            // Remove required rule for TIN and Tax residence from the config to make the fields optional\n            if (key === 'tax_identification_number' || key === 'tax_residence') {\n                config[key].rules = config[key].rules.filter(rule => rule[0] !== 'req');\n            }\n        });\n    }\n\n    return config;\n};\n\nconst personalDetailsConfig = <T>(\n    {\n        upgrade_info,\n        real_account_signup_target,\n        residence_list,\n        account_settings,\n        account_status,\n        residence,\n        is_high_risk_client_for_mt5,\n    }: TPersonalDetailsConfig,\n    PersonalDetails: T,\n    is_appstore = false\n) => {\n    const config = personal_details_config({\n        residence_list,\n        account_settings,\n        real_account_signup_target,\n        residence,\n        account_status,\n        is_high_risk_client_for_mt5,\n    });\n    const disabled_items = account_settings.immutable_fields;\n    return {\n        header: {\n            active_title: is_appstore ? localize('A few personal details') : localize('Complete your personal details'),\n            title: is_appstore ? localize('PERSONAL') : localize('Personal details'),\n        },\n        body: PersonalDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(\n                real_account_signup_target,\n                transformConfig(config, {\n                    real_account_signup_target,\n                    residence_list,\n                    account_settings,\n                    account_status,\n                    residence,\n                })\n            ),\n            is_svg: upgrade_info?.can_upgrade_to === 'svg',\n            is_mf: real_account_signup_target === 'maltainvest',\n            account_opening_reason_list: [\n                {\n                    text: localize('Hedging'),\n                    value: 'Hedging',\n                },\n                {\n                    text: localize('Income Earning'),\n                    value: 'Income Earning',\n                },\n                {\n                    text: localize('Speculative'),\n                    value: 'Speculative',\n                },\n            ],\n            salutation_list: [\n                {\n                    label: localize('Mr'),\n                    value: 'Mr',\n                },\n\n                {\n                    label: localize('Ms'),\n                    value: 'Ms',\n                },\n            ],\n            disabled_items,\n            account_status,\n            residence,\n            account_settings,\n            real_account_signup_target,\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\n        icon: 'IcDashboardPersonalDetails',\n    };\n};\n\nconst transformConfig = (\n    config: TSchema,\n    { real_account_signup_target, residence_list, account_settings, account_status, residence }: TPersonalDetailsConfig\n) => {\n    // Remove required rule for malta and iom\n    if (['malta', 'iom'].includes(real_account_signup_target) && config.tax_residence) {\n        config?.tax_residence?.rules?.shift();\n    }\n    // Remove IDV for non supporting SVG countries\n    if (\n        !shouldShowIdentityInformation({\n            account_status,\n            account_settings,\n            residence,\n            residence_list,\n            real_account_signup_target,\n        })\n    ) {\n        delete config.document_type;\n        delete config.document_number;\n    }\n    return config;\n};\n\nexport default personalDetailsConfig;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_react__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getIDVNotApplicableOption","PHONE_NUMBER_LENGTH","transformConfig","config","real_account_signup_target","residence_list","account_settings","account_status","residence","includes","tax_residence","rules","shift","citizen","country","find","item","value","maltainvest","should_skip_idv","status","some","Boolean","identity","services","idv","is_country_supported","shouldShowIdentityInformation","document_type","document_number","PersonalDetails","upgrade_info","is_high_risk_client_for_mt5","is_appstore","default_residence","account_opening_reason","supported_in","default_value","localize","salutation","first_name","min","max","getErrorMessages","name","last_name","date_of_birth","toMoment","format","v","isValid","isBefore","subtract","place_of_birth","text","phone","phone_trim","replace","validLength","tax_identification_number","RegExp","test","options","tin_format","res","regex","employment_status","tax_identification_confirm","id","example_format","forEach","push","filter","rule","personal_details_config","disabled_items","immutable_fields","header","active_title","title","body","form_value","getDefaultFields","props","validate","generateValidationFunction","is_svg","can_upgrade_to","is_mf","account_opening_reason_list","salutation_list","label","passthrough","icon"],"sourceRoot":""}