{"version":3,"file":"js/core.main~9514df9a.91d7105262e09c525d2a.js","mappings":"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","sources":["webpack:///../../account/src/Helpers/utils.tsx","webpack:///../../account/src/Sections/Assessment/FinancialAssessment/financial-information-list.ts","webpack:///../../account/src/Sections/Verification/Helpers/verification.js","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-form.tsx","webpack:///../../account/src/Sections/Verification/ProofOfAddress/proof-of-address-container.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido-sdk-view-container.tsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/idv.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/onfido.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-submission.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-container.jsx","webpack:///../../account/src/Sections/Verification/ProofOfIdentity/proof-of-identity-utils.ts"],"sourcesContent":["import React from 'react';\nimport { FormikValues } from 'formik';\nimport countries from 'i18n-iso-countries';\nimport { ResidenceList, GetAccountStatus } from '@deriv/api-types';\nimport {\n    filterObjProperties,\n    toMoment,\n    validLength,\n    validName,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    AUTH_STATUS_CODES,\n} from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { getIDVDocuments } from '../Constants/idv-document-config';\nimport { TServerError } from '../Types';\nimport { LANGUAGE_CODES } from '../Constants/onfido';\n\nexport const documentAdditionalError = (\n    additional_document_value: string | undefined,\n    document_additional_config: FormikValues\n) => {\n    let error_message = null;\n    if (!additional_document_value) {\n        error_message = localize('Please enter your {{document_name}}. ', {\n            document_name: document_additional_config?.display_name?.toLowerCase() ?? localize('document number'),\n        });\n    } else {\n        const format_regex = getRegex(document_additional_config?.format);\n        if (!format_regex.test(additional_document_value)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    citizen: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    citizen,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const identity = account_status?.authentication?.identity;\n\n    const is_identity_verified = identity?.status === AUTH_STATUS_CODES.VERIFIED;\n    const should_skip_idv =\n        is_identity_verified || account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const DEFAULT_CONFIG = {\n        new_display_name: '',\n        example_format: '',\n    };\n    const IDV_DOCUMENT_DATA: any = getIDVDocuments(country_code);\n    return IDV_DOCUMENT_DATA[document_type] ?? DEFAULT_CONFIG;\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string): string => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        case 'national_id_no_photo':\n            return localize('Enter your National Identification Number (NIN)');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 2, max: 50 })) {\n            return localize('You should enter 2-50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format?: string) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, additional_document_value?: string) => {\n    const error_message = documentAdditionalError(additional_document_value, document_type?.additional);\n    if (error_message) {\n        return localize(error_message) + getExampleFormat(document_type.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number: string, document_type: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type.example_format;\n    if (!document_number && document_type.text) {\n        let document_name = '';\n        const example_format = getExampleFormat(document_type.example_format);\n        switch (document_type.id) {\n            case 'drivers_license':\n                document_name = 'Driver License Reference number';\n                break;\n            case 'ssnit':\n                document_name = 'SSNIT number';\n                break;\n            case 'national_id_no_photo':\n                document_name = 'NIN';\n                break;\n            default:\n                document_name = 'document number';\n                break;\n        }\n        return (\n            <Localize\n                i18n_default_text='Please enter your {{document_name}}. {{example_format}}'\n                values={{ document_name, example_format }}\n            />\n        );\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type.value);\n    if (!format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n// @ts-expect-error as the generic is a Array\nexport const flatten = <T extends Array<unknown>>(arr: T) => [].concat(...arr);\n\nexport const isServerError = (error: unknown): error is TServerError =>\n    typeof error === 'object' && error !== null && 'code' in error;\n\n/**\n *  Returns the alpha 3 code for a given country code\n * @name convertAlpha2toAlpha3\n * @param country_code  - country code\n * @returns alpha 3 code\n */\nexport const convertAlpha2toAlpha3 = (country_code: string) =>\n    country_code.length !== 3 ? countries.alpha2ToAlpha3(country_code.toUpperCase()) : country_code;\n\n/**\n * Returns the alpha 2 code for a given country code\n * @name convertAlpha3toAlpha2\n * @param country_code - country code\n * @returns alpha 2 code\n */\n\nexport const convertAlpha3toAlpha2 = (country_code: string) =>\n    country_code.length !== 2 ? countries.alpha3ToAlpha2(country_code.toUpperCase()) : country_code;\n\n/**\n * Generates a language code supported by Onfido\n * @name getOnfidoSupportedLocaleCode\n * @param language_code\n * @returns language code supported by Onfido\n */\nexport const getOnfidoSupportedLocaleCode = (language_code: string) => {\n    try {\n        const code = language_code.toLowerCase().split('_');\n        if (code[0] === 'id') {\n            return LANGUAGE_CODES.ID;\n        }\n        return code.length > 1 ? `${code[0]}_${code[1].toUpperCase()}` : code[0];\n    } catch (e) {\n        return LANGUAGE_CODES.EN;\n    }\n};\n\nexport const getIDVDocumentType = (\n    idv_latest_attempt: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    residence: DeepRequired<ResidenceList[0]>\n) => {\n    if (!idv_latest_attempt || !Object.keys(residence).length) return localize('identity document');\n    const { document_type } = idv_latest_attempt;\n    if (!document_type) return localize('identity document');\n    const {\n        identity: {\n            services: {\n                idv: { documents_supported },\n            },\n        },\n    } = residence;\n    return documents_supported[document_type as string].display_name;\n};\n\nexport const validate = <T,>(errors: Record<string, string>, values: T) => {\n    return (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field as keyof typeof values] as string;\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n};\n\ntype TIDVErrorStatus = keyof typeof IDV_ERROR_STATUS;\nexport const verifyFields = (status: TIDVErrorStatus) => {\n    switch (status) {\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return ['date_of_birth'];\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return ['first_name', 'last_name'];\n        default:\n            return ['first_name', 'last_name', 'date_of_birth'];\n    }\n};\n","import { localize } from '@deriv/translations';\n\nexport const getIncomeSourceList = () => [\n    {\n        text: localize('Salaried Employee'),\n        value: 'Salaried Employee',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Investments & Dividends'),\n        value: 'Investments & Dividends',\n    },\n    {\n        text: localize('Pension'),\n        value: 'Pension',\n    },\n    {\n        text: localize('State Benefits'),\n        value: 'State Benefits',\n    },\n    {\n        text: localize('Savings & Inheritance'),\n        value: 'Savings & Inheritance',\n    },\n];\n\nexport const getEmploymentStatusList = () => [\n    {\n        text: localize('Employed'),\n        value: 'Employed',\n    },\n    {\n        text: localize('Pensioner'),\n        value: 'Pensioner',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Student'),\n        value: 'Student',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getEmploymentIndustryList = () => [\n    {\n        text: localize('Construction'),\n        value: 'Construction',\n    },\n    {\n        text: localize('Education'),\n        value: 'Education',\n    },\n    {\n        text: localize('Finance'),\n        value: 'Finance',\n    },\n    {\n        text: localize('Health'),\n        value: 'Health',\n    },\n    {\n        text: localize('Tourism'),\n        value: 'Tourism',\n    },\n    {\n        text: localize('Information & Communications Technology'),\n        value: 'Information & Communications Technology',\n    },\n    {\n        text: localize('Science & Engineering'),\n        value: 'Science & Engineering',\n    },\n    {\n        text: localize('Legal'),\n        value: 'Legal',\n    },\n    {\n        text: localize('Social & Cultural'),\n        value: 'Social & Cultural',\n    },\n    {\n        text: localize('Agriculture'),\n        value: 'Agriculture',\n    },\n    {\n        text: localize('Real Estate'),\n        value: 'Real Estate',\n    },\n    {\n        text: localize('Food Services'),\n        value: 'Food Services',\n    },\n    {\n        text: localize('Manufacturing'),\n        value: 'Manufacturing',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getOccupationList = () => [\n    {\n        text: localize('Chief Executives, Senior Officials and Legislators'),\n        value: 'Chief Executives, Senior Officials and Legislators',\n    },\n    {\n        text: localize('Managers'),\n        value: 'Managers',\n    },\n    {\n        text: localize('Professionals'),\n        value: 'Professionals',\n    },\n    {\n        text: localize('Clerks'),\n        value: 'Clerks',\n    },\n    {\n        text: localize('Personal Care, Sales and Service Workers'),\n        value: 'Personal Care, Sales and Service Workers',\n    },\n    {\n        text: localize('Agricultural, Forestry and Fishery Workers'),\n        value: 'Agricultural, Forestry and Fishery Workers',\n    },\n    {\n        text: localize('Craft, Metal, Electrical and Electronics Workers'),\n        value: 'Craft, Metal, Electrical and Electronics Workers',\n    },\n    {\n        text: localize('Plant and Machine Operators and Assemblers'),\n        value: 'Plant and Machine Operators and Assemblers',\n    },\n    {\n        text: localize('Cleaners and Helpers'),\n        value: 'Cleaners and Helpers',\n    },\n    {\n        text: localize('Mining, Construction, Manufacturing and Transport Workers'),\n        value: 'Mining, Construction, Manufacturing and Transport Workers',\n    },\n    {\n        text: localize('Armed Forces'),\n        value: 'Armed Forces',\n    },\n    {\n        text: localize('Government Officers'),\n        value: 'Government Officers',\n    },\n    {\n        text: localize('Students'),\n        value: 'Students',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getSourceOfWealthList = () => [\n    {\n        text: localize('Accumulation of Income/Savings'),\n        value: 'Accumulation of Income/Savings',\n    },\n    {\n        text: localize('Cash Business'),\n        value: 'Cash Business',\n    },\n    {\n        text: localize('Company Ownership'),\n        value: 'Company Ownership',\n    },\n    {\n        text: localize('Divorce Settlement'),\n        value: 'Divorce Settlement',\n    },\n    {\n        text: localize('Inheritance'),\n        value: 'Inheritance',\n    },\n    {\n        text: localize('Investment Income'),\n        value: 'Investment Income',\n    },\n    {\n        text: localize('Sale of Property'),\n        value: 'Sale of Property',\n    },\n];\n\nexport const getEducationLevelList = () => [\n    {\n        text: localize('Primary'),\n        value: 'Primary',\n    },\n    {\n        text: localize('Secondary'),\n        value: 'Secondary',\n    },\n    {\n        text: localize('Tertiary'),\n        value: 'Tertiary',\n    },\n];\n\nexport const getNetIncomeList = () => [\n    {\n        text: localize('Less than $25,000'),\n        value: 'Less than $25,000',\n    },\n    {\n        text: localize('$25,000 - $50,000'),\n        value: '$25,000 - $50,000',\n    },\n    {\n        text: localize('$50,001 - $100,000'),\n        value: '$50,001 - $100,000',\n    },\n    {\n        text: localize('$100,001 - $500,000'),\n        value: '$100,001 - $500,000',\n    },\n    {\n        text: localize('Over $500,000'),\n        value: 'Over $500,000',\n    },\n];\n\nexport const getEstimatedWorthList = () => [\n    {\n        text: localize('Less than $100,000'),\n        value: 'Less than $100,000',\n    },\n    {\n        text: localize('$100,000 - $250,000'),\n        value: '$100,000 - $250,000',\n    },\n    {\n        text: localize('$250,001 - $500,000'),\n        value: '$250,001 - $500,000',\n    },\n    {\n        text: localize('$500,001 - $1,000,000'),\n        value: '$500,001 - $1,000,000',\n    },\n    {\n        text: localize('Over $1,000,000'),\n        value: 'Over $1,000,000',\n    },\n];\n\nexport const getAccountTurnoverList = () => {\n    return [...getNetIncomeList()];\n};\n\nexport const getBinaryOptionsTradingExperienceList = () => [\n    {\n        text: localize('0-1 year'),\n        value: '0-1 year',\n    },\n    {\n        text: localize('1-2 years'),\n        value: '1-2 years',\n    },\n    {\n        text: localize('Over 3 years'),\n        value: 'Over 3 years',\n    },\n];\n\nexport const getBinaryOptionsTradingFrequencyList = () => [\n    {\n        text: localize('0-5 transactions in the past 12 months'),\n        value: '0-5 transactions in the past 12 months',\n    },\n    {\n        text: localize('6-10 transactions in the past 12 months'),\n        value: '6-10 transactions in the past 12 months',\n    },\n    {\n        text: localize('11-39 transactions in the past 12 months'),\n        value: '11-39 transactions in the past 12 months',\n    },\n    {\n        text: localize('40 transactions or more in the past 12 months'),\n        value: '40 transactions or more in the past 12 months',\n    },\n];\n\nexport const getCfdTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getCfdTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getForexTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getForexTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getOtherInstrumentsTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getOtherInstrumentsTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n","export const populateVerificationStatus = account_status => {\n    const { attempts, document, identity, income, needs_verification } = account_status.authentication;\n\n    const identity_status = identity.status;\n    const document_status = document.status;\n    const income_status = income.status;\n\n    const allow_document_upload = account_status.status.some(status => status === 'allow_document_upload');\n    const allow_poi_resubmission = account_status.status.some(status => status === 'allow_poi_resubmission');\n    const allow_poa_resubmission = account_status.status.some(status => status === 'allow_poa_resubmission');\n    const allow_poinc_resubmission = account_status.status.some(status => status === 'allow_poinc_resubmission');\n    const is_age_verified = account_status.status.some(status => status === 'age_verification');\n    const is_fully_authenticated = account_status.status.some(status => status === 'authenticated');\n    const is_idv_disallowed = account_status.status.some(status => status === 'idv_disallowed');\n    const poa_address_mismatch = account_status.status.some(status => status === 'poa_address_mismatch');\n\n    const has_poa = !(document && document.status === 'none');\n    const has_poi = !(identity && identity.status === 'none');\n    const has_poinc = !(income && income.status === 'none');\n    const has_submitted_poa = document_status === 'pending' && !allow_poa_resubmission;\n    const needs_poa = Boolean(needs_verification.length) && needs_verification.includes('document');\n    const needs_poi = Boolean(needs_verification.length) && needs_verification.includes('identity');\n    const needs_poinc = needs_verification.length && needs_verification.includes('income');\n\n    const { idv, onfido, manual } = identity.services;\n    const identity_last_attempt = attempts.latest;\n    const has_attempted_idv = Boolean(attempts.history.length && attempts.history.find(h => h.service === 'idv'));\n\n    return {\n        allow_document_upload,\n        allow_poa_resubmission,\n        allow_poi_resubmission,\n        allow_poinc_resubmission,\n        has_attempted_idv,\n        has_poa,\n        has_poi,\n        has_poinc,\n        has_submitted_poa,\n        identity_last_attempt,\n        identity_status,\n        document_status,\n        income_status,\n        idv,\n        is_age_verified,\n        is_fully_authenticated,\n        is_idv_disallowed,\n        manual,\n        needs_poa,\n        needs_poi,\n        needs_poinc,\n        needs_verification,\n        onfido,\n        poa_address_mismatch,\n    };\n};\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers, FormikValues } from 'formik';\nimport { Loading, Button, Text, ThemedScrollbars, FormSubmitButton, Modal, HintBox } from '@deriv/components';\nimport { useFileUploader } from '@deriv/hooks';\nimport { validAddress, validPostCode, validLetterSymbol, validLength, getLocation, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport FormFooter from '../../../Components/form-footer';\nimport FormBody from '../../../Components/form-body';\nimport FormBodySection from '../../../Components/form-body-section';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport LeaveConfirm from '../../../Components/leave-confirm';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { isServerError, validate } from '../../../Helpers/utils';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\n\ntype TProofOfAddressForm = {\n    className?: string;\n    is_resubmit: boolean;\n    is_for_cfd_modal?: boolean;\n    onCancel?: () => void;\n    onSubmit: (needs_poi: boolean) => void;\n    onSubmitForCFDModal: (index: number, values: FormikValues) => void;\n    step_index: number;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n>;\n\ntype TFormState = Record<'is_btn_loading' | 'is_submit_success' | 'should_allow_submit' | 'should_show_form', boolean>;\n\nconst ProofOfAddressForm = observer(\n    ({\n        is_resubmit,\n        is_for_cfd_modal,\n        onSubmit,\n        onSubmitForCFDModal,\n        step_index,\n        className,\n    }: Partial<TProofOfAddressForm>) => {\n        const { client, notifications, ui } = useStore();\n        const { account_settings, fetchResidenceList, fetchStatesList, getChangeableFields, states_list } = client;\n        const {\n            addNotificationMessageByKey: addNotificationByKey,\n            removeNotificationMessage,\n            removeNotificationByKey,\n        } = notifications;\n        const { is_mobile } = ui;\n        const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const [is_loading, setIsLoading] = React.useState(true);\n        const [form_values, setFormValues] = React.useState<TFormInitialValues>({\n            address_line_1: '',\n            address_line_2: '',\n            address_city: '',\n            address_state: '',\n            address_postcode: '',\n        });\n        const [api_initial_load_error, setAPIInitialLoadError] = React.useState(null);\n        const [form_state, setFormState] = React.useState<TFormState>({\n            is_btn_loading: false,\n            is_submit_success: false,\n            should_allow_submit: true,\n            should_show_form: true,\n        });\n\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa'), []);\n\n        const { upload } = useFileUploader();\n\n        React.useEffect(() => {\n            fetchResidenceList?.().then(() => {\n                Promise.all([fetchStatesList(), WS.wait('get_settings')]).then(() => {\n                    setFormValues({\n                        address_line_1: account_settings.address_line_1 ?? '',\n                        address_line_2: account_settings.address_line_2 ?? '',\n                        address_city: account_settings.address_city ?? '',\n                        address_state: account_settings.address_state ?? '',\n                        address_postcode: account_settings.address_postcode ?? '',\n                    });\n                    setIsLoading(false);\n                });\n            });\n        }, [account_settings, fetchResidenceList, fetchStatesList]);\n\n        const changeable_fields = getChangeableFields();\n\n        const validateFields = (values: TFormInitialValues) => {\n            (Object.entries(values) as ObjectEntries<TFormInitialValues>).forEach(\n                ([key, value]) => (values[key] = value.trim())\n            );\n\n            setFormState({ ...form_state, ...{ should_allow_submit: false } });\n            const errors: FormikErrors<TFormInitialValues> = {};\n            const validateValues = validate(errors, values);\n\n            const required_fields = ['address_line_1', 'address_city'];\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            const address_line_1_validation_result = validAddress(values.address_line_1, { is_required: true });\n            if (!address_line_1_validation_result.is_ok) {\n                errors.address_line_1 = address_line_1_validation_result.message;\n            }\n            const address_line_2_validation_result = validAddress(values.address_line_2);\n            if (!address_line_2_validation_result.is_ok) {\n                errors.address_line_2 = address_line_2_validation_result.message;\n            }\n\n            const validation_letter_symbol_message = localize(\n                'Only letters, space, hyphen, period, and apostrophe are allowed.'\n            );\n\n            if (values.address_city && !validLetterSymbol(values.address_city)) {\n                errors.address_city = validation_letter_symbol_message;\n            }\n\n            if (values.address_state && !validLetterSymbol(values.address_state) && states_list?.length < 1) {\n                errors.address_state = validation_letter_symbol_message;\n            }\n\n            if (values.address_postcode) {\n                if (!validLength(values.address_postcode, { min: 0, max: 20 })) {\n                    errors.address_postcode = localize(\n                        'Please enter a {{field_name}} under {{max_number}} characters.',\n                        {\n                            field_name: localize('Postal/ZIP code'),\n                            max_number: 20,\n                            interpolation: { escapeValue: false },\n                        }\n                    );\n                } else if (!validPostCode(values.address_postcode)) {\n                    errors.address_postcode = localize('Only letters, numbers, space, and hyphen are allowed.');\n                }\n            }\n\n            return errors;\n        };\n\n        const showForm = (should_show_form: boolean) => {\n            setFormState({ ...form_state, ...{ should_show_form } });\n        };\n\n        const onSubmitValues = async (\n            values: TFormInitialValues,\n            { setStatus, setSubmitting }: FormikHelpers<TFormInitialValues>\n        ) => {\n            setStatus({ msg: '' });\n            setFormState({ ...form_state, ...{ is_btn_loading: true } });\n            const settings_values = { ...values };\n            if (values.address_state && states_list.length) {\n                settings_values.address_state = getLocation(states_list, values.address_state, 'value') || '';\n            }\n\n            const data = await WS.setSettings(settings_values);\n\n            if (data.error) {\n                setStatus({ msg: data.error.message });\n                setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                setSubmitting(false);\n                return;\n            }\n\n            const get_settings_response = await WS.authorized.storage.getSettings();\n\n            if (get_settings_response.error) {\n                setAPIInitialLoadError(get_settings_response.error.message);\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = get_settings_response.get_settings;\n            const { address_line_1, address_line_2, address_city, address_state, address_postcode } = get_settings;\n\n            setFormValues({\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n            });\n\n            // upload files\n            try {\n                const api_response = await upload(document_files);\n                if (api_response?.warning) {\n                    setStatus({ msg: api_response?.message });\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                    return;\n                }\n\n                const get_account_status_response = await WS.authorized.getAccountStatus();\n\n                if (get_account_status_response.error) {\n                    setAPIInitialLoadError(get_account_status_response.error.message);\n                    setSubmitting(false);\n                    return;\n                }\n                const get_account_status = get_account_status_response.get_account_status;\n\n                setFormState({\n                    ...form_state,\n                    ...{ is_submit_success: true, is_btn_loading: false },\n                });\n\n                const { needs_verification } = get_account_status.authentication;\n                const needs_poi = Boolean(needs_verification.length) && needs_verification.includes('identity');\n                onSubmit?.(needs_poi);\n\n                ['authenticate', 'needs_poa', 'poa_expired'].forEach(key => {\n                    removeNotificationMessage({ key });\n                    removeNotificationByKey({ key });\n                });\n\n                if (needs_poi) {\n                    addNotificationByKey('needs_poi');\n                }\n            } catch (error) {\n                if (isServerError(error)) {\n                    setStatus({ msg: error.message });\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                }\n            } finally {\n                setSubmitting(false);\n                setFormState({ ...form_state, ...{ is_btn_loading: false } });\n            }\n            if (is_for_cfd_modal && typeof step_index !== 'undefined') {\n                onSubmitForCFDModal?.(step_index, values);\n            }\n        };\n\n        const { address_line_1, address_line_2, address_city, address_state, address_postcode } = form_values;\n\n        const form_initial_values = {\n            address_line_1,\n            address_line_2,\n            address_city,\n            address_state,\n            address_postcode,\n        };\n\n        if (api_initial_load_error) return <LoadErrorMessage error_message={api_initial_load_error} />;\n        if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n\n        if (form_initial_values.address_state) {\n            const current_value = getLocation(states_list, form_initial_values.address_state, 'text');\n            form_initial_values.address_state =\n                states_list.length && current_value ? current_value : form_initial_values.address_state;\n        } else {\n            form_initial_values.address_state = '';\n        }\n        const setOffset = (status: { msg: string }) => {\n            const mobile_scroll_offset = status?.msg ? '200px' : '154px';\n            return is_mobile && !is_for_cfd_modal ? mobile_scroll_offset : '80px';\n        };\n\n        return (\n            <Formik\n                initialValues={form_initial_values}\n                onSubmit={onSubmitValues}\n                validate={validateFields}\n                enableReinitialize\n            >\n                {({ status, handleSubmit, isSubmitting, isValid }) => (\n                    <>\n                        <LeaveConfirm onDirty={is_mobile ? showForm : undefined} />\n                        {form_state.should_show_form && (\n                            <form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                                <ThemedScrollbars\n                                    height='572px'\n                                    is_bypassed={!is_for_cfd_modal || is_mobile}\n                                    className={className}\n                                >\n                                    <FormBody scroll_offset={setOffset(status)}>\n                                        {status?.msg && (\n                                            <HintBox\n                                                className='account-form_poa-submit-error'\n                                                icon='IcAlertDanger'\n                                                message={\n                                                    <Text as='p' size={is_mobile ? 'xxxs' : 'xs'}>\n                                                        {status.msg}\n                                                    </Text>\n                                                }\n                                                is_danger\n                                            />\n                                        )}\n                                        {is_resubmit && (\n                                            <Text size={is_mobile ? 'xxs' : 'xs'} align='left' color='loss-danger'>\n                                                <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                            </Text>\n                                        )}\n                                        <FormSubHeader title={localize('Address')} title_text_size='s' />\n                                        <PersonalDetailsForm\n                                            is_qualified_for_poa\n                                            editable_fields={changeable_fields}\n                                            states_list={states_list}\n                                        />\n                                        <FormSubHeader title={localize('Document submission')} title_text_size='s' />\n                                        <FormBodySection>\n                                            <FileUploaderContainer\n                                                onFileDrop={files => {\n                                                    setDocumentFiles(files);\n                                                }}\n                                                onError={setFileSelectionError}\n                                                files_description={\n                                                    <FilesDescription\n                                                        title={poa_uploader_files_descriptions.title}\n                                                        descriptions={poa_uploader_files_descriptions.descriptions}\n                                                    />\n                                                }\n                                                examples={<CommonMistakeExamples />}\n                                            />\n                                        </FormBodySection>\n                                    </FormBody>\n                                </ThemedScrollbars>\n                                {is_for_cfd_modal ? (\n                                    <Modal.Footer has_separator>\n                                        <FormSubmitButton\n                                            is_disabled={\n                                                isSubmitting ||\n                                                !isValid ||\n                                                (document_files && document_files.length < 1) ||\n                                                !!file_selection_error\n                                            }\n                                            label={localize('Continue')}\n                                            is_absolute={is_mobile}\n                                            is_loading={isSubmitting}\n                                            form_error={status?.msg}\n                                        />\n                                    </Modal.Footer>\n                                ) : (\n                                    <FormFooter className='account-form__footer-poa'>\n                                        <Button\n                                            className='account-form__footer-btn'\n                                            type='submit'\n                                            is_disabled={\n                                                isSubmitting ||\n                                                !isValid ||\n                                                (document_files && document_files.length < 1) ||\n                                                !!file_selection_error\n                                            }\n                                            has_effect\n                                            is_loading={form_state.is_btn_loading}\n                                            is_submit_success={form_state.is_submit_success}\n                                            text={localize('Save and submit')}\n                                            primary\n                                        />\n                                    </FormFooter>\n                                )}\n                            </form>\n                        )}\n                    </>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default ProofOfAddressForm;\n","import React from 'react';\nimport { AccountStatusResponse, GetAccountStatus } from '@deriv/api-types';\nimport { Button, Loading } from '@deriv/components';\nimport { WS, getPlatformRedirect, platforms, AUTH_STATUS_CODES } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport Expired from '../../../Components/poa/status/expired';\nimport NeedsReview from '../../../Components/poa/status/needs-review';\nimport NotRequired from '../../../Components/poa/status/not-required';\nimport ProofOfAddressForm from './proof-of-address-form';\nimport Submitted from '../../../Components/poa/status/submitted';\nimport Unverified from '../../../Components/poa/status/unverified';\nimport Verified from '../../../Components/poa/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification.js';\n\ntype TProofOfAddressContainer = {\n    onSubmit: () => void;\n};\n\ntype TAuthenticationStatus = Record<\n    | 'allow_document_upload'\n    | 'allow_poi_resubmission'\n    | 'allow_poa_resubmission'\n    | 'is_age_verified'\n    | 'has_poi'\n    | 'has_submitted_poa'\n    | 'needs_poa'\n    | 'needs_poi'\n    | 'poa_address_mismatch'\n    | 'resubmit_poa',\n    boolean\n> & { document_status?: DeepRequired<GetAccountStatus>['authentication']['document']['status'] };\n\nconst ProofOfAddressContainer = observer(({ onSubmit }: TProofOfAddressContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [authentication_status, setAuthenticationStatus] = React.useState<TAuthenticationStatus>({\n        allow_document_upload: false,\n        allow_poi_resubmission: false,\n        allow_poa_resubmission: false,\n        needs_poi: false,\n        needs_poa: false,\n        has_poi: false,\n        resubmit_poa: false,\n        has_submitted_poa: false,\n        document_status: undefined,\n        is_age_verified: false,\n        poa_address_mismatch: false,\n    });\n\n    const { client, notifications, common, ui } = useStore();\n    const { app_routing_history } = common;\n    const { landing_company_shortcode, has_restricted_mt5_account, is_switching } = client;\n    const { is_verification_modal_visible } = ui;\n    const { refreshNotifications } = notifications;\n\n    const is_mx_mlt = landing_company_shortcode === 'iom' || landing_company_shortcode === 'malta';\n\n    React.useEffect(() => {\n        if (!is_switching) {\n            WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n                const { get_account_status } = response;\n                if (get_account_status) {\n                    const {\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                    } = populateVerificationStatus(get_account_status);\n\n                    setAuthenticationStatus(authentication_status => ({\n                        ...authentication_status,\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                    }));\n                    setIsLoading(false);\n                    refreshNotifications();\n                }\n            });\n        }\n    }, [is_switching, refreshNotifications]);\n\n    const handleResubmit = () => {\n        setAuthenticationStatus(authentication_status => ({ ...authentication_status, ...{ resubmit_poa: true } }));\n    };\n\n    const onSubmitDocument = (needs_poi: boolean) => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ has_submitted_poa: true, needs_poi },\n        }));\n        if (is_verification_modal_visible) {\n            onSubmit();\n        }\n    };\n\n    const {\n        allow_document_upload,\n        allow_poa_resubmission,\n        document_status,\n        needs_poi,\n        resubmit_poa,\n        has_submitted_poa,\n        is_age_verified,\n        poa_address_mismatch,\n    } = authentication_status;\n\n    const from_platform = getPlatformRedirect(app_routing_history);\n\n    const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref ?? '');\n\n    const redirect_button = should_show_redirect_btn && (\n        <Button\n            primary\n            className='proof-of-identity__redirect'\n            onClick={() => {\n                const url = platforms[from_platform.ref as keyof typeof platforms]?.url;\n                if (url) {\n                    window.location.href = url;\n                    window.sessionStorage.removeItem('config.platform');\n                }\n            }}\n        >\n            <Localize i18n_default_text='Back to {{platform_name}}' values={{ platform_name: from_platform.name }} />\n        </Button>\n    );\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (\n        !allow_document_upload ||\n        (!is_age_verified && !allow_poa_resubmission && document_status === 'none' && is_mx_mlt)\n    )\n        return <NotRequired />;\n    if (has_submitted_poa && !poa_address_mismatch)\n        return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n    if (\n        resubmit_poa ||\n        allow_poa_resubmission ||\n        (has_restricted_mt5_account &&\n            document_status &&\n            ['expired', 'rejected', 'suspected'].includes(document_status)) ||\n        poa_address_mismatch\n    ) {\n        return <ProofOfAddressForm is_resubmit onSubmit={onSubmitDocument} />;\n    }\n\n    switch (document_status) {\n        case AUTH_STATUS_CODES.NONE:\n            return <ProofOfAddressForm onSubmit={onSubmitDocument} />;\n        case AUTH_STATUS_CODES.PENDING:\n            return <NeedsReview needs_poi={needs_poi} redirect_button={redirect_button} />;\n        case AUTH_STATUS_CODES.VERIFIED:\n            return <Verified needs_poi={needs_poi} redirect_button={redirect_button} />;\n        case AUTH_STATUS_CODES.EXPIRED:\n            return <Expired onClick={handleResubmit} />;\n        case AUTH_STATUS_CODES.REJECTED:\n        case AUTH_STATUS_CODES.SUSPECTED:\n            return <Unverified onClick={handleResubmit} />;\n        default:\n            return null;\n    }\n});\n\nexport default ProofOfAddressContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { HintBox, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TOnfidoSdkView = {\n    is_onfido_disabled: boolean;\n    is_onfido_container_hidden?: boolean;\n    onfido_element_id?: string;\n    is_confirmed: boolean;\n    data_testid?: string;\n    is_onfido_initialized?: boolean;\n};\n\nconst OnfidoSdkView = ({\n    is_onfido_disabled,\n    is_onfido_container_hidden,\n    onfido_element_id = 'onfido',\n    is_confirmed,\n    data_testid,\n    is_onfido_initialized,\n}: TOnfidoSdkView) => {\n    const [is_status_message_visible, setIsStatusMessageVisible] = React.useState(false);\n    const transition_in_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n    const transition_out_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n\n    React.useEffect(() => {\n        const onConfirm = () => {\n            transition_in_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(true);\n            }, 800);\n            transition_out_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(false);\n                // the requirement is to hide the message after 5 sec, 4650 here + 350 in CSSTransition to make it smoother\n            }, 4650);\n        };\n\n        if (is_confirmed) {\n            onConfirm();\n        }\n    }, [is_confirmed]);\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(transition_in_timeout_ref.current);\n            clearTimeout(transition_out_timeout_ref.current);\n        };\n    }, []);\n\n    return (\n        <div className='onfido-container-view_wrapper'>\n            <div className={classNames({ 'onfido-container__status-message_container': !is_onfido_disabled })}>\n                <CSSTransition\n                    appear={is_status_message_visible}\n                    in={is_status_message_visible}\n                    timeout={{\n                        exit: 350,\n                    }}\n                    classNames={{\n                        exit: 'onfido-container__status-message--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <HintBox\n                        className='onfido-container__status-message'\n                        icon='IcAlertAnnounce'\n                        message={\n                            <Text as='p' size='xxxs'>\n                                <Localize i18n_default_text='Your personal details have been saved successfully.' />\n                            </Text>\n                        }\n                        is_info\n                    />\n                </CSSTransition>\n            </div>\n            <section>\n                {is_onfido_disabled && is_onfido_initialized && (\n                    <div className='onfido-container__info-message'>\n                        <HintBox\n                            icon='IcInfoBlue'\n                            message={\n                                <Text as='p' size='xxxs'>\n                                    <Localize i18n_default_text='Hit the checkbox above to choose your document.' />\n                                </Text>\n                            }\n                            is_info\n                        />\n                    </div>\n                )}\n                <div\n                    data-testid={data_testid}\n                    id={onfido_element_id}\n                    className={classNames({\n                        'onfido-container__disabled': is_onfido_disabled,\n                        'onfido-container__hidden': is_onfido_container_hidden,\n                    })}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default OnfidoSdkView;\n","import React, { useCallback } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useSettings } from '@deriv/api';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { useNotificationEvent, useServiceToken } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport ErrorMessage from '../../../Components/error-component';\nimport MissingPersonalDetails from '../../../Components/poi/missing-personal-details';\nimport PoiConfirmWithExampleFormContainer from '../../../Components/poi/poi-confirm-with-example-form-container';\nimport OnfidoSdkView from './onfido-sdk-view';\nimport type { SdkHandle, SdkResponse, SupportedLanguages } from '../../../Types';\nimport { convertAlpha2toAlpha3, convertAlpha3toAlpha2, getOnfidoSupportedLocaleCode } from '../../../Helpers/utils';\n\ntype TAPIError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TOnfidoSdkViewContainer = {\n    country_code: string;\n    documents_supported:\n        | string[]\n        | DeepRequired<ResidenceList>[0]['identity']['services']['onfido']['documents_supported'];\n    getChangeableFields: () => string[];\n    handleViewComplete: () => void;\n    height?: number | string;\n    is_default_enabled?: boolean;\n};\n\nconst OnfidoSdkViewContainer = observer(\n    ({\n        country_code,\n        documents_supported,\n        getChangeableFields,\n        handleViewComplete,\n        height,\n        is_default_enabled,\n    }: TOnfidoSdkViewContainer) => {\n        const [api_error, setAPIError] = React.useState<string>();\n        const [missing_personal_details, setMissingPersonalDetails] = React.useState('');\n        const [is_onfido_disabled, setIsOnfidoDisabled] = React.useState(true);\n        const [is_confirmed, setIsConfirmed] = React.useState(false);\n        const [is_onfido_initialized, setIsOnfidoInitialized] = React.useState(false);\n\n        const { data: account_settings } = useSettings();\n\n        const { send, isSuccess: isNotified } = useNotificationEvent();\n        const { common, ui } = useStore();\n        const { current_language } = common;\n        const { is_mobile } = ui;\n\n        // IDV country code - Alpha ISO2. Onfido country code - Alpha ISO3\n        const onfido_country_code = convertAlpha2toAlpha3(country_code);\n\n        // Service Token country code - Alpha ISO2\n        const token_country_code = convertAlpha3toAlpha2(country_code);\n\n        const { service_token, isSuccess, isError, error, isLoading } = useServiceToken({\n            service: 'onfido',\n            country: token_country_code,\n        });\n\n        const onfido_init = React.useRef<SdkHandle>();\n\n        // Onfido `document_supported` checks are made for an array of string.\n        // Ensure that `document_supported` passed respects this no the matter source.\n        const onfido_documents = Array.isArray(documents_supported)\n            ? documents_supported\n            : Object.keys(documents_supported).map(d => documents_supported[d].display_name);\n\n        let component_to_load: React.ReactNode;\n\n        const onComplete = React.useCallback(\n            (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n                onfido_init?.current?.tearDown();\n                const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id);\n                if (document_ids?.length) {\n                    send({\n                        category: 'authentication',\n                        event: 'poi_documents_uploaded',\n                        args: {\n                            documents: document_ids as Array<string>,\n                        },\n                    });\n                }\n            },\n            [send]\n        );\n\n        const initOnfido = React.useCallback(\n            async (service_token: string) => {\n                if (!service_token) return;\n                try {\n                    onfido_init.current = await window.Onfido.init({\n                        containerId: 'onfido',\n                        language: getOnfidoSupportedLocaleCode(current_language) as SupportedLanguages,\n                        token: service_token,\n                        useModal: false,\n                        useMemoryHistory: true,\n                        onComplete,\n                        steps: [\n                            {\n                                type: 'document',\n                                options: {\n                                    documentTypes: {\n                                        passport: onfido_documents.some(doc => /Passport/g.test(doc)),\n                                        driving_licence: onfido_documents.some(doc => /Driving Licence/g.test(doc))\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                        national_identity_card: onfido_documents.some(doc =>\n                                            /National Identity Card/g.test(doc)\n                                        )\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                    },\n                                    hideCountrySelection: true,\n                                },\n                            },\n                            'face',\n                        ],\n                    });\n                    setIsOnfidoInitialized(true);\n                } catch (err) {\n                    setAPIError(err?.message ?? err);\n                    setIsOnfidoDisabled(true);\n                    onfido_init.current = undefined;\n                }\n            },\n            [onComplete, onfido_documents, onfido_country_code, current_language]\n        );\n\n        const handleError = (error: TAPIError) => {\n            switch (error.code) {\n                case 'MissingPersonalDetails':\n                    setMissingPersonalDetails('all');\n                    break;\n                case 'InvalidPostalCode':\n                    setMissingPersonalDetails('postal_code');\n                    break;\n                default:\n                    setAPIError(error.message);\n                    break;\n            }\n        };\n\n        const onConfirm = useCallback(() => {\n            setIsConfirmed(true);\n            setIsOnfidoDisabled(false);\n        }, []);\n\n        React.useEffect(() => {\n            if (isSuccess && service_token?.onfido?.token) {\n                initOnfido(service_token?.onfido?.token);\n            } else if (isError) {\n                handleError(error as TAPIError);\n            }\n        }, [error, initOnfido, isError, isSuccess, service_token?.onfido?.token]);\n\n        React.useEffect(() => {\n            /**\n             * Enables onfido sdk\n             * Pass is_default_enabled to enable onfido immediately if personal detail component is not required\n             * so no user prompt will be there so submit the details in i.e. in case of flow for nigerian clients ATM\n             */\n            if (is_default_enabled) {\n                setIsOnfidoDisabled(false);\n            }\n        }, [is_default_enabled]);\n\n        React.useEffect(() => {\n            /**\n             * Handles cleanup operations when document submission is completed\n             */\n            if (isNotified) {\n                handleViewComplete();\n            }\n        }, [handleViewComplete, isNotified]);\n\n        if (isLoading) {\n            component_to_load = <Loading is_fullscreen={false} />;\n        } else if (missing_personal_details) {\n            component_to_load = (\n                <MissingPersonalDetails\n                    has_invalid_postal_code={missing_personal_details === 'postal_code'}\n                    from='proof_of_identity'\n                />\n            );\n        } else if (api_error) {\n            // Error message will only display if retry count exceeds 3\n            component_to_load = <ErrorMessage message={api_error} />;\n        }\n\n        return (\n            <ThemedScrollbars is_bypassed={is_mobile} height={height}>\n                <div className='onfido-container'>\n                    {component_to_load || (\n                        <CSSTransition\n                            appear={is_onfido_disabled}\n                            in={is_onfido_disabled}\n                            timeout={{\n                                exit: 350,\n                            }}\n                            classNames={{\n                                exit: 'account-form__poi-confirm-example_wrapper--exit',\n                            }}\n                            unmountOnExit\n                        >\n                            <div className='account-form__poi-confirm-example_wrapper account-form__poi-confirm-example_container'>\n                                <PoiConfirmWithExampleFormContainer\n                                    account_settings={account_settings}\n                                    getChangeableFields={getChangeableFields}\n                                    onFormConfirm={onConfirm}\n                                />\n                            </div>\n                        </CSSTransition>\n                    )}\n                    <OnfidoSdkView\n                        is_onfido_disabled={is_onfido_disabled}\n                        is_confirmed={is_confirmed}\n                        is_onfido_container_hidden={!!component_to_load}\n                        is_onfido_initialized={is_onfido_initialized}\n                    />\n                </div>\n            </ThemedScrollbars>\n        );\n    }\n);\n\nOnfidoSdkViewContainer.displayName = 'OnfidoSdkViewContainer';\n\nexport default OnfidoSdkViewContainer;\n","import React from 'react';\nimport { formatIDVError } from '@deriv/shared';\nimport IdvLimited from '../../../Components/poi/idv-status/idv-limited';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport IdvVerified from '../../../Components/poi/idv-status/idv-verified';\nimport { identity_status_codes } from './proof-of-identity-utils';\n\nconst Idv = ({ handleRequireSubmission, idv, is_from_external, needs_poa, redirect_button }) => {\n    const { status, submissions_left, last_rejected } = idv;\n\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <IdvSubmitComplete\n                    is_from_external={is_from_external}\n                    mismatch_status={formatIDVError(last_rejected, status)}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired:\n            if (Number(submissions_left) < 1) return <IdvLimited handleRequireSubmission={handleRequireSubmission} />;\n            return null;\n        case identity_status_codes.verified:\n            return (\n                <IdvVerified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Idv;\n","import React from 'react';\nimport { formatOnfidoError } from '@deriv/shared';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport RejectedReasons from '../../../Components/poi/status/rejected-reasons';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport { identity_status_codes } from './proof-of-identity-utils';\n\nconst Onfido = ({\n    handleRequireSubmission,\n    is_from_external,\n    needs_poa,\n    onfido,\n    redirect_button,\n    manual,\n    setIsCfdPoiCompleted,\n    country_code,\n    handleViewComplete,\n}) => {\n    const { status, submissions_left, last_rejected: rejected_reasons } = onfido;\n\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <UploadComplete\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired: {\n            const submission_errors = formatOnfidoError(status, rejected_reasons);\n            if (Number(submissions_left) < 1) {\n                return (\n                    <Unsupported\n                        manual={manual}\n                        is_from_external={is_from_external}\n                        setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                        country_code={country_code}\n                        handleViewComplete={handleViewComplete}\n                        onfido={onfido}\n                    />\n                );\n            }\n            return (\n                <RejectedReasons\n                    rejected_reasons={submission_errors}\n                    handleRequireSubmission={handleRequireSubmission}\n                />\n            );\n        }\n        case identity_status_codes.verified:\n            return (\n                <Verified is_from_external={is_from_external} needs_poa={needs_poa} redirect_button={redirect_button} />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Onfido;\n","import React from 'react';\nimport { formatIDVError, WS, IDV_ERROR_STATUS, POIContext } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CountrySelector from '../../../Components/poi/poi-country-selector';\nimport IdvDocumentSubmit from '../../../Components/poi/idv-document-submit';\nimport IdvFailed from '../../../Components/poi/idv-status/idv-failed';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport OnfidoSdkViewContainer from './onfido-sdk-view-container';\nimport { identity_status_codes, submission_status_code, service_code } from './proof-of-identity-utils';\n\nconst POISubmission = observer(\n    ({\n        allow_poi_resubmission,\n        has_require_submission,\n        height,\n        identity_last_attempt,\n        idv,\n        is_from_external,\n        is_idv_disallowed,\n        needs_poa,\n        onfido,\n        onStateChange,\n        redirect_button,\n        residence_list,\n        setIsCfdPoiCompleted,\n        should_show_mismatch_form,\n    }) => {\n        const {\n            submission_service,\n            setSubmissionService,\n            submission_status,\n            setSubmissionStatus,\n            selected_country,\n            setSelectedCountry,\n        } = React.useContext(POIContext);\n\n        const { client, notifications } = useStore();\n\n        const { account_settings, getChangeableFields, account_status } = client;\n        const { refreshNotifications } = notifications;\n        const is_high_risk = account_status.risk_classification === 'high';\n\n        const handleSelectionNext = () => {\n            if (Object.keys(selected_country).length) {\n                const { submissions_left: idv_submissions_left } = idv;\n                const { submissions_left: onfido_submissions_left } = onfido;\n                const is_idv_supported = selected_country.identity.services.idv.is_country_supported;\n                const is_onfido_supported =\n                    selected_country.identity.services.onfido.is_country_supported && selected_country.value !== 'ng';\n\n                if (is_idv_supported && Number(idv_submissions_left) > 0 && !is_idv_disallowed) {\n                    setSubmissionService(service_code.idv);\n                } else if (Number(onfido_submissions_left) > 0 && is_onfido_supported) {\n                    setSubmissionService(service_code.onfido);\n                } else {\n                    setSubmissionService(service_code.manual);\n                }\n                setSubmissionStatus(submission_status_code.submitting);\n            }\n        };\n\n        const handleViewComplete = () => {\n            if (onStateChange && typeof onStateChange === 'function') {\n                onStateChange(identity_status_codes.pending);\n            }\n            setSubmissionStatus(submission_status_code.complete);\n\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const handleBack = () => setSubmissionStatus(submission_status_code.selecting);\n\n        const getCountryFromResidence = React.useCallback(\n            country_code => residence_list.find(residence => residence.value === country_code),\n            [residence_list]\n        );\n\n        const needs_resubmission = has_require_submission || allow_poi_resubmission;\n\n        const mismatch_status = formatIDVError(idv.last_rejected, idv.status, is_high_risk);\n\n        const setIdentityService = React.useCallback(\n            identity_last_attempt => {\n                const { service, country_code } = identity_last_attempt;\n                setSelectedCountry(getCountryFromResidence(country_code));\n                switch (service) {\n                    case service_code.idv:\n                    case service_code.onfido: {\n                        if (Number(idv.submissions_left) > 0 || Number(onfido.submissions_left) > 0) {\n                            setSubmissionStatus(submission_status_code.selecting);\n                        } else {\n                            setSubmissionService(service_code.manual);\n                            setSubmissionStatus(submission_status_code.submitting);\n                        }\n                        break;\n                    }\n                    case service_code.manual: {\n                        setSubmissionService(service_code.manual);\n                        setSubmissionStatus(submission_status_code.submitting);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            },\n            [\n                getCountryFromResidence,\n                idv.submissions_left,\n                onfido.submissions_left,\n                setSelectedCountry,\n                setSubmissionService,\n                setSubmissionStatus,\n                is_idv_disallowed,\n            ]\n        );\n\n        React.useEffect(() => {\n            if (submission_status != submission_status_code.selecting) {\n                return;\n            }\n            if (needs_resubmission && identity_last_attempt) {\n                setIdentityService(identity_last_attempt);\n            } else if (\n                mismatch_status &&\n                [\n                    IDV_ERROR_STATUS.DobMismatch.code,\n                    IDV_ERROR_STATUS.NameMismatch.code,\n                    IDV_ERROR_STATUS.NameDobMismatch.code,\n                ].includes(mismatch_status) &&\n                idv.submissions_left > 0\n            ) {\n                setSubmissionService(service_code.idv);\n                setSubmissionStatus(submission_status_code.submitting);\n            } else {\n                setSubmissionStatus(submission_status_code.selecting);\n            }\n        }, [\n            allow_poi_resubmission,\n            identity_last_attempt,\n            needs_resubmission,\n            setIdentityService,\n            submission_status,\n            idv,\n            mismatch_status,\n            setSubmissionService,\n            setSubmissionStatus,\n        ]);\n\n        switch (submission_status) {\n            case submission_status_code.selecting: {\n                return (\n                    <CountrySelector\n                        handleSelectionNext={handleSelectionNext}\n                        is_from_external={is_from_external}\n                        mismatch_status={mismatch_status}\n                    />\n                );\n            }\n\n            case submission_status_code.submitting: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return should_show_mismatch_form ? (\n                            <IdvFailed\n                                account_settings={account_settings}\n                                getChangeableFields={getChangeableFields}\n                                mismatch_status={mismatch_status}\n                                residence_list={residence_list}\n                                handleSubmit={handleViewComplete}\n                                latest_status={identity_last_attempt}\n                                selected_country={selected_country}\n                            />\n                        ) : (\n                            <IdvDocumentSubmit\n                                handleViewComplete={handleViewComplete}\n                                handleBack={handleBack}\n                                selected_country={selected_country}\n                            />\n                        );\n                    case service_code.onfido: {\n                        const country_code = selected_country.value;\n                        const doc_obj = selected_country.identity.services.onfido.documents_supported;\n                        const documents_supported = Object.keys(doc_obj).map(d => doc_obj[d].display_name);\n                        return (\n                            <OnfidoSdkViewContainer\n                                country_code={country_code}\n                                documents_supported={documents_supported}\n                                getChangeableFields={getChangeableFields}\n                                handleViewComplete={handleViewComplete}\n                                height={height}\n                            />\n                        );\n                    }\n                    case service_code.manual:\n                        return (\n                            <Unsupported\n                                country_code={selected_country.value}\n                                is_from_external={is_from_external}\n                                setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                                allow_poi_resubmission={allow_poi_resubmission}\n                                handleViewComplete={handleViewComplete}\n                                onfido={onfido}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            case submission_status_code.complete: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return (\n                            <IdvSubmitComplete\n                                is_from_external={is_from_external}\n                                mismatch_status={mismatch_status}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    // This will be replaced in the next Manual Upload Project\n                    case service_code.manual:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                                is_manual_upload\n                            />\n                        );\n                    case service_code.onfido:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            default:\n                return null;\n        }\n    }\n);\n\nexport default POISubmission;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Loading } from '@deriv/components';\nimport { isEmptyObject, WS, getPlatformRedirect, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\nimport DemoMessage from '../../../Components/demo-message';\nimport ErrorMessage from '../../../Components/error-component';\nimport Expired from '../../../Components/poi/status/expired';\nimport IdvContainer from './idv.jsx';\nimport Limited from '../../../Components/poi/status/limited';\nimport { Localize } from '@deriv/translations';\nimport NotRequired from '../../../Components/poi/status/not-required';\nimport Onfido from './onfido.jsx';\nimport POISubmission from './proof-of-identity-submission.jsx';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification';\n\nconst ProofOfIdentityContainer = observer(\n    ({ height, is_from_external, onStateChange, setIsCfdPoiCompleted, getChangeableFields, updateAccountStatus }) => {\n        const history = useHistory();\n        const [api_error, setAPIError] = React.useState();\n        const [has_require_submission, setHasRequireSubmission] = React.useState(false);\n        const [residence_list, setResidenceList] = React.useState([]);\n        const [is_status_loading, setStatusLoading] = React.useState(true);\n\n        const { client, common, notifications } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            fetchResidenceList,\n            is_switching,\n            is_high_risk,\n            is_withdrawal_lock,\n            should_allow_authentication,\n            is_virtual,\n        } = client;\n        const { app_routing_history, routeBackInApp, is_language_changing } = common;\n        const { refreshNotifications } = notifications;\n\n        const from_platform = getPlatformRedirect(app_routing_history);\n\n        const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref);\n\n        const routeBackTo = redirect_route => routeBackInApp(history, [redirect_route]);\n        const handleRequireSubmission = () => setHasRequireSubmission(true);\n        const country_code = account_settings?.citizen || account_settings?.country_code;\n\n        const handleManualSubmit = () => {\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const loadResidenceList = React.useCallback(() => {\n            fetchResidenceList().then(response_residence_list => {\n                if (response_residence_list.error) {\n                    setAPIError(response_residence_list.error);\n                } else {\n                    setResidenceList(response_residence_list.residence_list);\n                }\n            });\n        }, [fetchResidenceList]);\n\n        React.useEffect(() => {\n            if (is_language_changing) {\n                loadResidenceList();\n            }\n        }, [is_language_changing, loadResidenceList]);\n\n        React.useEffect(() => {\n            // only re-mount logic when switching is done\n            if (!is_switching) {\n                setAPIError(null);\n                WS.authorized.getAccountStatus().then(response_account_status => {\n                    if (response_account_status.error) {\n                        setAPIError(response_account_status.error);\n                        setStatusLoading(false);\n                        return;\n                    }\n                    loadResidenceList();\n                    setStatusLoading(false);\n                });\n            }\n        }, [loadResidenceList, is_switching]);\n\n        if (api_error) {\n            return <ErrorMessage error_message={api_error?.message || api_error} />;\n        } else if (is_status_loading || is_switching || isEmptyObject(account_status) || residence_list.length === 0) {\n            /**\n             * Display loader while waiting for the account status and residence list to be populated\n             */\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <DemoMessage />;\n        }\n\n        const verification_status = populateVerificationStatus(account_status);\n        const {\n            idv,\n            allow_poi_resubmission,\n            identity_last_attempt,\n            identity_status,\n            is_age_verified,\n            is_idv_disallowed,\n            manual,\n            needs_poa,\n            onfido,\n        } = verification_status;\n        const should_ignore_idv = is_high_risk && is_withdrawal_lock;\n\n        if (!should_allow_authentication && !is_age_verified) {\n            return <NotRequired />;\n        }\n\n        const onClickRedirectButton = () => {\n            const platform = platforms[from_platform.ref];\n            const { is_hard_redirect = false, url = '' } = platform ?? {};\n            if (is_hard_redirect) {\n                window.location.href = url;\n                window.sessionStorage.removeItem('config.platform');\n            } else {\n                routeBackTo(from_platform.route);\n            }\n        };\n\n        const redirect_button = should_show_redirect_btn && (\n            <Button primary className='proof-of-identity__redirect' onClick={onClickRedirectButton}>\n                <Localize\n                    i18n_default_text='Back to {{platform_name}}'\n                    values={{ platform_name: from_platform.name }}\n                />\n            </Button>\n        );\n\n        const should_show_mismatch_form =\n            idv.submissions_left > 0 &&\n            [identity_status_codes.rejected, identity_status_codes.suspected, identity_status_codes.expired].includes(\n                idv.status\n            );\n        if (\n            identity_status === identity_status_codes.none ||\n            has_require_submission ||\n            allow_poi_resubmission ||\n            should_show_mismatch_form\n        ) {\n            return (\n                <POISubmission\n                    account_settings={account_settings}\n                    allow_poi_resubmission={allow_poi_resubmission}\n                    has_require_submission={has_require_submission}\n                    height={height ?? null}\n                    getChangeableFields={getChangeableFields}\n                    identity_last_attempt={identity_last_attempt}\n                    idv={idv}\n                    is_from_external={!!is_from_external}\n                    is_idv_disallowed={is_idv_disallowed || should_ignore_idv}\n                    manual={manual}\n                    needs_poa={needs_poa}\n                    onfido={onfido}\n                    onStateChange={onStateChange}\n                    redirect_button={redirect_button}\n                    refreshNotifications={refreshNotifications}\n                    residence_list={residence_list}\n                    setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                    updateAccountStatus={updateAccountStatus}\n                    should_show_mismatch_form={should_show_mismatch_form}\n                />\n            );\n        } else if (\n            !identity_last_attempt ||\n            // Prioritise verified status from back office. How we know this is if there is mismatch between current statuses (Should be refactored)\n            (identity_status === identity_status_codes.verified && identity_status !== identity_last_attempt.status)\n        ) {\n            switch (identity_status) {\n                case identity_status_codes.pending:\n                    return (\n                        <UploadComplete\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            is_manual_upload={manual?.status === 'pending'}\n                        />\n                    );\n                case identity_status_codes.verified:\n                    return (\n                        <Verified\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                        />\n                    );\n                case identity_status_codes.expired:\n                    return (\n                        <Expired\n                            is_from_external={!!is_from_external}\n                            redirect_button={redirect_button}\n                            handleRequireSubmission={handleRequireSubmission}\n                        />\n                    );\n                case identity_status_codes.rejected:\n                case identity_status_codes.suspected:\n                    return <Limited handleRequireSubmission={handleRequireSubmission} />;\n                default:\n                    break;\n            }\n        }\n\n        switch (identity_last_attempt.service) {\n            case service_code.idv:\n                return (\n                    <IdvContainer\n                        account_settings={account_settings}\n                        handleRequireSubmission={handleRequireSubmission}\n                        getChangeableFields={getChangeableFields}\n                        idv={idv}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        residence_list={residence_list}\n                    />\n                );\n            case service_code.onfido:\n                return (\n                    <Onfido\n                        handleRequireSubmission={handleRequireSubmission}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        onfido={onfido}\n                        manual={manual}\n                        setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                        redirect_button={redirect_button}\n                        country_code={country_code}\n                        handleViewComplete={handleManualSubmit}\n                    />\n                );\n            case service_code.manual:\n                return (\n                    <Unsupported\n                        manual={manual}\n                        country_code={country_code}\n                        is_from_external={is_from_external}\n                        setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        handleRequireSubmission={handleRequireSubmission}\n                        handleViewComplete={handleManualSubmit}\n                        onfido={onfido}\n                    />\n                );\n            default:\n                return null;\n        }\n    }\n);\n\nexport default ProofOfIdentityContainer;\n","export const identity_status_codes = {\n    none: 'none',\n    pending: 'pending',\n    rejected: 'rejected',\n    verified: 'verified',\n    expired: 'expired',\n    suspected: 'suspected',\n} as const;\n\nexport const submission_status_code = {\n    selecting: 'selecting',\n    submitting: 'submitting',\n    complete: 'complete',\n} as const;\n\nexport const service_code = {\n    idv: 'idv',\n    onfido: 'onfido',\n    manual: 'manual',\n} as const;\n"],"names":["regex","regex_string","value","flags","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","shouldShowIdentityInformation","account_status","citizen","residence_list","real_account_signup_target","country","find","item","maltainvest","identity","authentication","should_skip_idv","status","AUTH_STATUS_CODES","some","Boolean","services","idv","is_country_supported","getDocumentData","country_code","document_type","getIDVDocuments","new_display_name","example_format","preventEmptyClipboardPaste","e","clipboardData","window","getData","length","preventDefault","getRegex","target_regex","output_regex","r","RegExp","generatePlaceholderText","selected_doc","localize","isFieldImmutable","field","includes","makeSettingsRequest","values","changeable_fields","request","filterObjProperties","first_name","trim","last_name","date_of_birth","toMoment","format","validateName","name","validLength","min","max","validName","getExampleFormat","isDocumentTypeValid","text","isAdditionalDocumentValid","additional_document_value","error_message","document_additional_config","test","document_name","display_name","toLowerCase","documentAdditionalError","additional","isDocumentNumberValid","document_number","is_document_number_invalid","id","Localize","i18n_default_text","shouldHideHelperImage","document_id","isServerError","error","convertAlpha2toAlpha3","countries","toUpperCase","convertAlpha3toAlpha2","getOnfidoSupportedLocaleCode","language_code","code","split","LANGUAGE_CODES","getIDVDocumentType","idv_latest_attempt","residence","Object","keys","documents_supported","validate","errors","fn","arr","err_msg","forEach","verifyFields","IDV_ERROR_STATUS","getEmploymentStatusList","populateVerificationStatus","attempts","document","income","needs_verification","identity_status","document_status","income_status","allow_document_upload","allow_poi_resubmission","allow_poa_resubmission","allow_poinc_resubmission","is_age_verified","is_fully_authenticated","is_idv_disallowed","poa_address_mismatch","has_poa","has_poi","has_poinc","has_submitted_poa","needs_poa","needs_poi","needs_poinc","onfido","manual","identity_last_attempt","latest","has_attempted_idv","history","h","service","i","observer","is_resubmit","is_for_cfd_modal","onSubmit","onSubmitForCFDModal","step_index","className","useStore","client","notifications","ui","account_settings","fetchResidenceList","fetchStatesList","getChangeableFields","states_list","addNotificationByKey","addNotificationMessageByKey","removeNotificationMessage","removeNotificationByKey","is_mobile","React","document_files","setDocumentFiles","file_selection_error","setFileSelectionError","is_loading","setIsLoading","address_line_1","address_line_2","address_city","address_state","address_postcode","form_values","setFormValues","api_initial_load_error","setAPIInitialLoadError","is_btn_loading","is_submit_success","should_allow_submit","should_show_form","form_state","setFormState","poa_uploader_files_descriptions","getFileUploaderDescriptions","upload","useFileUploader","then","Promise","all","WS","showForm","onSubmitValues","setStatus","setSubmitting","msg","settings_values","getLocation","data","message","get_settings_response","get_settings","api_response","warning","get_account_status_response","get_account_status","key","form_initial_values","Loading","is_fullscreen","current_value","setOffset","mobile_scroll_offset","Formik","initialValues","entries","validateValues","val","address_line_1_validation_result","validAddress","is_required","is_ok","address_line_2_validation_result","validation_letter_symbol_message","validLetterSymbol","validPostCode","field_name","max_number","interpolation","escapeValue","enableReinitialize","handleSubmit","isSubmitting","isValid","onDirty","undefined","noValidate","ThemedScrollbars","height","is_bypassed","scroll_offset","HintBox","icon","Text","as","size","is_danger","align","color","title","title_text_size","is_qualified_for_poa","editable_fields","onFileDrop","files","onError","files_description","descriptions","examples","Modal","has_separator","FormSubmitButton","is_disabled","label","is_absolute","form_error","Button","type","has_effect","primary","resubmit_poa","authentication_status","setAuthenticationStatus","common","app_routing_history","landing_company_shortcode","has_restricted_mt5_account","is_switching","is_verification_modal_visible","refreshNotifications","is_mx_mlt","response","handleResubmit","onSubmitDocument","from_platform","getPlatformRedirect","redirect_button","platforms","ref","onClick","url","location","href","sessionStorage","removeItem","platform_name","is_onfido_disabled","is_onfido_container_hidden","onfido_element_id","is_confirmed","data_testid","is_onfido_initialized","is_status_message_visible","setIsStatusMessageVisible","transition_in_timeout_ref","transition_out_timeout_ref","current","setTimeout","clearTimeout","classNames","CSSTransition","appear","in","timeout","exit","unmountOnExit","is_info","OnfidoSdkViewContainer","component_to_load","handleViewComplete","is_default_enabled","api_error","setAPIError","missing_personal_details","setMissingPersonalDetails","setIsOnfidoDisabled","setIsConfirmed","setIsOnfidoInitialized","useSettings","useNotificationEvent","send","isNotified","isSuccess","current_language","onfido_country_code","token_country_code","useServiceToken","service_token","isError","isLoading","onfido_init","onfido_documents","Array","isArray","map","d","onComplete","tearDown","document_ids","category","event","args","documents","initOnfido","Onfido","init","containerId","language","token","useModal","useMemoryHistory","steps","options","documentTypes","passport","doc","driving_licence","national_identity_card","hideCountrySelection","onConfirm","useCallback","handleError","has_invalid_postal_code","from","onFormConfirm","displayName","handleRequireSubmission","is_from_external","submissions_left","last_rejected","identity_status_codes","mismatch_status","formatIDVError","Number","setIsCfdPoiCompleted","rejected_reasons","submission_errors","formatOnfidoError","has_require_submission","onStateChange","should_show_mismatch_form","POIContext","submission_service","setSubmissionService","submission_status","setSubmissionStatus","selected_country","setSelectedCountry","is_high_risk","risk_classification","submission_status_code","getCountryFromResidence","needs_resubmission","setIdentityService","service_code","handleSelectionNext","idv_submissions_left","onfido_submissions_left","is_idv_supported","is_onfido_supported","latest_status","handleBack","doc_obj","is_manual_upload","updateAccountStatus","useHistory","setHasRequireSubmission","setResidenceList","is_status_loading","setStatusLoading","is_withdrawal_lock","should_allow_authentication","is_virtual","routeBackInApp","is_language_changing","should_show_redirect_btn","handleManualSubmit","loadResidenceList","response_residence_list","response_account_status","isEmptyObject","verification_status","should_ignore_idv","redirect_route","platform","is_hard_redirect","route","none","pending","rejected","verified","expired","suspected","selecting","submitting","complete"],"sourceRoot":""}