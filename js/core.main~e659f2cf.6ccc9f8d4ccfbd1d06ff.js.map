{"version":3,"file":"js/core.main~e659f2cf.6ccc9f8d4ccfbd1d06ff.js","mappings":"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","sources":["webpack:///../../account/src/Components/address-details/address-details.tsx","webpack:///../../account/src/Components/address-details/index.js","webpack:///../../account/src/Components/currency-selector/ust-popover.tsx","webpack:///../../account/src/Components/currency-selector/radio-button.tsx","webpack:///../../account/src/Components/currency-selector/radio-button-group.tsx","webpack:///../../account/src/Components/currency-selector/currency-selector.tsx","webpack:///../../account/src/Components/currency-selector/index.ts","webpack:///../../account/src/Components/icon-with-message/icon-with-message.tsx","webpack:///../../account/src/Components/icon-with-message/index.ts","webpack:///../../account/src/Components/demo-message/demo-message.tsx","webpack:///../../account/src/Components/demo-message/index.ts","webpack:///../../account/src/Components/error-component/error-component.tsx","webpack:///../../account/src/Components/error-component/index.js","webpack:///../../account/src/Components/file-uploader-container/files-descriptions.tsx","webpack:///../../account/src/Components/file-uploader-container/file-uploader.tsx","webpack:///../../account/src/Components/file-uploader-container/file-uploader-container.tsx","webpack:///../../account/src/Components/file-uploader-container/index.ts","webpack:///../../account/src/Constants/financial-details.ts","webpack:///../../account/src/Configs/financial-details-config.ts","webpack:///../../account/src/Components/financial-details/financial-details-partials.tsx","webpack:///../../account/src/Components/financial-details/financial-details.tsx","webpack:///../../account/src/Components/financial-details/index.ts","webpack:///../../account/src/Components/form-body-section/form-body-section.tsx","webpack:///../../account/src/Components/form-body-section/index.ts","webpack:///../../account/src/Components/scrollbars-container/scrollbars-container.tsx","webpack:///../../account/src/Components/form-body/index.ts","webpack:///../../account/src/Components/form-body/form-body.tsx","webpack:///../../account/src/Components/form-footer/form-footer.tsx","webpack:///../../account/src/Components/form-footer/index.ts","webpack:///../../account/src/Components/form-sub-header/index.ts","webpack:///../../account/src/Components/form-sub-header/form-sub-header.tsx","webpack:///../../account/src/Components/forms/form-fields/form-input-field.tsx","webpack:///../../account/src/Components/forms/form-fields/date-of-birth-field.tsx","webpack:///../../account/src/Components/forms/idv-form.tsx","webpack:///../../account/src/Components/forms/personal-details-form.jsx","webpack:///../../account/src/Components/forms/scroll-to-field-with-error.tsx","webpack:///../../account/src/Components/icon-message-content/icon-message-content.tsx","webpack:///../../account/src/Components/icon-message-content/index.ts","webpack:///../../account/src/Components/inline-note-with-icon/inline-note-with-icon.tsx","webpack:///../../account/src/Components/inline-note-with-icon/index.ts","webpack:///../../account/src/Components/leave-confirm/leave-confirm.tsx","webpack:///../../account/src/Components/leave-confirm/index.js","webpack:///../../account/src/Components/load-error-message/load-error-message.tsx","webpack:///../../account/src/Components/load-error-message/index.ts","webpack:///../../account/src/Components/personal-details/personal-details.jsx","webpack:///../../account/src/Components/personal-details/index.js","webpack:///../../account/src/Components/poa/common-mistakes/common-mistake-examples.tsx","webpack:///../../account/src/Configs/poa-common-mistake-examples-config.tsx","webpack:///../../account/src/Components/poa/continue-trading-button/continue-trading-button.tsx","webpack:///../../account/src/Components/poa/continue-trading-button/index.ts","webpack:///../../account/src/Components/poa/poa-button/index.ts","webpack:///../../account/src/Components/poa/poa-button/poa-button.tsx","webpack:///../../account/src/Components/poa/status/expired/index.ts","webpack:///../../account/src/Components/poa/status/expired/expired.tsx","webpack:///../../account/src/Components/poa/status/needs-review/index.ts","webpack:///../../account/src/Components/poa/status/needs-review/needs-review.tsx","webpack:///../../account/src/Components/poa/status/not-required/index.ts","webpack:///../../account/src/Components/poa/status/not-required/not-required.tsx","webpack:///../../account/src/Components/poa/status/submitted/index.ts","webpack:///../../account/src/Components/poa/status/submitted/submitted.tsx","webpack:///../../account/src/Components/poa/status/unverified/index.ts","webpack:///../../account/src/Components/poa/status/unverified/unverified.tsx","webpack:///../../account/src/Components/poa/status/verified/verified.tsx","webpack:///../../account/src/Components/poa/status/verified/index.ts","webpack:///../../account/src/Components/poi/idv-document-submit/idv-document-submit.tsx","webpack:///../../account/src/Components/poi/idv-document-submit/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-failed/idv-failed.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-failed/index.ts","webpack:///../../account/src/Components/poi/idv-status/idv-limited/idv-limited.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-limited/index.ts","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/idv-submit-complete.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-submit-complete/index.js","webpack:///../../account/src/Components/poi/idv-status/idv-verified/idv-verified.tsx","webpack:///../../account/src/Components/poi/idv-status/idv-verified/index.js","webpack:///../../account/src/Components/poi/missing-personal-details/missing-personal-details.tsx","webpack:///../../account/src/Components/poi/missing-personal-details/index.js","webpack:///../../account/src/Components/poi/poi-button/index.ts","webpack:///../../account/src/Components/poi/poi-button/poi-button.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/poi-confirm-with-example-form-container.tsx","webpack:///../../account/src/Components/poi/poi-confirm-with-example-form-container/index.ts","webpack:///../../account/src/Components/poi/poi-country-selector/poi-country-selector.tsx","webpack:///../../account/src/Components/poi/poi-country-selector/index.ts","webpack:///../../account/src/Components/poi/status/expired/expired.tsx","webpack:///../../account/src/Components/poi/status/expired/index.js","webpack:///../../account/src/Components/poi/status/limited/index.js","webpack:///../../account/src/Components/poi/status/limited/limited.tsx","webpack:///../../account/src/Components/poi/status/not-required/index.ts","webpack:///../../account/src/Components/poi/status/not-required/not-required.tsx","webpack:///../../account/src/Components/icon-message-list/list-item.tsx","webpack:///../../account/src/Components/icon-message-list/icon-message-list.tsx","webpack:///../../account/src/Components/icon-message-list/index.ts","webpack:///../../account/src/Components/poi/status/rejected-reasons/index.ts","webpack:///../../account/src/Components/poi/status/rejected-reasons/rejected-reasons.tsx","webpack:///../../account/src/Components/poi-unsupported-failed/unsupported-failed.tsx","webpack:///../../account/src/Components/poi-unsupported-failed/index.ts","webpack:///../../account/src/Components/file-uploader-container/upload-file.ts","webpack:///../../account/src/Components/poi/status/unsupported/constants.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/input-field.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/uploader.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/utils.ts","webpack:///../../account/src/Components/poi/status/unsupported/card-details/documents-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/selfie-upload.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/card-details.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-details/index.ts","webpack:///../../account/src/Components/poi/status/unsupported/detail-component.tsx","webpack:///../../account/src/Components/poi/status/unsupported/card-with-arrow.tsx","webpack:///../../account/src/Components/poi/status/unsupported/documents.tsx","webpack:///../../account/src/Components/poi/status/unsupported/unsupported.tsx","webpack:///../../account/src/Components/poi/status/unsupported/index.js","webpack:///../../account/src/Components/poi/status/upload-complete/index.ts","webpack:///../../account/src/Components/poi/status/upload-complete/upload-complete.tsx","webpack:///../../account/src/Components/poi/status/verified/verified.tsx","webpack:///../../account/src/Components/poi/status/verified/index.ts","webpack:///../../account/src/Components/real-account-signup/helpers/utils.ts","webpack:///../../account/src/Components/trading-assessment/risk-tolerance-warning-modal.tsx","webpack:///../../account/src/Components/trading-assessment/trading-assessment-radio-buttons.tsx","webpack:///../../account/src/Components/trading-assessment/trading-assessment-dropdown.tsx","webpack:///../../account/src/Constants/trading-assessment.ts","webpack:///../../account/src/Components/trading-assessment/trading-assessment-form.tsx","webpack:///../../account/src/Components/trading-assessment/trading-assessment-new-user.tsx","webpack:///../../account/src/Configs/get-status-badge-config.tsx","webpack:///../../account/src/Configs/poi-error-config.tsx","webpack:///../../account/src/Configs/trading-assessment-config.tsx","webpack:///../../account/src/Constants/api-error-codes.ts","webpack:///../../account/src/Constants/file-uploader.tsx","webpack:///../../account/src/Constants/idv-document-config.ts","webpack:///../../account/src/Constants/onfido.js","webpack:///../../account/src/Constants/trading-assessment-questions.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Field, FormikProps, FormikHelpers, FormikHandlers, FormikState, FieldProps } from 'formik';\nimport { StatesList } from '@deriv/api-types';\nimport {\n    Autocomplete,\n    AutoHeightWrapper,\n    DesktopWrapper,\n    Div100vhContainer,\n    FormSubmitButton,\n    Loading,\n    MobileWrapper,\n    Modal,\n    SelectNative,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { useStatesList } from '@deriv/hooks';\nimport { getLocation } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\nimport { FormInputField } from '../forms/form-fields';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport { splitValidationResultTypes } from '../real-account-signup/helpers/utils';\n\nexport type TAddressDetailFormProps = {\n    address_line_1: string;\n    address_line_2?: string;\n    address_city: string;\n    address_state?: string;\n    address_postcode?: string;\n};\n\ntype TAddressDetails = {\n    disabled_items: string[];\n    states_list: StatesList;\n    getCurrentStep?: () => number;\n    onSave: (current_step: number, values: TAddressDetailFormProps) => void;\n    onCancel: (current_step: number, goToPreviousStep: () => void) => void;\n    goToNextStep: () => void;\n    goToPreviousStep: () => void;\n    validate: (values: TAddressDetailFormProps) => TAddressDetailFormProps;\n    onSubmit: (\n        current_step: number | null,\n        values: TAddressDetailFormProps,\n        action: (isSubmitting: boolean) => void,\n        next_step: () => void\n    ) => void;\n    selected_step_ref?: React.RefObject<FormikProps<TAddressDetailFormProps>>;\n    value: TAddressDetailFormProps;\n    has_real_account: boolean;\n};\n\ntype TAutoComplete = {\n    value: boolean;\n    text: string;\n};\n\n/**\n * Component to display address details form\n * @name AddressDetails\n * @param getCurrentStep - function to get current step\n * @param states_list - array of states for the selected residence country\n * @param onSave - function to save form values\n * @param onCancel - function to cancel form values\n * @param goToNextStep - function to go to next step\n * @param goToPreviousStep - function to go to previous step\n * @param validate - function to validate form values\n * @param onSubmit - function to submit form values\n * @param selected_step_ref - reference to selected step\n * @param value - form values\n * @param disabled_items - array of disabled fields\n * @param has_real_account - has real account\n * @returns react node\n */\nconst AddressDetails = observer(\n    ({\n        getCurrentStep,\n        onSave,\n        onCancel,\n        goToNextStep,\n        goToPreviousStep,\n        validate,\n        onSubmit,\n        selected_step_ref,\n        disabled_items,\n        has_real_account,\n        ...props\n    }: TAddressDetails) => {\n        const [address_state_to_display, setAddressStateToDisplay] = React.useState('');\n\n        const {\n            ui,\n            client: { residence },\n            traders_hub: { is_eu_user },\n        } = useStore();\n\n        const { is_desktop, is_mobile } = ui;\n        const { data: states_list, isFetched } = useStatesList(residence);\n\n        const handleCancel = (values: TAddressDetailFormProps) => {\n            const current_step = (getCurrentStep?.() || 1) - 1;\n            onSave(current_step, values);\n            onCancel(current_step, goToPreviousStep);\n        };\n\n        const handleValidate = (values: TAddressDetailFormProps) => {\n            const { errors } = splitValidationResultTypes(validate(values));\n            return errors;\n        };\n\n        const handleSubmitData = (values: TAddressDetailFormProps, actions: FormikHelpers<TAddressDetailFormProps>) => {\n            if (values.address_state && states_list.length) {\n                values.address_state = address_state_to_display\n                    ? getLocation(states_list, address_state_to_display, 'value')\n                    : getLocation(states_list, values.address_state, 'value');\n            }\n            onSubmit((getCurrentStep?.() || 1) - 1, values, actions.setSubmitting, goToNextStep);\n        };\n\n        return (\n            <Formik initialValues={props.value} validate={handleValidate} validateOnMount onSubmit={handleSubmitData}>\n                {({\n                    handleSubmit,\n                    isSubmitting,\n                    values,\n                    setFieldValue,\n                    handleChange,\n                    setFieldTouched,\n                }: FormikHandlers & FormikHelpers<TAddressDetailFormProps> & FormikState<TAddressDetailFormProps>) => (\n                    <AutoHeightWrapper default_height={350} height_offset={is_desktop ? 80 : null}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement) => void;\n                            height: number | string;\n                        }) => (\n                            //noValidate here is for skipping default browser validation\n                            <form ref={setRef} onSubmit={handleSubmit} noValidate>\n                                <Div100vhContainer\n                                    className='details-form'\n                                    height_offset='90px'\n                                    is_disabled={is_desktop}\n                                >\n                                    <ScrollToFieldWithError />\n                                    {is_eu_user ? (\n                                        <div className='details-form__banner-container'>\n                                            <InlineNoteWithIcon\n                                                icon='IcAlertWarning'\n                                                message={\n                                                    <Localize i18n_default_text='For verification purposes as required by regulation. It’s your responsibility to provide accurate and complete answers. You can update personal details at any time in your account settings.' />\n                                                }\n                                                title={localize('Why do we collect this?')}\n                                            />\n                                        </div>\n                                    ) : (\n                                        <Text\n                                            as='p'\n                                            align='left'\n                                            size='xxs'\n                                            line_height='l'\n                                            className='details-form__description'\n                                        >\n                                            <strong>\n                                                <Localize i18n_default_text='Only use an address for which you have proof of residence - ' />\n                                            </strong>\n                                            <Localize i18n_default_text='a recent utility bill (e.g. electricity, water, gas, landline, or internet), bank statement, or government-issued letter with your name and this address.' />\n                                        </Text>\n                                    )}\n\n                                    <ThemedScrollbars height={height} className='details-form__scrollbar'>\n                                        <div\n                                            className={classNames('details-form__elements', 'address-details-form', {\n                                                'address-details-form__eu': is_eu_user,\n                                            })}\n                                        >\n                                            <FormInputField\n                                                name='address_line_1'\n                                                required\n                                                label={localize('First line of address*')}\n                                                maxLength={255}\n                                                placeholder={localize('First line of address')}\n                                                disabled={\n                                                    disabled_items.includes('address_line_1') ||\n                                                    (!!props.value?.address_line_1 && has_real_account)\n                                                }\n                                            />\n                                            <FormInputField\n                                                name='address_line_2'\n                                                label={localize('Second line of address')}\n                                                maxLength={255}\n                                                placeholder={localize('Second line of address')}\n                                                disabled={\n                                                    disabled_items.includes('address_line_2') ||\n                                                    (!!props.value?.address_line_2 && has_real_account)\n                                                }\n                                            />\n                                            <FormInputField\n                                                name='address_city'\n                                                required\n                                                label={localize('Town/City*')}\n                                                placeholder={localize('Town/City')}\n                                                disabled={\n                                                    disabled_items.includes('address_city') ||\n                                                    (!!props.value?.address_city && has_real_account)\n                                                }\n                                            />\n                                            {!isFetched && (\n                                                <div className='details-form__loader'>\n                                                    <Loading is_fullscreen={false} />\n                                                </div>\n                                            )}\n                                            {states_list?.length > 0 ? (\n                                                <Field name='address_state'>\n                                                    {({ field }: FieldProps) => (\n                                                        <React.Fragment>\n                                                            <DesktopWrapper>\n                                                                <Autocomplete\n                                                                    {...field}\n                                                                    {...(address_state_to_display && {\n                                                                        value: address_state_to_display,\n                                                                    })}\n                                                                    data-lpignore='true'\n                                                                    autoComplete='new-password' // prevent chrome autocomplete\n                                                                    type='text'\n                                                                    label={localize('State/Province')}\n                                                                    list_items={states_list}\n                                                                    onItemSelection={({\n                                                                        value,\n                                                                        text,\n                                                                    }: TAutoComplete) => {\n                                                                        setFieldValue(\n                                                                            'address_state',\n                                                                            value ? text : '',\n                                                                            true\n                                                                        );\n                                                                        setAddressStateToDisplay('');\n                                                                    }}\n                                                                    list_portal_id='modal_root'\n                                                                    disabled={\n                                                                        disabled_items.includes('address_state') ||\n                                                                        (props.value?.address_state && has_real_account)\n                                                                    }\n                                                                />\n                                                            </DesktopWrapper>\n                                                            <MobileWrapper>\n                                                                <SelectNative\n                                                                    placeholder={localize('Please select')}\n                                                                    label={localize('State/Province')}\n                                                                    value={\n                                                                        address_state_to_display || values.address_state\n                                                                    }\n                                                                    list_items={states_list}\n                                                                    use_text={true}\n                                                                    onChange={(e: { target: { value: string } }) => {\n                                                                        setFieldValue(\n                                                                            'address_state',\n                                                                            e.target.value,\n                                                                            true\n                                                                        );\n                                                                        setAddressStateToDisplay('');\n                                                                    }}\n                                                                    disabled={\n                                                                        disabled_items.includes('address_state') ||\n                                                                        (!!props.value?.address_state &&\n                                                                            has_real_account)\n                                                                    }\n                                                                />\n                                                            </MobileWrapper>\n                                                        </React.Fragment>\n                                                    )}\n                                                </Field>\n                                            ) : (\n                                                // Fallback to input field when states list is empty / unavailable for country\n                                                <FormInputField\n                                                    name='address_state'\n                                                    label={localize('State/Province')}\n                                                    placeholder={localize('State/Province')}\n                                                    disabled={\n                                                        disabled_items.includes('address_state') ||\n                                                        (!!props.value?.address_state && has_real_account)\n                                                    }\n                                                />\n                                            )}\n                                            <FormInputField\n                                                name='address_postcode'\n                                                label={localize('Postal/ZIP Code')}\n                                                placeholder={localize('Postal/ZIP Code')}\n                                                onChange={e => {\n                                                    setFieldTouched('address_postcode', true);\n                                                    handleChange(e);\n                                                }}\n                                                disabled={\n                                                    disabled_items.includes('address_postcode') ||\n                                                    (!!props.value?.address_postcode && has_real_account)\n                                                }\n                                            />\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer has_separator is_bypassed={is_mobile}>\n                                    <FormSubmitButton\n                                        is_disabled={isSubmitting}\n                                        label={localize('Next')}\n                                        is_absolute={is_mobile}\n                                        has_cancel\n                                        cancel_label={localize('Previous')}\n                                        onCancel={() => handleCancel(values)}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default AddressDetails;\n","import AddressDetails from './address-details';\n\nexport default AddressDetails;\n","import React from 'react';\nimport { Popover } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nexport type TUSTPopover = {\n    id: string;\n};\n\nconst USTPopover = ({ id }: TUSTPopover) => {\n    let popover_message: React.ReactElement;\n    if (/^UST$/i.test(id)) {\n        popover_message = (\n            <Localize\n                i18n_default_text={\n                    'Tether as an Omni token (USDT) is a version of Tether that is hosted on the Omni layer on the Bitcoin blockchain.'\n                }\n                components={[<br key={0} />]}\n            />\n        );\n    } else if (/^tUSDT$/i.test(id)) {\n        popover_message = (\n            <Localize\n                i18n_default_text={'Tether as a TRC20 token (tUSDT) is a version of Tether that is hosted on Tron.'}\n            />\n        );\n    } else {\n        popover_message = (\n            <Localize\n                i18n_default_text={\n                    'Tether as an ERC20 token (eUSDT) is a version of Tether that is hosted on Ethereum.'\n                }\n            />\n        );\n    }\n\n    return (\n        <Popover\n            alignment='top'\n            className='currency-list__popover'\n            disable_message_icon\n            icon='info'\n            is_bubble_hover_enabled\n            message={popover_message}\n            zIndex='9999'\n        />\n    );\n};\n\nexport default USTPopover;\n","import React, { AllHTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport { Icon } from '@deriv/components';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport USTPopover from './ust-popover';\n\ntype TRadioButtonExtend = {\n    field: React.InputHTMLAttributes<HTMLInputElement>;\n    icon?: string;\n    second_line_label?: string;\n    id: string;\n    label: string;\n    onClick?: (e: React.MouseEvent<HTMLLabelElement, MouseEvent>) => void;\n};\n\nexport type TRadioButton = AllHTMLAttributes<HTMLInputElement | HTMLLabelElement> & TRadioButtonExtend;\n\n/**\n *  RadioButton component to select currency\n * @name RadioButton\n * @param {React.InputHTMLAttributes<HTMLInputElement>} field - field props given by Formik\n * @param {string} icon - icon name\n * @param {string} id - currency id\n * @param {string} label - currency name\n * @param {string} second_line_label - currency code\n * @param {Function} onClick - function to be called on click\n * @param {AllHTMLAttributes<HTMLInputElement | HTMLLabelElement>} props - other props to be passed\n * @returns {React.ReactNode} - returns a React node\n */\n\nconst RadioButton = ({\n    field: { name, value, onChange, onBlur },\n    icon,\n    id,\n    label,\n    second_line_label,\n    onClick,\n    className,\n    ...props\n}: TRadioButton) => {\n    return (\n        <React.Fragment>\n            <input\n                name={name}\n                id={id}\n                type='radio'\n                value={id} // could be something else for output?\n                checked={id === value}\n                onChange={onChange}\n                onBlur={onBlur}\n                disabled={props.selected}\n                className={classNames(className, 'currency-list__radio-button')}\n                {...props}\n            />\n            <label\n                htmlFor={id}\n                className={classNames('currency-list__item', {\n                    'currency-list__item--selected': id === value,\n                    'currency-list__item--current': props.selected,\n                })}\n                onClick={onClick}\n            >\n                {icon ? (\n                    <React.Fragment>\n                        <Icon className='currency-list__icon' icon={icon} />\n                        <div className='label currency-list__item-text'>\n                            <div className='currency-list__item-label'>{label}</div>\n                            <div className='currency-list__item-code'>{second_line_label}</div>\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <Icon className='currency-list__icon' icon={`IcCurrency-${id?.toLowerCase()}`} />\n                        {id && /^(UST|eUSDT|tUSDT)$/i.test(id) && <USTPopover id={id} />}\n                        <div className='label currency-list__item-text'>\n                            <div className='currency-list__item-label'>{label}</div>\n                            <div className='currency-list__item-code'>({getCurrencyDisplayCode(id)})</div>\n                        </div>\n                    </React.Fragment>\n                )}\n            </label>\n        </React.Fragment>\n    );\n};\n\nexport default RadioButton;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { Text } from '@deriv/components';\n\nexport type TRadioButtonGroup = {\n    className: string;\n    is_fiat?: boolean;\n    is_title_enabled?: boolean;\n    item_count: number;\n    label: string;\n    description: React.ReactNode;\n    has_fiat?: boolean;\n};\n\n/**\n * Wrapper component for RadioButton\n * @name RadioButtonGroup\n * @param {string} className - class name for styling\n * @param {boolean} is_fiat - is fiat currency\n * @param {boolean} is_title_enabled - is title enabled\n * @param {number} item_count - number of items\n * @param {string} label - label for the radio button\n * @param {React.ReactNode} description - description for the radio button\n * @param {boolean} has_fiat - has fiat currency\n * @returns {React.ReactNode} - returns a React node\n */\nconst RadioButtonGroup = ({\n    children,\n    label,\n    className,\n    is_title_enabled = true,\n    is_fiat,\n    item_count,\n    description,\n    has_fiat,\n}: React.PropsWithChildren<TRadioButtonGroup>) => {\n    const [is_currency_selected, setIsCurrencySelected] = useState(false);\n\n    const onCurrencyClicked = () => {\n        setIsCurrencySelected(true);\n    };\n    return (\n        <div className={className}>\n            {is_title_enabled && (\n                <h2\n                    className={classNames(`${className}--is-header`, {\n                        'currency-selector__is-crypto': !is_fiat,\n                    })}\n                >\n                    {label}\n                </h2>\n            )}\n            {is_fiat && has_fiat && (\n                <Text size='xxs' className='currency-selector__subheading'>\n                    {localize('You are limited to one fiat currency only')}\n                </Text>\n            )}\n            <div\n                className={classNames('currency-list__items', {\n                    'currency-list__items__center': item_count < 4,\n                    'currency-list__items__is-fiat': is_fiat,\n                    'currency-list__items__is-crypto': !is_fiat,\n                })}\n                onClick={onCurrencyClicked}\n            >\n                {children}\n            </div>\n            {is_fiat && is_currency_selected && <p className='currency-selector__description'>{description}</p>}\n        </div>\n    );\n};\n\nexport default RadioButtonGroup;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field, Formik, FormikHandlers, FormikState } from 'formik';\nimport { WebsiteStatus } from '@deriv/api-types';\nimport { AutoHeightWrapper, FormSubmitButton, Div100vhContainer, Modal, ThemedScrollbars } from '@deriv/components';\nimport { getPlatformSettings, reorderCurrencies, getAddressDetailsFields, CURRENCY_TYPE } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\nimport RadioButton from './radio-button';\nimport RadioButtonGroup from './radio-button-group';\nimport { splitValidationResultTypes } from '../real-account-signup/helpers/utils';\n\nexport const Hr = () => <div className='currency-hr' />;\n\nexport type TCurrencySelectorFormProps = {\n    currency: string;\n};\n\ntype TCurrencySelectorExtend = {\n    getCurrentStep: () => number;\n    goToNextStep: () => void;\n    goToStep: (step: number) => void;\n    goToPreviousStep: () => void;\n    has_cancel: boolean;\n    has_wallet_account: boolean;\n    is_virtual: boolean;\n    onCancel: (current_step: number, goToPreviousStep: () => void) => void;\n    onSave: (current_step: number, values: TCurrencySelectorFormProps) => void;\n    onSubmit: (\n        current_step: number | null,\n        values: TCurrencySelectorFormProps,\n        action: (isSubmitting: boolean) => void,\n        next_step: () => void\n    ) => void;\n    set_currency: boolean;\n    validate: (values: TCurrencySelectorFormProps) => TCurrencySelectorFormProps;\n    value: TCurrencySelectorFormProps;\n};\n\ntype TCurrencySelector = React.HTMLAttributes<HTMLInputElement | HTMLLabelElement> & TCurrencySelectorExtend;\n\n/**\n * Currency selector component to select the Account currency\n * @name CurrencySelector\n * @param getCurrentStep - Get the current step\n * @param goToNextStep - Go to the next step\n * @param goToStep - Go to a specific step\n * @param goToPreviousStep - Go to the previous step\n * @param has_cancel - Has cancel button\n * @param has_wallet_account - Has wallet account\n * @param is_virtual - Is virtual account\n * @param onCancel - To handle click on cancel button\n * @param onSave - To handle click on save button\n * @param onSubmit - To handle click on submit button\n * @param set_currency - Is current set\n * @param alidate - To validate the form\n * @param alue - Value of the form\n * @returns React node\n */\nconst CurrencySelector = observer(\n    ({\n        getCurrentStep,\n        goToNextStep,\n        goToStep,\n        onSubmit,\n        onSave,\n        onCancel,\n        goToPreviousStep,\n        set_currency,\n        validate,\n        has_cancel = false,\n        has_wallet_account,\n        value,\n    }: TCurrencySelector) => {\n        const { client, ui, traders_hub } = useStore();\n\n        const {\n            currency,\n            has_active_real_account: has_real_account,\n            upgradeable_currencies: legal_allowed_currencies,\n            available_crypto_currencies,\n            is_dxtrade_allowed,\n            is_mt5_allowed,\n            has_fiat,\n            accounts,\n        } = client;\n\n        const { is_eu_user } = traders_hub;\n\n        const has_currency = Boolean(currency);\n\n        const { real_account_signup, real_account_signup_target, resetRealAccountSignupParams, is_desktop, is_mobile } =\n            ui;\n\n        // Wrapped with String() to avoid type mismatch\n        const crypto = legal_allowed_currencies.filter(\n            selected_currency => String(selected_currency.type) === CURRENCY_TYPE.CRYPTO\n        );\n\n        // Wrapped with String() to avoid type mismatch\n        const fiat = legal_allowed_currencies.filter(\n            selected_currency => String(selected_currency.type) === CURRENCY_TYPE.FIAT\n        );\n        const [is_bypass_step, setIsBypassStep] = React.useState<boolean>(false);\n\n        const should_disable_fiat = !!Object.values(accounts).filter(\n            item => item.landing_company_shortcode === real_account_signup_target\n        ).length;\n\n        const handleCancel = (values: TCurrencySelectorFormProps) => {\n            const current_step = getCurrentStep() - 1;\n            onSave(current_step, values);\n            onCancel(current_step, goToPreviousStep);\n        };\n\n        const handleValidate = (values: TCurrencySelectorFormProps) => {\n            const { errors } = splitValidationResultTypes(validate(values));\n            return errors;\n        };\n\n        // In case of form error bypass to update personal data\n        React.useEffect(() => {\n            if (real_account_signup?.error_code) {\n                setIsBypassStep(true);\n            }\n        }, [real_account_signup?.error_code]);\n\n        React.useEffect(() => {\n            if (is_bypass_step && real_account_signup?.error_details) {\n                const keys = Object.keys(real_account_signup?.error_details);\n                const route_to_address_details = Object.keys(getAddressDetailsFields()).filter(item =>\n                    keys.includes(item)\n                );\n                if (route_to_address_details?.length > 0) {\n                    goToStep(3);\n                } else {\n                    goToNextStep();\n                }\n                resetRealAccountSignupParams();\n                setIsBypassStep(false);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [is_bypass_step]);\n\n        const getHeightOffset = () => {\n            if (!has_currency && has_real_account) {\n                return '89px';\n            }\n            return '159px';\n        };\n\n        const getSubmitLabel = () => {\n            if (set_currency) {\n                return localize('Set currency');\n            } else if (has_wallet_account) {\n                return localize('Finish');\n            }\n            return localize('Next');\n        };\n\n        const description = React.useMemo(() => {\n            const dmt5_label = is_eu_user ? localize('CFDs') : localize('Deriv MT5');\n            const platform_name_dxtrade = getPlatformSettings('dxtrade').name;\n\n            if (is_eu_user && is_mt5_allowed) {\n                return (\n                    <Localize\n                        i18n_default_text=\"Enjoy a seamless trading experience with the selected fiat account. Please note that once you've made your first deposit or created a real {{dmt5_label}} account, your account currency cannot be changed.\"\n                        values={{ dmt5_label }}\n                    />\n                );\n            } else if (is_dxtrade_allowed && is_mt5_allowed) {\n                return (\n                    <Localize\n                        i18n_default_text='You are limited to one fiat account. You won’t be able to change your account currency if you have already made your first deposit or created a real {{dmt5_label}} or {{platform_name_dxtrade}} account.'\n                        values={{ dmt5_label, platform_name_dxtrade }}\n                    />\n                );\n            } else if (!is_dxtrade_allowed && is_mt5_allowed) {\n                return (\n                    <Localize\n                        i18n_default_text='You are limited to one fiat account. You won’t be able to change your account currency if you have already made your first deposit or created a real {{dmt5_label}} account.'\n                        values={{ dmt5_label }}\n                    />\n                );\n            }\n\n            return (\n                <Localize i18n_default_text='You are limited to one fiat account. You won’t be able to change your account currency if you have already made your first deposit.' />\n            );\n        }, [is_eu_user, is_dxtrade_allowed, is_mt5_allowed]);\n\n        return (\n            <Formik\n                initialValues={value}\n                onSubmit={(values, actions) => {\n                    onSubmit(getCurrentStep ? getCurrentStep() - 1 : null, values, actions.setSubmitting, goToNextStep);\n                }}\n                validate={handleValidate}\n            >\n                {({ handleSubmit, values }: FormikState<TCurrencySelectorFormProps> & FormikHandlers) => (\n                    <AutoHeightWrapper default_height={450}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement | null) => void;\n                            height: number;\n                        }) => (\n                            <form\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                className='currency-selector'\n                                data-testid='currency_selector_form'\n                            >\n                                <Div100vhContainer\n                                    className={classNames('currency-selector__container', {\n                                        'currency-selector__container--no-top-margin':\n                                            !has_currency && has_real_account && is_mobile,\n                                    })}\n                                    height_offset={getHeightOffset()}\n                                    is_disabled={is_desktop}\n                                >\n                                    <ThemedScrollbars height={height}>\n                                        {!!fiat?.length && (\n                                            <React.Fragment>\n                                                <RadioButtonGroup\n                                                    className='currency-selector__radio-group currency-selector__radio-group--with-margin'\n                                                    label={localize('Fiat currencies')}\n                                                    is_fiat\n                                                    item_count={fiat.length}\n                                                    description={description}\n                                                    has_fiat={should_disable_fiat && has_fiat}\n                                                >\n                                                    {reorderCurrencies(fiat).map(\n                                                        (avbl_currency: WebsiteStatus['currencies_config']) => (\n                                                            <Field\n                                                                key={avbl_currency.value}\n                                                                component={RadioButton}\n                                                                name='currency'\n                                                                id={avbl_currency.value}\n                                                                label={avbl_currency.name}\n                                                                selected={should_disable_fiat && has_fiat}\n                                                            />\n                                                        )\n                                                    )}\n                                                </RadioButtonGroup>\n                                                {!!reorderCurrencies(crypto, 'crypto')?.length && <Hr />}\n                                            </React.Fragment>\n                                        )}\n                                        {!!reorderCurrencies(crypto, 'crypto')?.length && (\n                                            <React.Fragment>\n                                                <RadioButtonGroup\n                                                    className='currency-selector__radio-group currency-selector__radio-group--with-margin'\n                                                    label={localize('Cryptocurrencies')}\n                                                    item_count={reorderCurrencies(crypto, 'crypto').length}\n                                                    description={description}\n                                                >\n                                                    {reorderCurrencies(crypto, 'crypto').map(avbl_currency => (\n                                                        <Field\n                                                            key={avbl_currency.value}\n                                                            component={RadioButton}\n                                                            selected={\n                                                                available_crypto_currencies?.filter(\n                                                                    (crypto_data: WebsiteStatus['currencies_config']) =>\n                                                                        crypto_data.value === avbl_currency.value\n                                                                )?.length === 0\n                                                            }\n                                                            name='currency'\n                                                            id={avbl_currency.value}\n                                                            label={avbl_currency.name}\n                                                        />\n                                                    ))}\n                                                </RadioButtonGroup>\n                                            </React.Fragment>\n                                        )}\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer has_separator is_bypassed={is_mobile}>\n                                    <FormSubmitButton\n                                        className={\n                                            set_currency\n                                                ? 'currency-selector--set-currency'\n                                                : 'currency-selector--deriv-account'\n                                        }\n                                        is_disabled={!values.currency}\n                                        is_center={false}\n                                        is_absolute={set_currency}\n                                        label={getSubmitLabel()}\n                                        {...(has_cancel\n                                            ? {\n                                                  cancel_label: localize('Previous'),\n                                                  has_cancel: true,\n                                                  onCancel: () => handleCancel(values),\n                                              }\n                                            : {})}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default CurrencySelector;\n","import CurrencySelector from './currency-selector';\n\nexport default CurrencySelector;\n","import React from 'react';\nimport { Icon, Text, Button } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TIconWithMessage = {\n    icon: string;\n    has_button?: boolean;\n    message: string;\n};\n\nconst IconWithMessage = observer(({ has_button, icon, message }: TIconWithMessage) => {\n    const { client, ui } = useStore();\n    const { has_any_real_account: has_real_account } = client;\n    const { toggleAccountsDialog, toggleShouldShowRealAccountsList } = ui;\n\n    return (\n        <div className='da-icon-with-message'>\n            <Icon icon={icon} size={128} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                color='general'\n                size={isMobile() ? 'xs' : 's'}\n                line_height='m'\n                weight='bold'\n            >\n                {message}\n            </Text>\n            {has_button && (\n                <Button\n                    primary\n                    onClick={() => {\n                        toggleShouldShowRealAccountsList(true);\n                        toggleAccountsDialog();\n                    }}\n                    className='account__demo-message-button'\n                    data-testid='icon-with-message-button'\n                >\n                    {has_real_account ? localize('Switch to real account') : localize('Add a real account')}\n                </Button>\n            )}\n        </div>\n    );\n});\n\nexport default IconWithMessage;\n","import IconWithMessage from './icon-with-message';\nimport './icon-with-message.scss';\n\nexport default IconWithMessage;\n","import React from 'react';\nimport { localize } from '@deriv/translations';\nimport IconWithMessage from '../icon-with-message';\n\ntype TDemoMessage = {\n    has_demo_icon?: boolean;\n    has_button?: boolean;\n};\n\nconst DemoMessage = ({ has_demo_icon, has_button }: TDemoMessage) => (\n    <IconWithMessage\n        icon={has_demo_icon ? 'IcPoaLockDemo' : 'IcPoaLock'}\n        message={localize('This feature is not available for demo accounts.')}\n        has_button={has_button}\n    />\n);\n\nexport default DemoMessage;\n","import DemoMessage from './demo-message';\n\nexport default DemoMessage;\n","import React from 'react';\nimport { PageError } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { routes } from '@deriv/shared';\n\ntype TErrorComponent = {\n    header: JSX.Element | string;\n    message: JSX.Element | string;\n    redirect_label: string;\n    redirectOnClick: (() => void) | null;\n    should_show_refresh: boolean;\n};\n\nconst ErrorComponent = ({\n    header,\n    message,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const refresh_message: JSX.Element | string = should_show_refresh ? (\n        <Localize i18n_default_text='Please refresh this page to continue.' />\n    ) : (\n        ''\n    );\n\n    return (\n        <PageError\n            header={header || <Localize i18n_default_text='Oops, something went wrong.' />}\n            messages={\n                message\n                    ? [message, refresh_message]\n                    : [\n                          <Localize\n                              i18n_default_text='Sorry, an error occurred while processing your request.'\n                              key={0}\n                          />,\n                          refresh_message,\n                      ]\n            }\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label ?? <Localize i18n_default_text='Refresh' />]}\n            buttonOnClick={redirectOnClick ?? (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component.tsx';\n\nexport default ErrorComponent;\n","import { Text } from '@deriv/components';\nimport React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { TFilesDescription } from '../../Types';\n\nconst FilesDescription = observer(({ descriptions, title }: TFilesDescription) => {\n    const {\n        ui: { is_mobile },\n    } = useStore();\n    return (\n        <div className='files-description'>\n            <Text size={is_mobile ? 'xxs' : 'xs'} as='div' className='files-description__title' weight='bold'>\n                {title}\n            </Text>\n            <ul>\n                {descriptions.map(item => (\n                    <li key={item.id}>\n                        <Text size={is_mobile ? 'xxs' : 'xs'} line_height={is_mobile ? 'l' : 'xl'}>\n                            {item.value}\n                        </Text>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n});\n\nexport default FilesDescription;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FileDropzone, Icon, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport { getSupportedFiles, max_document_size, supported_filetypes } from '@deriv/shared';\nimport { DropzoneOptions } from 'react-dropzone';\nimport { observer, useStore } from '@deriv/stores';\n\ntype THandleRejectedFiles = DropzoneOptions['onDropRejected'];\n\ntype TFileUploaderProps = {\n    onFileDrop: (files: File[]) => void;\n    onError?: (error_message: string) => void;\n};\n\nconst UploadMessage = observer(() => {\n    const {\n        ui: { is_mobile },\n    } = useStore();\n    return (\n        <React.Fragment>\n            <Icon icon='IcUpload' className='dc-file-dropzone__message-icon' size={30} />\n            <div className='dc-file-dropzone__message-subtitle'>\n                <Text size='xxs' align='center' weight='bold' color='less-prominent'>\n                    {is_mobile ? (\n                        <Localize i18n_default_text='Click here to browse your files.' />\n                    ) : (\n                        <Localize i18n_default_text='Drag and drop a file or click to browse your files.' />\n                    )}\n                </Text>\n                <Text size={is_mobile ? 'xxxxs' : 'xxxs'} align='center' color='less-prominent'>\n                    <Localize i18n_default_text='Remember, selfies, pictures of houses, or non-related images will be rejected.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n});\n\nconst FileUploader = ({ onFileDrop, onError }: TFileUploaderProps) => {\n    const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n    const [file_error, setFileError] = React.useState<string | null>(null);\n\n    React.useEffect(() => {\n        if (document_files) {\n            onFileDrop(document_files);\n            onError?.('');\n        }\n    }, [document_files, onFileDrop, onError]);\n\n    const handleAcceptedFiles = (files: File[]) => {\n        if (files.length > 0) {\n            setDocumentFiles(files);\n            setFileError(null);\n            onError?.('');\n        }\n    };\n\n    const handleRejectedFiles: THandleRejectedFiles = files => {\n        const is_file_too_large = files.length > 0 && files[0].file.size > max_document_size;\n        const supported_files = files.filter(each_file => getSupportedFiles(each_file.file.name));\n        const error_message =\n            is_file_too_large && supported_files.length > 0\n                ? localize('File size should be 8MB or less')\n                : localize('File uploaded is not supported');\n\n        setDocumentFiles([]);\n        onError?.(error_message);\n        setFileError(error_message);\n    };\n\n    const removeFile = () => {\n        setDocumentFiles([]);\n        setFileError(null);\n        onError?.('');\n    };\n\n    return (\n        <React.Fragment>\n            <FileDropzone\n                accept={supported_filetypes}\n                error_message={localize('Please upload supported file type.')}\n                filename_limit={26}\n                hover_message={localize('Drop files here..')}\n                max_size={max_document_size}\n                message={<UploadMessage />}\n                multiple={false}\n                onDropAccepted={handleAcceptedFiles}\n                onDropRejected={handleRejectedFiles}\n                validation_error_message={file_error}\n                value={document_files}\n            />\n            {((document_files && document_files?.length > 0) || file_error) && (\n                <div className='file-uploader__remove-btn-container'>\n                    <Icon\n                        icon='IcCloseCircle'\n                        className={classNames('file-uploader__remove-btn', {\n                            'file-uploader__remove-btn--error': file_error,\n                        })}\n                        onClick={removeFile}\n                        color='secondary'\n                        data_testid='dt_remove_file_icon'\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport FileUploader from './file-uploader';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TFileUploaderContainer = {\n    onFileDrop: (files: File[]) => void;\n    files_description?: React.ReactNode;\n    examples?: React.ReactNode;\n    onError?: (error_message: string) => void;\n};\n\nconst FileUploaderContainer = observer(\n    ({ examples, files_description, onFileDrop, onError }: TFileUploaderContainer) => {\n        const {\n            ui: { is_mobile },\n        } = useStore();\n        return (\n            <div className='file-uploader__container' data-testid='dt_file_uploader_container'>\n                {files_description}\n                <Text size={is_mobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                    <Localize i18n_default_text='Upload file' />\n                </Text>\n                <div className='file-uploader__file-dropzone-wrapper'>\n                    <FileUploader onError={onError} onFileDrop={onFileDrop} />\n                </div>\n                <div className='file-uploader__file-supported-formats'>\n                    <Text size={is_mobile ? 'xxxs' : 'xxs'}>\n                        <Localize i18n_default_text='Supported formats: JPEG, JPG, PNG, PDF, and GIF only' />\n                    </Text>\n                    <Text size={is_mobile ? 'xxxs' : 'xxs'}>\n                        <Localize i18n_default_text='Maximum size: 8MB' />\n                    </Text>\n                </div>\n                {examples}\n            </div>\n        );\n    }\n);\n\nexport default FileUploaderContainer;\n","import FileUploaderContainer from './file-uploader-container';\n\nexport default FileUploaderContainer;\n","export const EMPLOYMENT_VALUES = {\n    EMPLOYED: 'Employed',\n    UNEMPLOYED: 'Unemployed',\n};\n","import React from 'react';\nimport { GetFinancialAssessment } from '@deriv/api-types';\nimport { generateValidationFunction, getDefaultFields, TSchema } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { EMPLOYMENT_VALUES } from '../Constants/financial-details';\n\ntype TFinancialDetailsConfig = {\n    real_account_signup_target: string;\n    financial_assessment: GetFinancialAssessment;\n};\n\nconst financial_details_config: (props: { financial_assessment: GetFinancialAssessment }) => TSchema = ({\n    financial_assessment,\n}) => {\n    return {\n        account_turnover: {\n            supported_in: ['maltainvest'],\n            default_value: financial_assessment?.account_turnover ?? '',\n            rules: [['req', localize('Please select an option')]],\n        },\n        education_level: {\n            supported_in: ['maltainvest'],\n            default_value: financial_assessment?.education_level ?? '',\n            rules: [['req', localize('Please select an option')]],\n        },\n        employment_industry: {\n            default_value: financial_assessment?.employment_industry ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        estimated_worth: {\n            default_value: financial_assessment?.estimated_worth ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        income_source: {\n            default_value: financial_assessment?.income_source ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        net_income: {\n            default_value: financial_assessment?.net_income ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        occupation: {\n            default_value: financial_assessment?.occupation ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n        source_of_wealth: {\n            default_value: financial_assessment?.source_of_wealth ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Please select an option')]],\n        },\n    };\n};\n\nconst financialDetailsConfig = (\n    { real_account_signup_target, financial_assessment }: TFinancialDetailsConfig,\n    FinancialDetails: React.Component\n) => {\n    const config = financial_details_config({ financial_assessment });\n\n    return {\n        header: {\n            active_title: localize('Complete your financial assessment'),\n            title: localize('Financial assessment'),\n        },\n        body: FinancialDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(real_account_signup_target, config),\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated'],\n    };\n};\n\nexport const getAccountTurnoverList = () => [\n    {\n        text: localize('Less than $25,000'),\n        value: 'Less than $25,000',\n    },\n    {\n        text: localize('$25,000 - $50,000'),\n        value: '$25,000 - $50,000',\n    },\n    {\n        text: localize('$50,001 - $100,000'),\n        value: '$50,001 - $100,000',\n    },\n    {\n        text: localize('$100,001 - $500,000'),\n        value: '$100,001 - $500,000',\n    },\n    {\n        text: localize('Over $500,000'),\n        value: 'Over $500,000',\n    },\n];\n\nexport const getEmploymentIndustryList = () => [\n    {\n        text: localize('Construction'),\n        value: 'Construction',\n    },\n    {\n        text: localize('Education'),\n        value: 'Education',\n    },\n    {\n        text: localize('Finance'),\n        value: 'Finance',\n    },\n    {\n        text: localize('Health'),\n        value: 'Health',\n    },\n    {\n        text: localize('Tourism'),\n        value: 'Tourism',\n    },\n    {\n        text: localize('Information & Communications Technology'),\n        value: 'Information & Communications Technology',\n    },\n    {\n        text: localize('Science & Engineering'),\n        value: 'Science & Engineering',\n    },\n    {\n        text: localize('Legal'),\n        value: 'Legal',\n    },\n    {\n        text: localize('Social & Cultural'),\n        value: 'Social & Cultural',\n    },\n    {\n        text: localize('Agriculture'),\n        value: 'Agriculture',\n    },\n    {\n        text: localize('Real Estate'),\n        value: 'Real Estate',\n    },\n    {\n        text: localize('Food Services'),\n        value: 'Food Services',\n    },\n    {\n        text: localize('Manufacturing'),\n        value: 'Manufacturing',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getOccupationList = () => [\n    {\n        text: localize('Chief Executives, Senior Officials and Legislators'),\n        value: 'Chief Executives, Senior Officials and Legislators',\n    },\n    {\n        text: localize('Managers'),\n        value: 'Managers',\n    },\n    {\n        text: localize('Professionals'),\n        value: 'Professionals',\n    },\n    {\n        text: localize('Clerks'),\n        value: 'Clerks',\n    },\n    {\n        text: localize('Personal Care, Sales and Service Workers'),\n        value: 'Personal Care, Sales and Service Workers',\n    },\n    {\n        text: localize('Agricultural, Forestry and Fishery Workers'),\n        value: 'Agricultural, Forestry and Fishery Workers',\n    },\n    {\n        text: localize('Craft, Metal, Electrical and Electronics Workers'),\n        value: 'Craft, Metal, Electrical and Electronics Workers',\n    },\n    {\n        text: localize('Plant and Machine Operators and Assemblers'),\n        value: 'Plant and Machine Operators and Assemblers',\n    },\n    {\n        text: localize('Cleaners and Helpers'),\n        value: 'Cleaners and Helpers',\n    },\n    {\n        text: localize('Mining, Construction, Manufacturing and Transport Workers'),\n        value: 'Mining, Construction, Manufacturing and Transport Workers',\n    },\n    {\n        text: localize('Armed Forces'),\n        value: 'Armed Forces',\n    },\n    {\n        text: localize('Government Officers'),\n        value: 'Government Officers',\n    },\n    {\n        text: localize('Students'),\n        value: 'Students',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getSourceOfWealthList = () => [\n    {\n        text: localize('Accumulation of Income/Savings'),\n        value: 'Accumulation of Income/Savings',\n    },\n    {\n        text: localize('Cash Business'),\n        value: 'Cash Business',\n    },\n    {\n        text: localize('Company Ownership'),\n        value: 'Company Ownership',\n    },\n    {\n        text: localize('Divorce Settlement'),\n        value: 'Divorce Settlement',\n    },\n    {\n        text: localize('Inheritance'),\n        value: 'Inheritance',\n    },\n    {\n        text: localize('Investment Income'),\n        value: 'Investment Income',\n    },\n    {\n        text: localize('Sale of Property'),\n        value: 'Sale of Property',\n    },\n];\n\nexport const getEducationLevelList = () => [\n    {\n        text: localize('Primary'),\n        value: 'Primary',\n    },\n    {\n        text: localize('Secondary'),\n        value: 'Secondary',\n    },\n    {\n        text: localize('Tertiary'),\n        value: 'Tertiary',\n    },\n];\n\nexport const getNetIncomeList = () => [...getAccountTurnoverList()];\n\nexport const getEstimatedWorthList = () => [\n    {\n        text: localize('Less than $100,000'),\n        value: 'Less than $100,000',\n    },\n    {\n        text: localize('$100,000 - $250,000'),\n        value: '$100,000 - $250,000',\n    },\n    {\n        text: localize('$250,001 - $500,000'),\n        value: '$250,001 - $500,000',\n    },\n    {\n        text: localize('$500,001 - $1,000,000'),\n        value: '$500,001 - $1,000,000',\n    },\n    {\n        text: localize('Over $1,000,000'),\n        value: 'Over $1,000,000',\n    },\n];\n\nexport const getIncomeSourceList = () => [\n    {\n        text: localize('Salaried Employee'),\n        value: 'Salaried Employee',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Investments & Dividends'),\n        value: 'Investments & Dividends',\n    },\n    {\n        text: localize('Pension'),\n        value: 'Pension',\n    },\n    {\n        text: localize('State Benefits'),\n        value: 'State Benefits',\n    },\n    {\n        text: localize('Savings & Inheritance'),\n        value: 'Savings & Inheritance',\n    },\n];\n\nexport const getFormattedOccupationList = (employment_status?: string) =>\n    employment_status && employment_status === EMPLOYMENT_VALUES.EMPLOYED\n        ? getOccupationList().filter(item => item.value !== EMPLOYMENT_VALUES.UNEMPLOYED)\n        : getOccupationList();\n\nexport default financialDetailsConfig;\n","import { Field, FormikValues, useFormikContext } from 'formik';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper, Dropdown, SelectNative } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport {\n    getAccountTurnoverList,\n    getEducationLevelList,\n    getEmploymentIndustryList,\n    getEstimatedWorthList,\n    getIncomeSourceList,\n    getNetIncomeList,\n    getFormattedOccupationList,\n    getSourceOfWealthList,\n} from '../../Configs/financial-details-config';\nimport { EMPLOYMENT_VALUES } from '../../Constants/financial-details';\n\ntype TFinancialDetailsDropdownFieldProps = {\n    dropdown_list: Array<object>;\n    field_key: string;\n    placeholder?: string;\n    label: string;\n    employment_status?: string;\n};\n\ntype TFinancialInformationProps = {\n    employment_status?: string;\n};\n\n/**\n * Dropdown field for financial details form.\n * @name FinancialDetailsDropdownField\n * @param {Array<object>} dropdown_list - list of dropdown items\n * @param {string} field_key - field reference of the field\n * @param {string} placeholder - placeholder of the field\n * @param {string} label - label of the field\n *  @param {string} employment_status - selected employment_status,\n * @returns {JSX.Element}\n */\nconst FinancialDetailsDropdownField = ({\n    dropdown_list,\n    field_key,\n    placeholder = localize('Please select'),\n    label,\n}: TFinancialDetailsDropdownFieldProps) => {\n    const { values, handleChange, handleBlur, touched, errors, setFieldValue } = useFormikContext<{\n        [key: string]: string;\n    }>();\n\n    return (\n        <Field name={field_key}>\n            {({ field }: FormikValues) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Dropdown\n                            placeholder={label}\n                            is_align_text_left\n                            name={field.name}\n                            list={dropdown_list}\n                            value={values?.[field_key]}\n                            onChange={handleChange}\n                            handleBlur={handleBlur}\n                            error={touched?.[field_key] && errors?.[field_key]}\n                            list_portal_id='modal_root'\n                            required\n                            {...field}\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={placeholder}\n                            name={field.name}\n                            label={label}\n                            list_items={dropdown_list}\n                            value={values?.[field_key]}\n                            error={touched?.[field_key] && errors?.[field_key]}\n                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                handleChange(e);\n                                setFieldValue('field_key', e.target.value, true);\n                            }}\n                            required\n                            {...field}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n\nconst FinancialDetailsOccupationDropdownField = ({\n    dropdown_list,\n    field_key,\n    placeholder = localize('Please select'),\n    label,\n    employment_status,\n}: TFinancialDetailsDropdownFieldProps) => {\n    const { values, handleChange, handleBlur, touched, errors, setFieldValue } = useFormikContext<{\n        [key: string]: string;\n    }>();\n\n    const getFormattedOccupationValues = () =>\n        employment_status === EMPLOYMENT_VALUES.EMPLOYED && values?.occupation === EMPLOYMENT_VALUES.UNEMPLOYED\n            ? ''\n            : values?.occupation;\n\n    return (\n        <Field name={field_key}>\n            {({ field }: FormikValues) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Dropdown\n                            {...field}\n                            placeholder={label}\n                            is_align_text_left\n                            name={field.name}\n                            list={dropdown_list}\n                            value={getFormattedOccupationValues()}\n                            onChange={e => {\n                                setFieldValue(field_key, getFormattedOccupationValues(), true);\n                                handleChange(e);\n                            }}\n                            handleBlur={handleBlur}\n                            error={touched?.[field_key] && errors?.[field_key]}\n                            list_portal_id='modal_root'\n                            required\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            {...field}\n                            placeholder={placeholder}\n                            name={field.name}\n                            label={label}\n                            list_items={dropdown_list}\n                            value={getFormattedOccupationValues()}\n                            error={touched?.[field_key] && errors?.[field_key]}\n                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                setFieldValue(field_key, getFormattedOccupationValues(), true);\n                                handleChange(e);\n                            }}\n                            required\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n/**\n * Wrapper for financial details form fields.\n * @name FinancialInformation\n * @returns {JSX.Element}\n */\nconst FinancialInformation = ({ employment_status }: TFinancialInformationProps) => {\n    return (\n        <React.Fragment>\n            <FinancialDetailsDropdownField\n                dropdown_list={getIncomeSourceList()}\n                field_key='income_source'\n                label={localize('Source of income')}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getEmploymentIndustryList()}\n                field_key='employment_industry'\n                label={localize('Industry of employment')}\n            />\n            <FinancialDetailsOccupationDropdownField\n                dropdown_list={getFormattedOccupationList(employment_status)}\n                field_key='occupation'\n                label={localize('Occupation')}\n                employment_status={employment_status}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getSourceOfWealthList()}\n                field_key='source_of_wealth'\n                label={localize('Source of wealth')}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getEducationLevelList()}\n                field_key='education_level'\n                label={localize('Level of education')}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getNetIncomeList()}\n                field_key='net_income'\n                label={localize('Net annual income')}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getEstimatedWorthList()}\n                field_key='estimated_worth'\n                label={localize('Estimated net worth')}\n            />\n            <FinancialDetailsDropdownField\n                dropdown_list={getAccountTurnoverList()}\n                field_key='account_turnover'\n                label={localize('Anticipated annual turnover')}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default FinancialInformation;\n","import classNames from 'classnames';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport {\n    AutoHeightWrapper,\n    Div100vhContainer,\n    FormSubmitButton,\n    Modal,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { isDesktop, isMobile } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { EMPLOYMENT_VALUES } from '../../Constants/financial-details';\nimport FinancialInformation from './financial-details-partials';\nimport { splitValidationResultTypes } from '../real-account-signup/helpers/utils';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\ntype TFinancialDetailsFormValues = {\n    income_source: string;\n    employment_industry: string;\n    occupation: string;\n    source_of_wealth: string;\n    education_level: string;\n    net_income: string;\n    estimated_worth: string;\n    account_turnover: string;\n};\n\ntype TFinancialDetails = {\n    goToPreviousStep: () => void;\n    goToNextStep: () => void;\n    getCurrentStep: () => number;\n    onSave: (current_step: number, values: TFinancialDetailsFormValues) => void;\n    onSubmit: (\n        current_step: number,\n        values: TFinancialDetailsFormValues,\n        actions: (isSubmitting: boolean) => void,\n        props: () => void\n    ) => void;\n    onCancel: (current_step: number, props: () => void) => void;\n    validate: (values: TFinancialDetailsFormValues) => object;\n    is_eu_user: boolean;\n    value: TFinancialDetailsFormValues;\n    employment_status: string;\n};\n\n/**\n * A wrapper for the financial details form.\n * @name FinancialDetails\n * @param {TFinancialDetails} props  - props of the component\n * @returns {React.ReactNode} React component that renders FinancialDetails form.\n */\nconst FinancialDetails = observer((props: TFinancialDetails) => {\n    const handleCancel = (values: TFinancialDetailsFormValues) => {\n        const current_step = props.getCurrentStep() - 1;\n        props.onSave(current_step, values);\n        props.onCancel(current_step, props.goToPreviousStep);\n    };\n\n    const {\n        traders_hub: { is_eu_user },\n    } = useStore();\n\n    const handleValidate = (values: TFinancialDetailsFormValues) => {\n        const { errors } = splitValidationResultTypes(props.validate(values));\n        return errors;\n    };\n\n    const fields_to_scroll_top = isMobile()\n        ? ['income_source', 'account_turnover', 'estimated_worth']\n        : ['income_source'];\n    const fields_to_scroll_bottom = isMobile() ? [] : ['account_turnover', 'estimated_worth'];\n\n    return (\n        <Formik\n            initialValues={{ ...props.value }}\n            validate={handleValidate}\n            onSubmit={(values, actions) => {\n                props.onSubmit(props.getCurrentStep() - 1, values, actions.setSubmitting, props.goToNextStep);\n            }}\n            validateOnMount\n        >\n            {({ handleSubmit, isSubmitting, values }) => {\n                return (\n                    <AutoHeightWrapper default_height={200}>\n                        {({\n                            setRef,\n                            height,\n                        }: {\n                            setRef: (instance: HTMLFormElement) => void;\n                            height?: number | string;\n                        }) => (\n                            <form ref={setRef} onSubmit={handleSubmit} noValidate>\n                                <ScrollToFieldWithError\n                                    fields_to_scroll_top={fields_to_scroll_top}\n                                    fields_to_scroll_bottom={fields_to_scroll_bottom}\n                                />\n                                <Div100vhContainer\n                                    className={classNames('details-form', 'financial-assessment')}\n                                    height_offset='110px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    {is_eu_user ? (\n                                        <div className='details-form__banner-container'>\n                                            <InlineNoteWithIcon\n                                                icon='IcAlertWarning'\n                                                message={\n                                                    <Localize i18n_default_text='We collect information about your employment as part of our due diligence obligations, as required by anti-money laundering legislation.' />\n                                                }\n                                                title={localize('Why do we collect this?')}\n                                            />\n                                        </div>\n                                    ) : (\n                                        <Text\n                                            as='p'\n                                            color='prominent'\n                                            size='xxs'\n                                            className='trading-assessment__side-note'\n                                        >\n                                            <Localize i18n_default_text='We collect information about your employment as part of our due diligence obligations, as required by anti-money laundering legislation.' />\n                                        </Text>\n                                    )}\n                                    <ThemedScrollbars autohide={window.innerHeight >= 890} height={Number(height) - 77}>\n                                        <div\n                                            className={classNames(\n                                                'details-form__elements',\n                                                'financial-assessment__form'\n                                            )}\n                                        >\n                                            <FinancialInformation employment_status={props.employment_status} />\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer has_separator is_bypassed={isMobile()}>\n                                    <FormSubmitButton\n                                        is_disabled={\n                                            isSubmitting ||\n                                            !!(\n                                                props.employment_status === EMPLOYMENT_VALUES.EMPLOYED &&\n                                                values?.occupation === EMPLOYMENT_VALUES.UNEMPLOYED\n                                            )\n                                        }\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                        has_cancel\n                                        cancel_label={localize('Previous')}\n                                        onCancel={() => handleCancel(values)}\n                                    />\n                                </Modal.Footer>\n                            </form>\n                        )}\n                    </AutoHeightWrapper>\n                );\n            }}\n        </Formik>\n    );\n});\n\nexport default FinancialDetails;\n","import FinancialDetails from './financial-details';\n\nexport default FinancialDetails;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\n\nexport type TFormBodySection = {\n    /**\n     *  A boolean value indicating whether the section has a side note.\n     */\n    has_side_note?: boolean;\n    /**\n     * The side note to display next to the main content.\n     */\n    side_note?: string | React.ReactElement;\n    /**\n     * The position of the side note relative to the main content.\n     * @default 'left'\n     * */\n    side_note_position?: 'left' | 'right';\n    /**\n     * The type of the side note either it can be locaziled string (`localize or Localize`) component or image as JSX element.\n     * @default 'text'\n     * */\n    type?: 'text' | 'image';\n};\n\n/**\n *  A component that renders a form body section with an optional side note.\n *\n *  This component renders a section of a form body. It can optionally display a side note\n *  and allows reversing the order of the side note and the main content.\n *  @returns {JSX.Element} A React component that renders a form body section.\n */\nconst FormBodySection = ({\n    children,\n    has_side_note,\n    side_note,\n    side_note_position = 'left',\n    type = 'text',\n}: React.PropsWithChildren<TFormBodySection>): JSX.Element => {\n    if (has_side_note) {\n        return (\n            <div\n                data-testid='dt_side_note_container'\n                className={classNames('account-form__section', {\n                    'account-form__section--reversed': side_note_position === 'right',\n                })}\n            >\n                <div\n                    className={classNames('account-form__section-side-note', {\n                        'account-form__section-side-note__example': type !== 'text',\n                    })}\n                >\n                    {type === 'text' ? (\n                        <Text color='less-prominent' size={isMobile() ? 'xxs' : 'xs'} data-testid='dt_side_note_text'>\n                            {side_note}\n                        </Text>\n                    ) : (\n                        <React.Fragment>\n                            <Text as='p' size={isMobile() ? 'xxs' : 'xs'} weight='bold'>\n                                <Localize i18n_default_text='Example :' />\n                            </Text>\n                            <div className='account-form__section-side-note__example-image'>{side_note}</div>\n                        </React.Fragment>\n                    )}\n                </div>\n                <div className='account-form__section-content'>{children}</div>\n            </div>\n        );\n    }\n    return children as JSX.Element;\n};\n\nexport default FormBodySection;\n","import FormBodySection from './form-body-section';\n\nexport default FormBodySection;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { ThemedScrollbars } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\n\ntype TScrollbarsContainer = {\n    className?: string;\n    scroll_offset?: string;\n};\n\nexport const ScrollbarsContainer = ({\n    children,\n    className,\n    scroll_offset,\n}: React.PropsWithChildren<TScrollbarsContainer>) => (\n    <ThemedScrollbars is_bypassed={isMobile()} height={scroll_offset ? `calc(100% - ${scroll_offset})` : '100%'}>\n        <div\n            className={classNames('account__scrollbars_container', className)}\n            data-testid='dt_scrollbar_container_div'\n        >\n            {children}\n        </div>\n    </ThemedScrollbars>\n);\n","import { FormBody } from './form-body';\n\nexport default FormBody;\n","import React from 'react';\nimport { ScrollbarsContainer } from '../scrollbars-container/scrollbars-container';\nimport { Div100vhContainer, DesktopWrapper, MobileWrapper } from '@deriv/components';\nimport classNames from 'classnames';\n\ntype TFormBody = {\n    scroll_offset?: string;\n    className?: string;\n};\n\nexport const FormBody = ({ children, scroll_offset, className }: React.PropsWithChildren<TFormBody>) => (\n    <React.Fragment>\n        <DesktopWrapper>\n            <ScrollbarsContainer\n                className={classNames('account__scrollbars_container--grid-layout', className)}\n                scroll_offset={scroll_offset}\n            >\n                {children}\n            </ScrollbarsContainer>\n        </DesktopWrapper>\n        <MobileWrapper>\n            <Div100vhContainer\n                className={classNames('account__scrollbars_container--grid-layout', className)}\n                height_offset={scroll_offset || '200px'}\n            >\n                {children}\n            </Div100vhContainer>\n        </MobileWrapper>\n    </React.Fragment>\n);\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport type TFormFooter = {\n    className?: string;\n};\n\nconst FormFooter = ({ children, className }: React.PropsWithChildren<TFormFooter>) => (\n    <div className={classNames('account-form__footer', className)} data-testid='form-footer-container'>\n        {children}\n    </div>\n);\n\nexport default FormFooter;\n","import FormFooter from './form-footer';\n\nexport default FormFooter;\n","import { FormSubHeader } from './form-sub-header';\n\nexport default FormSubHeader;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\n\nexport type TFormSubHeader = {\n    description?: string;\n    subtitle?: string;\n    title: string;\n    title_text_size?: string;\n};\n\nexport const FormSubHeader = ({ description, subtitle, title, title_text_size = 'xs' }: TFormSubHeader) => {\n    const title_as_class = title.replace(/\\s+/g, '-').toLowerCase();\n\n    return (\n        <React.Fragment>\n            <div\n                className={classNames('account-form__header', title_as_class, {\n                    'account-form__header--has-description': !!description,\n                })}\n                data-testid='form-sub-header'\n            >\n                <div className='account-form__header-section'>\n                    <Text\n                        as='h1'\n                        color='prominent'\n                        weight='bold'\n                        size={title_text_size}\n                        className='account-form__title'\n                    >\n                        {title}\n                    </Text>\n                    {subtitle && (\n                        <Text as='h2' size='xxxs' color='prominent' className='account-form__subtitle'>\n                            {subtitle}\n                        </Text>\n                    )}\n                </div>\n            </div>\n            {description && (\n                <Text as='p' className='account-form__description'>\n                    {description}\n                </Text>\n            )}\n        </React.Fragment>\n    );\n};\n","import React from 'react';\nimport { FieldInputProps, FormikHelpers, FormikState, Field } from 'formik';\nimport { Input } from '@deriv/components';\n\ntype FormInputFieldProps = {\n    name: string;\n    optional?: boolean;\n    warn?: string;\n} & React.ComponentProps<typeof Input>;\n\ntype TFormInputFieldHelpers<T> = {\n    field: FieldInputProps<string>;\n    form: FormikHelpers<T> & FormikState<T>;\n};\n\n/**\n * FormInputField is a wrapper around Input that can be used with Formik.\n * @name FormInputField\n * @param name - Name of the field\n * @param [optional] - Whether the field is optional\n * @param [warn] - Display a warning message\n * @param [props] - Other props to pass to Input\n * @returns ReactNode\n */\nconst FormInputField = ({ name, warn, ...rest }: FormInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched } }: TFormInputFieldHelpers<Record<string, string>>) => (\n            <Input\n                {...field}\n                {...rest}\n                type='text'\n                autoComplete='off'\n                error={touched[field.name] && errors[field.name] ? errors[field.name] : undefined}\n                warn={warn}\n            />\n        )}\n    </Field>\n);\n\nexport default FormInputField;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { DateOfBirthPicker } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\n\ntype TDateOfBirthFieldProps = {\n    name: string;\n    portal_id: string;\n} & Omit<React.ComponentProps<typeof DateOfBirthPicker>, 'onBlur' | 'onChange' | 'error'>;\n\n/**\n * DateOfBirthField is a wrapper around DateOfBirthPicker that can be used with Formik.\n * @name DateOfBirthField\n * @param name - Name of the field\n * @param portal_id - Portal ID\n * @param [props] - Other props to pass to DateOfBirthPicker\n * @returns {React.ReactNode}\n */\nconst DateOfBirthField = ({ name, portal_id, ...rest }: TDateOfBirthFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { setFieldValue }, meta: { error, touched } }: FieldProps<string | moment.Moment>) => (\n            <DateOfBirthPicker\n                {...rest}\n                {...field}\n                error={touched ? error : undefined}\n                name={name}\n                onChange={({ target }: any) =>\n                    setFieldValue(name, target?.value ? toMoment(target.value).format('YYYY-MM-DD') : '', true)\n                }\n                portal_id={portal_id}\n            />\n        )}\n    </Field>\n);\n\nexport default DateOfBirthField;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field, FormikProps, FieldProps, useFormikContext } from 'formik';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Autocomplete, DesktopWrapper, Input, MobileWrapper, SelectNative } from '@deriv/components';\nimport { formatInput, getIDVNotApplicableOption } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport {\n    getDocumentData,\n    preventEmptyClipboardPaste,\n    generatePlaceholderText,\n    getExampleFormat,\n} from '../../Helpers/utils';\nimport { TDocument, TIDVFormValues } from '../../Types';\n\ntype TIDVFormProps = {\n    selected_country: ResidenceList[0];\n    hide_hint?: boolean;\n    class_name?: string;\n    can_skip_document_verification?: boolean;\n};\n\nconst IDVForm = ({\n    class_name,\n    selected_country,\n    hide_hint,\n    can_skip_document_verification = false,\n}: TIDVFormProps) => {\n    const [document_list, setDocumentList] = React.useState<Array<TDocument>>([]);\n    const [selected_doc, setSelectedDoc] = React.useState('');\n\n    const { documents_supported: document_data } = selected_country?.identity?.services?.idv ?? {};\n\n    const { errors, touched, values, handleBlur, handleChange, setFieldValue }: FormikProps<TIDVFormValues> =\n        useFormikContext();\n    const default_document = {\n        id: '',\n        text: '',\n        value: '',\n        example_format: '',\n    };\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n\n    React.useEffect(() => {\n        if (document_data && selected_country && selected_country.value) {\n            const document_types = Object.keys(document_data);\n            if (document_types.length === 0) return;\n            const filtered_documents = ['gh', 'ng'].includes(selected_country.value)\n                ? document_types.filter(d => d !== 'voter_id')\n                : document_types;\n\n            const new_document_list = filtered_documents.map(key => {\n                const { display_name, format } = document_data[key];\n                const { new_display_name, example_format, additional_document_example_format } = getDocumentData(\n                    selected_country.value ?? '',\n                    key\n                );\n                const needs_additional_document = !!document_data[key].additional;\n\n                if (needs_additional_document) {\n                    return {\n                        id: key,\n                        text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                        additional: {\n                            display_name: document_data[key].additional?.display_name,\n                            format: document_data[key].additional?.format,\n                            example_format: additional_document_example_format,\n                        },\n                        value: format,\n                        example_format,\n                    };\n                }\n                return {\n                    id: key,\n                    text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                    value: format,\n                    example_format,\n                };\n            });\n\n            if (can_skip_document_verification) {\n                setDocumentList([...new_document_list, IDV_NOT_APPLICABLE_OPTION]);\n            } else {\n                setDocumentList([...new_document_list]);\n            }\n        }\n    }, [document_data, selected_country, can_skip_document_verification, IDV_NOT_APPLICABLE_OPTION]);\n\n    const resetDocumentItemSelected = () => {\n        setFieldValue('document_type', default_document, true);\n    };\n\n    const getDocument = (text: string) => {\n        return document_list.find(d => d.text === text) ?? default_document;\n    };\n\n    const onKeyUp = (e: { target: HTMLInputElement }, document_name: string) => {\n        const example_format =\n            document_name === 'document_number'\n                ? values?.document_type?.example_format\n                : values?.document_type?.additional?.example_format;\n        let current_input: string | null = null;\n        current_input = example_format?.includes('-')\n            ? formatInput(example_format, current_input ?? e.target.value, '-')\n            : e.target.value;\n        setFieldValue(document_name, current_input, true);\n    };\n\n    const bindDocumentData = (item: TDocument) => {\n        setFieldValue('document_type', item, true);\n        setSelectedDoc(item?.id);\n        if (item?.id === IDV_NOT_APPLICABLE_OPTION.id) {\n            setFieldValue('document_number', '', true);\n            setFieldValue('document_additional', '', true);\n        }\n    };\n\n    return (\n        <section className={classNames('idv-form', class_name)}>\n            <div className='details-form'>\n                <div className='poi-form-on-signup__fields'>\n                    <div\n                        className={classNames('proof-of-identity__container', {\n                            'proof-of-identity__container--idv': hide_hint,\n                        })}\n                    >\n                        <div className={classNames('proof-of-identity__inner-container')}>\n                            <div className='proof-of-identity__fieldset-container'>\n                                <fieldset className={classNames({ 'proof-of-identity__fieldset': !hide_hint })}>\n                                    <Field name='document_type'>\n                                        {({ field }: FieldProps) => (\n                                            <React.Fragment>\n                                                <DesktopWrapper>\n                                                    <Autocomplete\n                                                        {...field}\n                                                        data-lpignore='true'\n                                                        error={touched.document_type && errors.document_type}\n                                                        autoComplete='off'\n                                                        type='text'\n                                                        label={localize('Choose the document type')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onBlur={(e: { target: HTMLInputElement }) => {\n                                                            handleBlur(e);\n                                                            if (!getDocument(e.target.value)) {\n                                                                resetDocumentItemSelected();\n                                                            }\n                                                        }}\n                                                        onChange={handleChange}\n                                                        onItemSelection={(item: TDocument) => {\n                                                            if (item.text === 'No results found' || !item.text) {\n                                                                setSelectedDoc('');\n                                                                resetDocumentItemSelected();\n                                                            } else {\n                                                                bindDocumentData(item);\n                                                            }\n                                                        }}\n                                                        required\n                                                    />\n                                                </DesktopWrapper>\n                                                <MobileWrapper>\n                                                    <SelectNative\n                                                        {...field}\n                                                        name='document_type'\n                                                        error={\n                                                            touched.document_type &&\n                                                            (errors.document_type as string | undefined)\n                                                        }\n                                                        label={localize('Choose the document type')}\n                                                        placeholder={localize('Please select')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onChange={e => {\n                                                            handleChange(e);\n                                                            const selected_document = getDocument(e.target.value);\n                                                            bindDocumentData(selected_document);\n                                                        }}\n                                                        use_text={true}\n                                                        required\n                                                    />\n                                                </MobileWrapper>\n                                            </React.Fragment>\n                                        )}\n                                    </Field>\n                                </fieldset>\n                                {values?.document_type?.id !== IDV_NOT_APPLICABLE_OPTION.id && (\n                                    <React.Fragment>\n                                        <fieldset\n                                            className={classNames('additional-field', {\n                                                'proof-of-identity__fieldset-input': !hide_hint,\n                                            })}\n                                        >\n                                            <Field name='document_number'>\n                                                {({ field }: FieldProps) => (\n                                                    <Input\n                                                        {...field}\n                                                        name='document_number'\n                                                        bottom_label={\n                                                            values.document_type &&\n                                                            getExampleFormat(values.document_type.example_format ?? '')\n                                                        }\n                                                        disabled={!values.document_type.id}\n                                                        error={\n                                                            (values.document_type.id &&\n                                                                touched.document_number &&\n                                                                errors.document_number) ||\n                                                            errors.error_message\n                                                        }\n                                                        autoComplete='off'\n                                                        placeholder={generatePlaceholderText(selected_doc)}\n                                                        value={values.document_number}\n                                                        onPaste={preventEmptyClipboardPaste}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                            onKeyUp(e, 'document_number')\n                                                        }\n                                                        required\n                                                        label={\n                                                            values.document_type.id &&\n                                                            generatePlaceholderText(selected_doc)\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                        </fieldset>\n                                        {values.document_type.additional?.display_name && (\n                                            <fieldset className='additional-field'>\n                                                <Field name='document_additional'>\n                                                    {({ field }: FieldProps) => {\n                                                        const additional_document_placeholder = localize(\n                                                            'Enter your {{document_name}}',\n                                                            {\n                                                                document_name:\n                                                                    values.document_type?.additional?.display_name?.toLowerCase() ??\n                                                                    localize('additional document number'),\n                                                            }\n                                                        );\n                                                        return (\n                                                            <Input\n                                                                {...field}\n                                                                name='document_additional'\n                                                                bottom_label={\n                                                                    values.document_type.additional &&\n                                                                    getExampleFormat(\n                                                                        values.document_type.additional?.example_format\n                                                                    )\n                                                                }\n                                                                disabled={!values.document_type.id}\n                                                                error={\n                                                                    (touched.document_additional &&\n                                                                        errors.document_additional) ||\n                                                                    errors.error_message\n                                                                }\n                                                                autoComplete='off'\n                                                                placeholder={additional_document_placeholder}\n                                                                value={values.document_additional}\n                                                                onPaste={preventEmptyClipboardPaste}\n                                                                onBlur={handleBlur}\n                                                                onChange={handleChange}\n                                                                onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                                    onKeyUp(e, 'document_additional')\n                                                                }\n                                                                required\n                                                            />\n                                                        );\n                                                    }}\n                                                </Field>\n                                            </fieldset>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default IDVForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Field, useFormikContext } from 'formik';\nimport {\n    Autocomplete,\n    Checkbox,\n    DesktopWrapper,\n    Dropdown,\n    InlineMessage,\n    MobileWrapper,\n    Popover,\n    RadioGroup,\n    SelectNative,\n    Text,\n} from '@deriv/components';\nimport { getLegalEntityName, isDesktop, isMobile, routes, validPhone } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { isFieldImmutable, verifyFields } from '../../Helpers/utils';\nimport { getEmploymentStatusList } from '../../Sections/Assessment/FinancialAssessment/financial-information-list';\nimport FormBodySection from '../form-body-section';\nimport { DateOfBirthField, FormInputField } from './form-fields';\nimport FormSubHeader from '../form-sub-header';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\nconst PersonalDetailsForm = props => {\n    const {\n        inline_note_text,\n        is_virtual,\n        is_eu_user,\n        is_svg,\n        is_rendered_for_idv,\n        editable_fields = [],\n        has_real_account,\n        residence_list,\n        is_fully_authenticated,\n        account_opening_reason_list,\n        closeRealAccountSignup,\n        salutation_list,\n        is_rendered_for_onfido,\n        is_qualified_for_poa,\n        should_close_tooltip,\n        setShouldCloseTooltip,\n        class_name,\n        states_list,\n        side_note,\n        no_confirmation_needed,\n        mismatch_status,\n    } = props;\n    const autocomplete_value = 'none';\n    // need to put this check related to DIEL clients\n    const is_svg_only = is_svg && !is_eu_user;\n\n    const [is_tax_residence_popover_open, setIsTaxResidencePopoverOpen] = React.useState(false);\n    const [is_tin_popover_open, setIsTinPopoverOpen] = React.useState(false);\n\n    const { errors, touched, values, setFieldValue, handleChange, handleBlur, setFieldTouched } = useFormikContext();\n\n    React.useEffect(() => {\n        if (should_close_tooltip) {\n            handleToolTipStatus();\n            setShouldCloseTooltip(false);\n        }\n    }, [should_close_tooltip, handleToolTipStatus, setShouldCloseTooltip]);\n\n    const getNameAndDobLabels = () => {\n        const is_asterisk_needed = is_svg || is_eu_user || is_rendered_for_onfido || is_rendered_for_idv;\n        const first_name_label = is_asterisk_needed ? localize('First name*') : localize('First name');\n        const last_name_label = is_asterisk_needed ? localize('Last name*') : localize('Last name');\n        const dob_label = is_asterisk_needed ? localize('Date of birth*') : localize('Date of birth');\n\n        return {\n            first_name_label,\n            last_name_label,\n            dob_label,\n        };\n    };\n\n    const is_rendered_for_idv_or_onfido = is_rendered_for_idv || is_rendered_for_onfido;\n\n    const getFieldHint = field_name =>\n        is_svg_only || is_rendered_for_idv_or_onfido ? (\n            <Localize\n                i18n_default_text={'Your {{ field_name }} as in your identity document'}\n                values={{ field_name }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text={'Please enter your {{ field_name }} as in your official identity documents.'}\n                values={{ field_name }}\n            />\n        );\n\n    const handleToolTipStatus = React.useCallback(() => {\n        if (is_tax_residence_popover_open) {\n            setIsTaxResidencePopoverOpen(false);\n        }\n        if (is_tin_popover_open) {\n            setIsTinPopoverOpen(false);\n        }\n    }, [is_tax_residence_popover_open, is_tin_popover_open]);\n\n    const handleSalutationSelection = event => {\n        if (event.target?.type === 'radio') {\n            setFieldValue('salutation', event.target?.value);\n        }\n    };\n\n    const poa_clarification_message = (\n        <Localize i18n_default_text='For faster verification, input the same address here as in your proof of address document (see section below)' />\n    );\n\n    // need to disable the checkbox if the user has not filled in the name and dob fields initially\n    const is_confirmation_checkbox_disabled = verifyFields(mismatch_status).some(\n        field => !values[field] || errors[field]\n    );\n\n    return (\n        <React.Fragment>\n            <div\n                className={classNames(class_name, {\n                    'account-form__poi-confirm-example': is_rendered_for_idv,\n                })}\n            >\n                {(is_svg_only || is_rendered_for_idv_or_onfido) && (\n                    <div className='account-form__poi-inline-message'>\n                        <InlineMessage message={inline_note_text} size='md' />\n                    </div>\n                )}\n                {is_qualified_for_poa && (\n                    <InlineNoteWithIcon\n                        icon='IcAlertWarning'\n                        message={poa_clarification_message}\n                        font_size={isMobile() ? 'xxxs' : 'xs'}\n                    />\n                )}\n                <FormBodySection\n                    has_side_note={is_rendered_for_idv_or_onfido || is_svg_only}\n                    side_note={side_note}\n                    side_note_position='right'\n                    type='image'\n                >\n                    <fieldset className='account-form__fieldset'>\n                        {'salutation' in values && !is_eu_user && (\n                            <div>\n                                <Text size={isMobile() ? 'xs' : 'xxs'} align={isMobile() && 'center'}>\n                                    {is_virtual ? (\n                                        localize(\n                                            'Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your account settings.'\n                                        )\n                                    ) : (\n                                        <Localize\n                                            i18n_default_text='Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your <0>account settings</0>.'\n                                            components={[\n                                                <Link\n                                                    to={routes.personal_details}\n                                                    key={0}\n                                                    className='link'\n                                                    onClick={closeRealAccountSignup}\n                                                />,\n                                            ]}\n                                        />\n                                    )}\n                                </Text>\n                            </div>\n                        )}\n                        {is_eu_user && !is_rendered_for_onfido && !is_qualified_for_poa && (\n                            <FormSubHeader\n                                title={'salutation' in values ? localize('Title and name') : localize('Name')}\n                            />\n                        )}\n                        {'salutation' in values && (\n                            <span onClick={handleSalutationSelection}>\n                                <RadioGroup\n                                    className='dc-radio__input'\n                                    name='salutation'\n                                    selected={values.salutation}\n                                    onToggle={e => {\n                                        e.persist();\n                                        setFieldValue('salutation', e.target.value);\n                                    }}\n                                    required\n                                >\n                                    {salutation_list.map(item => (\n                                        <RadioGroup.Item\n                                            key={item.value}\n                                            label={item.label}\n                                            value={item.value}\n                                            disabled={\n                                                !!values.salutation && isFieldImmutable('salutation', editable_fields)\n                                            }\n                                            has_error={!!(touched.salutation && errors.salutation)}\n                                        />\n                                    ))}\n                                </RadioGroup>\n                            </span>\n                        )}\n                        {'first_name' in values && (\n                            <FormInputField\n                                name='first_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().first_name_label}\n                                hint={getFieldHint(localize('first name'))}\n                                disabled={\n                                    isFieldImmutable('first_name', editable_fields) ||\n                                    (values?.first_name && has_real_account)\n                                }\n                                placeholder={localize('John')}\n                                data-testid='first_name'\n                            />\n                        )}\n                        {'last_name' in values && (\n                            <FormInputField\n                                name='last_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().last_name_label}\n                                hint={getFieldHint(localize('last name'))}\n                                disabled={\n                                    isFieldImmutable('last_name', editable_fields) ||\n                                    (values?.last_name && has_real_account)\n                                }\n                                placeholder={localize('Doe')}\n                                data-testid='last_name'\n                            />\n                        )}\n                        {is_eu_user && !is_qualified_for_poa && <FormSubHeader title={localize('Other details')} />}\n                        {'date_of_birth' in values && (\n                            <DateOfBirthField\n                                name='date_of_birth'\n                                required={is_svg}\n                                label={getNameAndDobLabels().dob_label}\n                                hint={getFieldHint(localize('date of birth'))}\n                                disabled={\n                                    isFieldImmutable('date_of_birth', editable_fields) ||\n                                    (values?.date_of_birth && has_real_account)\n                                }\n                                placeholder={localize('01-07-1999')}\n                                portal_id='modal_root'\n                                data_testid='date_of_birth'\n                            />\n                        )}\n                        {'address_line_1' in values && (\n                            <FormInputField\n                                name='address_line_1'\n                                label={localize('First line of address*')}\n                                disabled={isFieldImmutable('address_line_1', editable_fields)}\n                                data-testid='address_line_1'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.address_line_1 && errors.address_line_1}\n                                value={values.address_line_1}\n                            />\n                        )}\n                        {'address_line_2' in values && (\n                            <FormInputField\n                                name='address_line_2'\n                                label={localize('Second line of address (optional)')}\n                                disabled={isFieldImmutable('address_line_2', editable_fields)}\n                                data-testid='address_line_2'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.address_line_2 && errors.address_line_2}\n                                value={values.address_line_2}\n                            />\n                        )}\n                        {'address_city' in values && (\n                            <FormInputField\n                                name='address_city'\n                                label={localize('Town/City*')}\n                                disabled={isFieldImmutable('address_city', editable_fields)}\n                                data-testid='address_city'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.address_city && errors.address_city}\n                                value={values.address_city}\n                            />\n                        )}\n                        {'address_state' in values &&\n                            (states_list?.length ? (\n                                <React.Fragment>\n                                    <DesktopWrapper>\n                                        <Field name='address_state'>\n                                            {({ field }) => (\n                                                <Autocomplete\n                                                    {...field}\n                                                    data-lpignore='true'\n                                                    autoComplete='new-password' // prevent chrome autocomplete\n                                                    type='text'\n                                                    label={localize('State/Province')}\n                                                    error={touched.address_state && errors.address_state}\n                                                    list_items={states_list}\n                                                    onItemSelection={({ value, text }) =>\n                                                        setFieldValue('address_state', value ? text : '', true)\n                                                    }\n                                                />\n                                            )}\n                                        </Field>\n                                    </DesktopWrapper>\n                                    <MobileWrapper>\n                                        <SelectNative\n                                            placeholder={localize('Please select')}\n                                            label={localize('State/Province')}\n                                            value={values.address_state}\n                                            list_items={states_list}\n                                            error={touched.address_state && errors.address_state}\n                                            use_text\n                                            onChange={e => setFieldValue('address_state', e.target.value, true)}\n                                        />\n                                    </MobileWrapper>\n                                </React.Fragment>\n                            ) : (\n                                <FormInputField\n                                    data-lpignore='true'\n                                    autoComplete='off'\n                                    type='text'\n                                    name='address_state'\n                                    label={localize('State/Province')}\n                                    value={values.address_state}\n                                    error={touched.address_state && errors.address_state}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                            ))}\n                        {'address_postcode' in values && (\n                            <FormInputField\n                                name='address_postcode'\n                                label={localize('Postal/ZIP code')}\n                                disabled={isFieldImmutable('address_postcode', editable_fields)}\n                                data-testid='address_postcode'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                error={touched.address_postcode && errors.address_postcode}\n                                value={values.address_postcode}\n                            />\n                        )}\n                        {!is_svg_only && 'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'citizen' in values && (\n                            <Field name='citizen'>\n                                {({ field }) => (\n                                    <React.Fragment>\n                                        <DesktopWrapper>\n                                            <Autocomplete\n                                                {...field}\n                                                data-lpignore='true'\n                                                autoComplete={autocomplete_value} // prevent chrome autocomplete\n                                                type='text'\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                error={touched.citizen && errors.citizen}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                list_items={residence_list}\n                                                onItemSelection={({ value, text }) =>\n                                                    setFieldValue('citizen', value ? text : '', true)\n                                                }\n                                                list_portal_id='modal_root'\n                                                required\n                                                data-testid='citizenship'\n                                            />\n                                        </DesktopWrapper>\n                                        <MobileWrapper>\n                                            <SelectNative\n                                                placeholder={localize('Citizenship')}\n                                                name={field.name}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                list_items={residence_list}\n                                                value={values.citizen}\n                                                use_text\n                                                error={touched.citizen && errors.citizen}\n                                                onChange={e => {\n                                                    handleChange(e);\n                                                    setFieldValue('citizen', e.target.value, true);\n                                                }}\n                                                {...field}\n                                                required\n                                                should_hide_disabled_options={false}\n                                                data_testid='citizenship_mobile'\n                                            />\n                                        </MobileWrapper>\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        )}\n                        {!is_svg_only && 'phone' in values && (\n                            <PhoneField\n                                value={values.phone}\n                                editable_fields={editable_fields}\n                                has_real_account={has_real_account}\n                                required\n                            />\n                        )}\n                        {!is_svg_only && ('tax_residence' in values || 'tax_identification_number' in values) && (\n                            <React.Fragment>\n                                <FormSubHeader title={localize('Tax information')} />\n                                {'tax_residence' in values && (\n                                    <TaxResidenceField\n                                        setFieldValue={setFieldValue}\n                                        disabled={isFieldImmutable('tax_residence', editable_fields)}\n                                        residence_list={residence_list}\n                                        required\n                                        setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                                        setIsTinPopoverOpen={setIsTinPopoverOpen}\n                                        is_tax_residence_popover_open={is_tax_residence_popover_open}\n                                    />\n                                )}\n                                {'tax_identification_number' in values && (\n                                    <TaxIdentificationNumberField\n                                        is_tin_popover_open={is_tin_popover_open}\n                                        setIsTinPopoverOpen={setIsTinPopoverOpen}\n                                        setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                                        disabled={isFieldImmutable('tax_identification_number', editable_fields)}\n                                        required\n                                    />\n                                )}\n                                {'employment_status' in values && (\n                                    <fieldset className={classNames('account-form__fieldset', 'emp-status')}>\n                                        <DesktopWrapper>\n                                            <Dropdown\n                                                placeholder={\n                                                    is_eu_user\n                                                        ? localize('Employment status*')\n                                                        : localize('Employment status')\n                                                }\n                                                is_align_text_left\n                                                name='employment_status'\n                                                list={getEmploymentStatusList()}\n                                                value={values.employment_status}\n                                                onChange={handleChange}\n                                                handleBlur={handleBlur}\n                                                error={touched.employment_status && errors.employment_status}\n                                                disabled={isFieldImmutable('employment_status', editable_fields)}\n                                            />\n                                        </DesktopWrapper>\n                                        <MobileWrapper>\n                                            <SelectNative\n                                                placeholder={localize('Please select')}\n                                                name='employment_status'\n                                                label={\n                                                    is_eu_user\n                                                        ? localize('Employment status*')\n                                                        : localize('Employment status')\n                                                }\n                                                list_items={getEmploymentStatusList()}\n                                                value={values.employment_status}\n                                                error={touched.employment_status && errors.employment_status}\n                                                onChange={e => {\n                                                    setFieldTouched('employment_status', true);\n                                                    handleChange(e);\n                                                }}\n                                                disabled={isFieldImmutable('employment_status', editable_fields)}\n                                            />\n                                        </MobileWrapper>\n                                    </fieldset>\n                                )}\n                                {'tax_identification_confirm' in values && (\n                                    <Checkbox\n                                        name='tax_identification_confirm'\n                                        className='details-form__tin-confirm'\n                                        data-lpignore\n                                        onChange={() =>\n                                            setFieldValue(\n                                                'tax_identification_confirm',\n                                                !values.tax_identification_confirm,\n                                                true\n                                            )\n                                        }\n                                        value={values.tax_identification_confirm}\n                                        label={localize(\n                                            'I hereby confirm that the tax information I provided is true and complete. I will also inform {{legal_entity_name}} about any changes to this information.',\n                                            {\n                                                legal_entity_name: getLegalEntityName('maltainvest'),\n                                            }\n                                        )}\n                                        withTabIndex={0}\n                                        data-testid='tax_identification_confirm'\n                                        has_error={\n                                            !!(touched.tax_identification_confirm && errors.tax_identification_confirm)\n                                        }\n                                    />\n                                )}\n                            </React.Fragment>\n                        )}\n                        {!is_svg_only && 'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                required\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                            />\n                        )}\n                    </fieldset>\n                </FormBodySection>\n                {!no_confirmation_needed && is_rendered_for_idv && (\n                    <Checkbox\n                        name='confirmation_checkbox'\n                        className='formik__confirmation-checkbox'\n                        value={values.confirmation_checkbox}\n                        label={\n                            <Localize i18n_default_text='I confirm that the name and date of birth above match my chosen identity document' />\n                        }\n                        label_font_size={isMobile() ? 'xxs' : 'xs'}\n                        disabled={is_confirmation_checkbox_disabled}\n                        onChange={handleChange}\n                        has_error={!!(touched.confirmation_checkbox && errors.confirmation_checkbox)}\n                    />\n                )}\n            </div>\n\n            {is_svg_only && (\n                <div className='account-form__poi-additional-information'>\n                    <FormSubHeader title={localize('Additional information')} />\n                    {'phone' in values && (\n                        <PhoneField\n                            value={values.phone}\n                            editable_fields={editable_fields}\n                            has_real_account={has_real_account}\n                            required\n                        />\n                    )}\n                    <React.Fragment>\n                        {'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'tax_residence' in values && (\n                            <TaxResidenceField\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('tax_residence', editable_fields)}\n                                residence_list={residence_list}\n                                setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                                setIsTinPopoverOpen={setIsTinPopoverOpen}\n                                is_tax_residence_popover_open={is_tax_residence_popover_open}\n                            />\n                        )}\n                        {'tax_identification_number' in values && (\n                            <TaxIdentificationNumberField\n                                is_tin_popover_open={is_tin_popover_open}\n                                setIsTinPopoverOpen={setIsTinPopoverOpen}\n                                setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                                disabled={isFieldImmutable('tax_identification_number', editable_fields)}\n                            />\n                        )}\n                        {'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                no_header\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                                required\n                            />\n                        )}\n                    </React.Fragment>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default PersonalDetailsForm;\n\nconst PhoneField = ({ value, editable_fields, has_real_account, required }) => (\n    <FormInputField\n        name='phone'\n        label={required ? localize('Phone number*') : localize('Phone number')}\n        placeholder={required ? localize('Phone number*') : localize('Phone number')}\n        disabled={\n            isFieldImmutable('phone', editable_fields) ||\n            (value && has_real_account && validPhone(value) && value?.length >= 9 && value?.length <= 35)\n        }\n        maxLength={50}\n        data-testid='phone'\n    />\n);\n\nconst PlaceOfBirthField = ({ handleChange, setFieldValue, disabled, residence_list, required }) => (\n    <Field name='place_of_birth'>\n        {({ field, meta }) => (\n            <React.Fragment>\n                <DesktopWrapper>\n                    <Autocomplete\n                        {...field}\n                        disabled={disabled}\n                        data-lpignore='true'\n                        autoComplete='none' // prevent chrome autocomplete\n                        type='text'\n                        label={required ? localize('Place of birth*') : localize('Place of birth')}\n                        error={meta.touched && meta.error}\n                        list_items={residence_list}\n                        onItemSelection={({ value, text }) => setFieldValue('place_of_birth', value ? text : '', true)}\n                        required\n                        data-testid='place_of_birth'\n                    />\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <SelectNative\n                        placeholder={required ? localize('Place of birth') : localize('Place of birth')}\n                        name={field.name}\n                        disabled={disabled}\n                        label={required ? localize('Place of birth*') : localize('Place of birth')}\n                        list_items={residence_list}\n                        value={field.value}\n                        use_text\n                        error={meta.touched && meta.error}\n                        onChange={e => {\n                            handleChange(e);\n                            setFieldValue('place_of_birth', e.target.value, true);\n                        }}\n                        {...field}\n                        list_portal_id='modal_root'\n                        required\n                        should_hide_disabled_options={false}\n                        data_testid='place_of_birth_mobile'\n                    />\n                </MobileWrapper>\n            </React.Fragment>\n        )}\n    </Field>\n);\n\nconst TaxResidenceField = ({\n    setFieldValue,\n    residence_list,\n    required = false,\n    setIsTaxResidencePopoverOpen,\n    setIsTinPopoverOpen,\n    is_tax_residence_popover_open,\n    disabled,\n}) => (\n    <Field name='tax_residence'>\n        {({ field, meta }) => (\n            <div className='details-form__tax'>\n                <DesktopWrapper>\n                    <Autocomplete\n                        {...field}\n                        data-lpignore='true'\n                        autoComplete='none' // prevent chrome autocomplete\n                        type='text'\n                        label={required ? localize('Tax residence*') : localize('Tax residence')}\n                        error={meta.touched && meta.error}\n                        list_items={residence_list}\n                        onItemSelection={({ value, text }) => setFieldValue('tax_residence', value ? text : '', true)}\n                        list_portal_id='modal_root'\n                        data-testid='tax_residence'\n                        disabled={disabled}\n                        required={required}\n                    />\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <SelectNative\n                        placeholder={required ? localize('Tax residence*') : localize('Tax residence')}\n                        name={field.name}\n                        label={required ? localize('Tax residence*') : localize('Tax residence')}\n                        list_items={residence_list}\n                        value={field.value}\n                        use_text\n                        error={meta.touched && meta.error}\n                        onChange={e => {\n                            field.onChange(e);\n                            setFieldValue('tax_residence', e.target.value, true);\n                        }}\n                        {...field}\n                        required={required}\n                        data_testid='tax_residence_mobile'\n                        disabled={disabled}\n                    />\n                </MobileWrapper>\n                <div\n                    data-testid='tax_residence_pop_over'\n                    onClick={e => {\n                        setIsTaxResidencePopoverOpen(true);\n                        setIsTinPopoverOpen(false);\n                        e.stopPropagation();\n                    }}\n                >\n                    <Popover\n                        alignment={isDesktop() ? 'right' : 'left'}\n                        icon='info'\n                        message={localize(\n                            'The country in which you meet the criteria for paying taxes. Usually the country in which you physically reside.'\n                        )}\n                        zIndex={9998}\n                        disable_message_icon\n                        is_open={is_tax_residence_popover_open}\n                    />\n                </div>\n            </div>\n        )}\n    </Field>\n);\n\nconst TaxIdentificationNumberField = ({\n    is_tin_popover_open,\n    setIsTinPopoverOpen,\n    setIsTaxResidencePopoverOpen,\n    disabled,\n    required = false,\n}) => (\n    <div className='details-form__tax'>\n        <FormInputField\n            name='tax_identification_number'\n            label={required ? localize('Tax Identification Number*') : localize('Tax Identification Number')}\n            placeholder={localize('Tax Identification Number')}\n            data-testid='tax_identification_number'\n            disabled={disabled}\n            required={required}\n        />\n        <div\n            data-testid='tax_identification_number_pop_over'\n            onClick={e => {\n                setIsTaxResidencePopoverOpen(false);\n                setIsTinPopoverOpen(true);\n                if (e.target.tagName !== 'A') e.stopPropagation();\n            }}\n        >\n            <Popover\n                alignment={isDesktop() ? 'right' : 'left'}\n                icon='info'\n                is_open={is_tin_popover_open}\n                message={\n                    <Localize\n                        i18n_default_text={\n                            \"Don't know your tax identification number? Click <0>here</0> to learn more.\"\n                        }\n                        components={[\n                            <a\n                                key={0}\n                                className='link link--red'\n                                rel='noopener noreferrer'\n                                target='_blank'\n                                href='https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/'\n                            />,\n                        ]}\n                    />\n                }\n                zIndex={9998}\n                disable_message_icon\n            />\n        </div>\n    </div>\n);\n\nconst AccountOpeningReasonField = ({ no_header, required, account_opening_reason_list, setFieldValue, disabled }) => (\n    <React.Fragment>\n        {!no_header && <FormSubHeader title={localize('Account opening reason')} />}\n        <Field name='account_opening_reason'>\n            {({ field, meta }) => (\n                <React.Fragment>\n                    <DesktopWrapper>\n                        <Dropdown\n                            placeholder={\n                                required ? localize('Account opening reason*') : localize('Account opening reason')\n                            }\n                            name={field.name}\n                            disabled={disabled}\n                            is_align_text_left\n                            list={account_opening_reason_list}\n                            {...field}\n                            error={meta.touched && meta.error}\n                            list_portal_id='modal_root'\n                            required\n                        />\n                    </DesktopWrapper>\n                    <MobileWrapper>\n                        <SelectNative\n                            placeholder={localize('Please select')}\n                            name={field.name}\n                            label={required ? localize('Account opening reason*') : localize('Account opening reason')}\n                            list_items={account_opening_reason_list}\n                            error={meta.touched && meta.error}\n                            onChange={e => {\n                                field.onChange(e);\n                                setFieldValue('account_opening_reason', e.target.value, true);\n                            }}\n                            {...field}\n                            required\n                            data_testid='account_opening_reason_mobile'\n                            disabled={disabled}\n                        />\n                    </MobileWrapper>\n                </React.Fragment>\n            )}\n        </Field>\n    </React.Fragment>\n);\n","import React from 'react';\nimport { useFormikContext } from 'formik';\n\ntype TScrollToFieldWithError = {\n    fields_to_scroll_top?: string[];\n    fields_to_scroll_bottom?: string[];\n    should_recollect_inputs_names?: boolean;\n};\n\nconst ScrollToFieldWithError = ({\n    fields_to_scroll_top,\n    fields_to_scroll_bottom,\n    should_recollect_inputs_names = false,\n}: TScrollToFieldWithError) => {\n    const [all_page_inputs_names, setAllPageInputsNames] = React.useState<string[]>([]);\n    const { errors, isSubmitting } = useFormikContext();\n    const scrollToElement = (element_name: string, block: ScrollLogicalPosition = 'center') => {\n        if (!element_name) return;\n        const el = document.querySelector(`[name=\"${element_name}\"]`) as HTMLInputElement;\n        const target_element = el?.parentElement ?? el;\n        if (typeof target_element?.scrollIntoView === 'function') {\n            target_element?.scrollIntoView({ behavior: 'smooth', block });\n        }\n        if (el?.type !== 'radio') el?.focus();\n    };\n\n    React.useEffect(() => {\n        const inputs = [...document.querySelectorAll('input, select')] as HTMLInputElement[];\n        setAllPageInputsNames(inputs.map(input => input.name));\n    }, [should_recollect_inputs_names]);\n    React.useEffect(() => {\n        const current_error_field_name =\n            all_page_inputs_names.find(input_name => Object.prototype.hasOwnProperty.call(errors, input_name)) || '';\n\n        if (fields_to_scroll_top?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'start');\n        } else if (fields_to_scroll_bottom?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'end');\n        } else {\n            scrollToElement(current_error_field_name);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isSubmitting]);\n\n    return null;\n};\n\nexport default ScrollToFieldWithError;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Div100vhContainer, Text } from '@deriv/components';\nimport { isDesktop } from '@deriv/shared';\n\ntype TIconMessageContent = {\n    className?: string;\n    full_width?: boolean;\n    icon: React.ReactElement;\n    is_disabled_for_mobile?: boolean;\n    message: React.ReactNode;\n    text?: string | React.ReactElement;\n};\n\nconst IconMessageContent = ({\n    children,\n    className,\n    full_width,\n    icon,\n    is_disabled_for_mobile = false,\n    message,\n    text,\n}: React.PropsWithChildren<TIconMessageContent>) => (\n    <Div100vhContainer\n        className={classNames('account-management__message-wrapper', {\n            'account-management__message-wrapper-full-width': full_width,\n        })}\n        is_disabled={isDesktop() || is_disabled_for_mobile}\n        height_offset='110px'\n    >\n        <div\n            className={classNames('account-management__message-content', {\n                [`${className}__message-content`]: className,\n            })}\n        >\n            {icon && (\n                <div\n                    className={classNames('account-management__message-icon', {\n                        [`${className}__message-icon`]: className,\n                    })}\n                >\n                    {icon}\n                </div>\n            )}\n            <Text\n                as='div'\n                color='general'\n                weight='bold'\n                size='s'\n                align='center'\n                className={classNames('account-management__message', {\n                    [`${className}__message`]: className,\n                })}\n            >\n                {message}\n            </Text>\n            {text && (\n                <div className='account-management__text-container'>\n                    <Text\n                        className={classNames({\n                            [`${className}__text`]: className,\n                        })}\n                        as='p'\n                        size='xs'\n                        align='center'\n                    >\n                        {text}\n                    </Text>\n                </div>\n            )}\n            {children}\n        </div>\n    </Div100vhContainer>\n);\n\nexport default IconMessageContent;\n","import IconMessageContent from './icon-message-content';\n\nexport default IconMessageContent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TInlineNoteWithIconExtend = {\n    icon?: string;\n    font_size?: string;\n    message: React.ReactNode;\n    title?: string;\n};\n\nconst InlineNoteWithIcon = ({ icon, message, font_size = 'xxxs', title }: TInlineNoteWithIconExtend) => {\n    return (\n        <div className='da-inline-note-with-icon'>\n            {icon && (\n                <div>\n                    <Icon icon={icon} size={16} />\n                </div>\n            )}\n            <Text as='p' size={font_size} line_height='s'>\n                {title && <strong> {title} </strong>}\n                {message}\n            </Text>\n        </div>\n    );\n};\n\nexport default InlineNoteWithIcon;\n","import InlineNoteWithIcon from './inline-note-with-icon';\nimport './inline-note-with-icon.scss';\n\nexport default InlineNoteWithIcon;\n","import React from 'react';\nimport { RouteComponentProps, useHistory, withRouter } from 'react-router-dom';\nimport { FormikConsumer } from 'formik';\nimport { Button, Icon, Modal } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\n\ntype TLeaveConfirmMessage = {\n    back: () => void;\n    leave: () => void;\n};\n\ntype TTransitionBlocker = RouteComponentProps & {\n    dirty: boolean;\n    onDirty?: (prop: boolean) => void;\n};\n\nconst LeaveConfirmMessage = ({ back, leave }: TLeaveConfirmMessage) => {\n    return (\n        <IconMessageContent\n            className='leave-confirm'\n            message={localize('Unsaved changes')}\n            text={localize('You have unsaved changes. Are you sure you want to discard changes and leave this page?')}\n            icon={<Icon icon='IcUnsavedChanges' size={isMobile() ? 93 : 128} data_testid='dt_unsaved_changes_icon' />}\n        >\n            <div className='account-management-flex-wrapper account-management-leave-confirm'>\n                <Button\n                    type='button'\n                    has_effect\n                    onClick={back}\n                    text={localize('Cancel')}\n                    secondary\n                    {...(isMobile() ? { large: true } : {})}\n                />\n                <Button\n                    type='button'\n                    has_effect\n                    onClick={leave}\n                    text={localize('Leave Settings')}\n                    primary\n                    {...(isMobile() ? { large: true } : {})}\n                />\n            </div>\n        </IconMessageContent>\n    );\n};\n/**\n * Blocks routing if Formik form is dirty\n * Has to be a child of <Formik> for FormikConsumer to work\n */\nexport const TransitionBlocker = ({ dirty, onDirty }: TTransitionBlocker) => {\n    const [show, setShow] = React.useState(false);\n    const [next_location, setNextLocation] = React.useState<{ pathname: string } | null>(null);\n    const history = useHistory();\n\n    React.useEffect(() => {\n        return () => unblock();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const unblock = history.block((location: { pathname: string }) => {\n        if (dirty) {\n            if (onDirty) onDirty(false);\n\n            if (show) leave();\n\n            setShow(true);\n            setNextLocation(location);\n        }\n        return !dirty;\n    });\n\n    const leave = () => {\n        if (next_location?.pathname) {\n            const { pathname } = next_location;\n            unblock();\n            history.push(pathname);\n        } else history.push(null);\n    };\n\n    const back = () => {\n        setNextLocation(null);\n        setShow(false);\n        if (onDirty) onDirty(true);\n    };\n\n    return (\n        <>\n            {show && isMobile() ? (\n                <LeaveConfirmMessage back={back} leave={leave} />\n            ) : (\n                <Modal is_open={show} small toggleModal={back}>\n                    <Modal.Body>\n                        <LeaveConfirmMessage back={back} leave={leave} />\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\nexport const TransitionBlockerWithRouter = withRouter(TransitionBlocker);\n\nconst LeaveConfirm = ({ onDirty }: { onDirty?: (prop: boolean) => void }) => (\n    <FormikConsumer>\n        {formik => <TransitionBlockerWithRouter onDirty={onDirty} dirty={formik.dirty && formik.submitCount === 0} />}\n    </FormikConsumer>\n);\n\nexport default LeaveConfirm;\n","import LeaveConfirm from './leave-confirm';\n\nexport default LeaveConfirm;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport IconMessageContent from '../icon-message-content';\n\ntype TLoadErrorMessage = {\n    error_message: React.ReactNode;\n};\n\nconst LoadErrorMessage = ({ error_message }: TLoadErrorMessage) => (\n    <IconMessageContent message={error_message} icon={<Icon icon='IcPoaLock' size={128} />} />\n);\n\nexport default LoadErrorMessage;\n","import LoadErrorMessage from './load-error-message';\n\nexport default LoadErrorMessage;\n","import React from 'react';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\nimport classNames from 'classnames';\nimport { Form, Formik } from 'formik';\nimport {\n    AutoHeightWrapper,\n    Div100vhContainer,\n    FormSubmitButton,\n    Modal,\n    Text,\n    ThemedScrollbars,\n} from '@deriv/components';\nimport { getIDVNotApplicableOption, isDesktop, isMobile, removeEmptyPropertiesFromObject } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    shouldShowIdentityInformation,\n} from '../../Helpers/utils';\nimport PoiNameDobExample from '../../Assets/ic-poi-name-dob-example.svg';\nimport FormSubHeader from '../form-sub-header';\nimport IDVForm from '../forms/idv-form';\nimport PersonalDetailsForm from '../forms/personal-details-form';\nimport { splitValidationResultTypes } from '../real-account-signup/helpers/utils';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport { useStore, observer } from '@deriv/stores';\nimport { Analytics } from '@deriv/analytics';\n\nconst PersonalDetails = observer(\n    ({\n        getCurrentStep,\n        onSave,\n        onCancel,\n        onSubmit,\n        goToPreviousStep,\n        goToNextStep,\n        validate,\n        salutation_list,\n        disabled_items,\n        is_svg,\n        residence_list,\n        is_virtual,\n        is_fully_authenticated,\n        account_opening_reason_list,\n        closeRealAccountSignup,\n        has_real_account,\n        ...props\n    }) => {\n        const {\n            traders_hub: { is_eu_user },\n        } = useStore();\n        const { account_status, account_settings, residence, real_account_signup_target } = props;\n        const [should_close_tooltip, setShouldCloseTooltip] = React.useState(false);\n        const [no_confirmation_needed, setNoConfirmationNeeded] = React.useState(false);\n\n        const PoiNameDobExampleIcon = PoiNameDobExample;\n\n        const handleCancel = values => {\n            const current_step = getCurrentStep() - 1;\n            onSave(current_step, values);\n            onCancel(current_step, goToPreviousStep);\n        };\n        const citizen = residence || account_settings?.citizen;\n\n        const trackEvent = React.useCallback(\n            payload => {\n                if (is_eu_user) return;\n                Analytics.trackEvent('ce_real_account_signup_identity_form', {\n                    ...payload,\n                    step_codename: 'identity',\n                    landing_company: real_account_signup_target,\n                });\n            },\n            [is_eu_user, real_account_signup_target]\n        );\n\n        React.useEffect(() => {\n            trackEvent({\n                action: 'open',\n            });\n\n            return () =>\n                trackEvent({\n                    action: 'close',\n                });\n        }, [trackEvent]);\n\n        //is_rendered_for_idv is used for configuring the components when they are used in idv page\n        const is_rendered_for_idv = shouldShowIdentityInformation({\n            account_status,\n            citizen,\n            residence_list,\n            real_account_signup_target,\n        });\n\n        const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n\n        const validateIDV = values => {\n            const errors = {};\n            const { document_type, document_number, document_additional } = values;\n            if (document_type.id === IDV_NOT_APPLICABLE_OPTION.id) return errors;\n\n            errors.document_type = isDocumentTypeValid(document_type);\n\n            const needs_additional_document = !!document_type.additional;\n\n            if (needs_additional_document) {\n                errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n            }\n\n            errors.document_number = isDocumentNumberValid(document_number, document_type);\n\n            if (document_type.id !== IDV_NOT_APPLICABLE_OPTION.id && !values.confirmation_checkbox) {\n                errors.confirmation_checkbox = 'error';\n            }\n            return removeEmptyPropertiesFromObject(errors);\n        };\n\n        const handleValidate = values => {\n            setNoConfirmationNeeded(values?.document_type?.id === IDV_NOT_APPLICABLE_OPTION.id);\n            let idv_error = {};\n            if (is_rendered_for_idv) {\n                idv_error = validateIDV(values);\n            }\n            const { errors } = splitValidationResultTypes(validate(values));\n            const error_data = { ...idv_error, ...errors };\n            return error_data;\n        };\n\n        const closeToolTip = () => setShouldCloseTooltip(true);\n\n        /*\n    In most modern browsers, setting autocomplete to \"off\" will not prevent a password manager from asking the user if they would like to save username and password information, or from automatically filling in those values in a site's login form.\n    check this link https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#the_autocomplete_attribute_and_login_fields\n    */\n        // for dropdowns use 'none'\n\n        const selected_country = residence_list.find(residence_data => residence_data.value === citizen) || {};\n\n        const getEditableFields = (is_confirmed, selected_document_type_id) => {\n            const editable_fields = Object.keys(props.value).filter(field => !disabled_items.includes(field)) || [];\n\n            if (IDV_NOT_APPLICABLE_OPTION.id === selected_document_type_id) return editable_fields;\n\n            if (is_confirmed && is_rendered_for_idv) {\n                return editable_fields.filter(field => !['first_name', 'last_name', 'date_of_birth'].includes(field));\n            }\n\n            return editable_fields;\n        };\n\n        return (\n            <Formik\n                initialValues={{ ...props.value }}\n                validate={handleValidate}\n                validateOnMount\n                enableReinitialize\n                onSubmit={(values, actions) => {\n                    trackEvent({\n                        action: 'save',\n                        user_choice: JSON.stringify(values),\n                    });\n                    onSubmit(getCurrentStep() - 1, values, actions.setSubmitting, goToNextStep);\n                }}\n            >\n                {({ handleSubmit, isSubmitting, values }) => (\n                    <AutoHeightWrapper default_height={380} height_offset={isDesktop() ? 81 : null}>\n                        {({ setRef, height }) => (\n                            <Form\n                                noValidate\n                                ref={setRef}\n                                onSubmit={handleSubmit}\n                                autoComplete='off'\n                                onClick={closeToolTip}\n                                data-testid='personal_details_form'\n                            >\n                                <ScrollToFieldWithError\n                                    fields_to_scroll_bottom={isMobile() ? '' : ['account_opening_reason']}\n                                    fields_to_scroll_top={isMobile() ? ['account_opening_reason'] : ''}\n                                    should_recollect_inputs_names={\n                                        values?.document_type?.id === IDV_NOT_APPLICABLE_OPTION.id\n                                    }\n                                />\n                                <Div100vhContainer\n                                    className='details-form'\n                                    height_offset='100px'\n                                    is_disabled={isDesktop()}\n                                >\n                                    {is_eu_user && (\n                                        <div className='details-form__banner-container'>\n                                            <InlineNoteWithIcon\n                                                icon='IcAlertWarning'\n                                                message={\n                                                    <Localize i18n_default_text='For verification purposes as required by regulation. It’s your responsibility to provide accurate and complete answers. You can update personal details at any time in your account settings.' />\n                                                }\n                                                title={localize('Why do we collect this?')}\n                                            />\n                                        </div>\n                                    )}\n                                    {!is_eu_user && !is_rendered_for_idv && (\n                                        <Text as='p' size='xxxs' align='center' className='details-form__description'>\n                                            <Localize\n                                                i18n_default_text={\n                                                    'Any information you provide is confidential and will be used for verification purposes only.'\n                                                }\n                                            />\n                                        </Text>\n                                    )}\n                                    <ThemedScrollbars\n                                        height={height}\n                                        onScroll={closeToolTip}\n                                        testId='dt_personal_details_container'\n                                    >\n                                        <div\n                                            className={classNames('details-form__elements', 'personal-details-form')}\n                                            style={{ paddingBottom: isDesktop() ? 'unset' : null }}\n                                        >\n                                            {is_rendered_for_idv && (\n                                                <React.Fragment>\n                                                    <FormSubHeader title={localize('Identity verification')} />\n                                                    <IDVForm\n                                                        selected_country={selected_country}\n                                                        hide_hint={true}\n                                                        can_skip_document_verification={true}\n                                                    />\n                                                </React.Fragment>\n                                            )}\n                                            {is_svg && !is_eu_user && <FormSubHeader title={localize('Details')} />}\n                                            <PersonalDetailsForm\n                                                class_name={classNames({\n                                                    'account-form__poi-confirm-example_container':\n                                                        is_svg && !is_eu_user,\n                                                })}\n                                                is_virtual={is_virtual}\n                                                is_svg={is_svg}\n                                                is_eu_user={is_eu_user}\n                                                side_note={<PoiNameDobExampleIcon />}\n                                                is_rendered_for_idv={is_rendered_for_idv}\n                                                editable_fields={getEditableFields(\n                                                    values.confirmation_checkbox,\n                                                    values?.document_type?.id\n                                                )}\n                                                residence_list={residence_list}\n                                                has_real_account={has_real_account}\n                                                is_fully_authenticated={is_fully_authenticated}\n                                                closeRealAccountSignup={closeRealAccountSignup}\n                                                salutation_list={salutation_list}\n                                                account_opening_reason_list={account_opening_reason_list}\n                                                should_close_tooltip={should_close_tooltip}\n                                                setShouldCloseTooltip={setShouldCloseTooltip}\n                                                inline_note_text={\n                                                    <Localize\n                                                        i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                                        components={[<strong key={0} />]}\n                                                    />\n                                                }\n                                                no_confirmation_needed={no_confirmation_needed}\n                                            />\n                                        </div>\n                                    </ThemedScrollbars>\n                                </Div100vhContainer>\n                                <Modal.Footer has_separator is_bypassed={isMobile()}>\n                                    <FormSubmitButton\n                                        cancel_label={localize('Previous')}\n                                        has_cancel\n                                        is_disabled={isSubmitting}\n                                        is_absolute={isMobile()}\n                                        label={localize('Next')}\n                                        onCancel={() => handleCancel(values)}\n                                    />\n                                </Modal.Footer>\n                            </Form>\n                        )}\n                    </AutoHeightWrapper>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default PersonalDetails;\n","import PersonalDetails from './personal-details.jsx';\n\nexport default PersonalDetails;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { getExampleImagesConfig } from '../../../Configs/poa-common-mistake-examples-config';\nimport IcErrorBadge from '../../../Assets/ic-error-badge.svg';\nimport './common-mistake-examples.scss';\n\ntype TCommonMistakeExamplePartialsProps = {\n    description: JSX.Element;\n    image: React.ReactElement;\n};\n\n/**\n * Wrapper for displaying the image and description of the mistake\n * @name CommonMistakeExamplePartials\n * @param description - description of the mistake\n * @param image - Sample image\n * @returns  React.ReactElement\n */\nconst CommonMistakeExamplePartials = ({ description, image }: TCommonMistakeExamplePartialsProps) => (\n    <div className='common-mistake-examples__content-layout'>\n        {image}\n        <div className='common-mistake-examples__content-description'>\n            <IcErrorBadge />\n            <Text size='xxxs' line_height='s' role='document'>\n                {description}\n            </Text>\n        </div>\n    </div>\n);\n\n/**\n * Displays the image and description of the mistake\n * @returns React.ReactElement\n */\nconst CommonMistakeExamples = () => {\n    const example_images = getExampleImagesConfig();\n    return (\n        <React.Fragment>\n            <Text as='div' weight='bold' size={isMobile() ? 'xxs' : 'xs'} className='common-mistake-examples__title'>\n                <Localize i18n_default_text='Common mistakes' />\n            </Text>\n            <div className='common-mistake-examples__content'>\n                {example_images.map(config => (\n                    <CommonMistakeExamplePartials\n                        key={config.ref}\n                        description={config.description}\n                        image={<config.image />}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CommonMistakeExamples;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\nimport IcDocumentNameMismatch from '../Assets/ic-document-name-mismatch.svg';\nimport IcDocumentAddressMismatch from '../Assets/ic-document-address-mismatch.svg';\nimport IcOldIssuedDocument from '../Assets/ic-old-issued-document.svg';\nimport IcBlurryDocument from '../Assets/ic-blurry-document.svg';\nimport IcCroppedDocument from '../Assets/ic-cropped-document.svg';\nimport IcEnvelope from '../Assets/ic-envelop.svg';\n\ntype TExampleImageConfig = {\n    image: React.ComponentType<React.SVGAttributes<SVGElement>>;\n    description: JSX.Element;\n    ref: string;\n};\n/**\n * Returns a configuration containing images and descriptions for common POA document upload mistakes\n * @returns Array of objects containing image and description\n */\nexport const getExampleImagesConfig = (): Array<TExampleImageConfig> => [\n    {\n        image: IcDocumentNameMismatch,\n        description: <Localize i18n_default_text='Name in document doesn’t match your Deriv profile.' />,\n        ref: 'name_mismatch',\n    },\n    {\n        image: IcDocumentAddressMismatch,\n        description: <Localize i18n_default_text='Address in document doesn’t match address you entered above.' />,\n        ref: 'address_mismatch',\n    },\n    {\n        image: IcOldIssuedDocument,\n        description: <Localize i18n_default_text='Document issued more than 6-months ago.' />,\n        ref: 'old_issued_document',\n    },\n    {\n        image: IcBlurryDocument,\n        description: <Localize i18n_default_text='Blurry document. All information must be clear and visible.' />,\n        ref: 'blurry_document',\n    },\n    {\n        image: IcCroppedDocument,\n        description: <Localize i18n_default_text='Cropped document. All information must be clear and visible.' />,\n        ref: 'cropped_document',\n    },\n    {\n        image: IcEnvelope,\n        description: <Localize i18n_default_text='An envelope with your name and address.' />,\n        ref: 'envelope',\n    },\n];\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TContinueTradingButtonProps = { className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name ContinueTradingButton\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const ContinueTradingButton = ({ className }: TContinueTradingButtonProps) => (\n    <ButtonLink className={classNames('account-management__button', className)} to='/'>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='continue_btn_text'>\n            <Localize i18n_default_text='Continue trading' />\n        </Text>\n    </ButtonLink>\n);\n","import { ContinueTradingButton } from './continue-trading-button';\n\nexport default ContinueTradingButton;\n","import PoaButton from './poa-button';\n\nexport default PoaButton;\n","import React from 'react';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport classNames from 'classnames';\n\ntype TPoaButton = {\n    custom_text?: JSX.Element;\n    class_name?: string;\n};\n\nconst DEFAULT_BTN_TEXT = <Localize i18n_default_text='Submit proof of address' />;\n\nconst PoaButton = ({ custom_text = DEFAULT_BTN_TEXT, class_name }: TPoaButton) => (\n    <ButtonLink className={classNames('account-management__button', class_name)} to={routes.proof_of_address}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='poa_button_text'>\n            {custom_text}\n        </Text>\n    </ButtonLink>\n);\n\nexport default PoaButton;\n","import { Expired as PoaExpired } from './expired';\n\nexport default PoaExpired;\n","import { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport React from 'react';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    onClick: () => void;\n};\n\nexport const Expired = ({ onClick }: TExpired) => (\n    <IconMessageContent\n        message={localize('New proof of address is needed')}\n        text={localize('Your documents for proof of address is expired. Please submit again.')}\n        icon={<Icon icon='IcPoaUpload' size={128} />}\n    >\n        <Button onClick={onClick} has_effect primary>\n            <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                {localize('Resubmit')}\n            </Text>\n        </Button>\n    </IconMessageContent>\n);\n","import { NeedsReview as PoaNeedsReview } from './needs-review';\n\nexport default PoaNeedsReview;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport ContinueTradingButton from '../../continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoiButton from '../../../poi/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const NeedsReview = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your proof of address was submitted successfully');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (!needs_poi) {\n        return (\n            <IconMessageContent\n                message={message}\n                text={localize('Your document is being reviewed, please check back in 1-3 days.')}\n                icon={<Icon icon='IcPoaVerified' size={128} />}\n            >\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n            <div className='account-management__text-container'>\n                <Text align='center' size='xs' as='p'>\n                    {localize('Your document is being reviewed, please check back in 1-3 days.')}\n                </Text>\n                <Text align='center' size='xs' as='p'>\n                    {localize('You must also submit a proof of identity.')}\n                </Text>\n            </div>\n            <PoiButton />\n        </IconMessageContent>\n    );\n};\n","import { NotRequired as PoaNotRequired } from './not-required';\n\nexport default PoaNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const NotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of address verification not required')}\n        text={localize(\n            'Your account does not need address verification at this time. We will inform you if address verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoaVerified' size={128} />}\n    />\n);\n","import { Submitted as PoaSubmitted } from './submitted';\n\nexport default PoaSubmitted;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport ContinueTradingButton from '../../continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoiButton from '../../../poi/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Submitted = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your documents were submitted successfully');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                    <div className='account-management__text-container'>\n                        <Text align='center' size='xs' as='p'>\n                            {localize('We’ll review your documents and notify you of its status within 1 to 3 days.')}\n                        </Text>\n                        <Text align='center' size='xs' as='p'>\n                            {localize('You must also submit a proof of identity.')}\n                        </Text>\n                    </div>\n                    <PoiButton />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent\n                message={message}\n                text={localize('We’ll review your documents and notify you of its status within 1 to 3 days.')}\n                icon={<Icon icon='IcPoaVerified' size={128} />}\n            >\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        </div>\n    );\n};\n","import { Unverified as PoaUnverified } from './unverified';\n\nexport default PoaUnverified;\n","import React from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TUnverified = {\n    onClick: () => void;\n};\n\nexport const Unverified = ({ onClick }: TUnverified) => {\n    return (\n        <IconMessageContent\n            message={localize('We could not verify your proof of address')}\n            text={localize('Please check your email for details.')}\n            icon={<Icon icon='IcPoaError' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    {localize('Resubmit')}\n                </Text>\n            </Button>\n        </IconMessageContent>\n    );\n};\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../continue-trading-button/continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport { PoiButton } from '../../../poi/poi-button/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Verified = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your proof of address is verified');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent\n                    message={message}\n                    text={localize('To continue trading, you must also submit a proof of identity.')}\n                    icon={<Icon icon='IcPoaVerified' size={128} />}\n                >\n                    <PoiButton />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        </div>\n    );\n};\n\nexport default Verified;\n","import { Verified as PoaVerified } from './verified';\n\nexport default PoaVerified;\n","import React from 'react';\nimport { Form, Formik, FormikErrors, FormikHelpers, FormikState } from 'formik';\nimport { Button, HintBox, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    WS,\n    toMoment,\n    filterObjProperties,\n    isDesktop,\n    removeEmptyPropertiesFromObject,\n    formatIDVFormValues,\n    isMobile,\n} from '@deriv/shared';\nimport {\n    validate,\n    makeSettingsRequest,\n    validateName,\n    shouldHideHelperImage,\n    isDocumentTypeValid,\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n} from '../../../Helpers/utils';\nimport BackButtonIcon from '../../../Assets/ic-poi-back-btn.svg';\nimport PoiNameDobExample from '../../../Assets/ic-poi-name-dob-example.svg';\nimport IDVForm from '../../forms/idv-form';\nimport PersonalDetailsForm from '../../forms/personal-details-form';\nimport FormBody from '../../form-body';\nimport FormFooter from '../../form-footer';\nimport FormSubHeader from '../../form-sub-header';\nimport { observer, useStore } from '@deriv/stores';\nimport { ResidenceList } from '@deriv/api-types';\nimport {\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    GENERIC_ERROR_MESSAGE,\n} from '../../../Configs/poi-error-config';\nimport { TIDVFormValues, TPersonalDetailsForm } from 'Types';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\n\ntype TIDVDocumentSubmitProps = {\n    handleBack: React.MouseEventHandler;\n    handleViewComplete: () => void;\n    is_from_external: boolean;\n    selected_country: ResidenceList[0];\n    getChangeableFields: () => Array<string>;\n};\n\ntype TIdvDocumentSubmitForm = TIDVFormValues & TPersonalDetailsForm & { confirmation_checkbox: boolean };\n\nconst IdvDocumentSubmit = observer(({ handleBack, handleViewComplete, selected_country }: TIDVDocumentSubmitProps) => {\n    const {\n        client: { account_settings, getChangeableFields },\n    } = useStore();\n\n    const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n    const side_note_image = <PoiNameDobExample />;\n\n    const form_initial_values = filterObjProperties(account_settings, visible_settings) as {\n        [Property in keyof TPersonalDetailsForm]: string;\n    };\n\n    if (form_initial_values.date_of_birth) {\n        form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    const changeable_fields = getChangeableFields();\n\n    const initial_values: TIdvDocumentSubmitForm = {\n        document_type: {\n            id: '',\n            text: '',\n            value: '',\n            example_format: '',\n        },\n        document_number: '',\n        confirmation_checkbox: false,\n        ...form_initial_values,\n    };\n\n    const validateFields = (values: TIdvDocumentSubmitForm) => {\n        const errors: FormikErrors<Record<keyof TIdvDocumentSubmitForm, string>> = {};\n        const { document_type, document_number, document_additional } = values;\n        const needs_additional_document = !!document_type.additional;\n\n        errors.document_type = isDocumentTypeValid(document_type);\n        if (!shouldHideHelperImage(document_type?.id)) {\n            if (needs_additional_document) {\n                errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n            }\n            errors.document_number = isDocumentNumberValid(document_number, document_type);\n        }\n        const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n        const validateValues = validate(errors, values);\n        validateValues(val => val, required_fields, localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        if (!values.confirmation_checkbox) {\n            errors.confirmation_checkbox = 'error';\n        }\n\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    const submitHandler = async (\n        values: TIdvDocumentSubmitForm,\n        {\n            setSubmitting,\n            setStatus,\n            status,\n        }: FormikHelpers<TIdvDocumentSubmitForm> & FormikState<TIdvDocumentSubmitForm>\n    ) => {\n        setSubmitting(true);\n\n        const request = makeSettingsRequest(values, changeable_fields);\n\n        const data = await WS.setSettings(request);\n\n        if (data?.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ ...status, error_message: response_error });\n            setSubmitting(false);\n            return;\n        }\n        const get_settings = await WS.authorized.storage.getSettings();\n        if (get_settings?.error) {\n            setStatus({ ...status, error_message: get_settings?.error?.message ?? GENERIC_ERROR_MESSAGE });\n            setSubmitting(false);\n            return;\n        }\n\n        const submit_data = {\n            identity_verification_document_add: 1,\n            ...formatIDVFormValues(values, selected_country.value),\n        };\n\n        const idv_update_response = await WS.send(submit_data);\n        if (idv_update_response?.error) {\n            const response_error =\n                idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                    ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                    : idv_update_response.error?.message ?? GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n            return;\n        }\n        setSubmitting(false);\n        handleViewComplete();\n    };\n\n    return (\n        <Formik initialValues={{ ...initial_values }} validate={validateFields} onSubmit={submitHandler}>\n            {({ dirty, isSubmitting, isValid, values, status }) => (\n                <Form className='proof-of-identity__container proof-of-identity__container--reset'>\n                    {status?.error_message && (\n                        <div className='account-form__poi-confirm-example--generic-error-msg'>\n                            <HintBox\n                                icon='IcAlertDanger'\n                                message={\n                                    <Text as='p' size='xxxs'>\n                                        {status.error_message}\n                                    </Text>\n                                }\n                                is_danger\n                                className='hint-box-layout'\n                            />\n                        </div>\n                    )}\n                    <FormBody className='form-body' scroll_offset={isMobile() ? '180px' : '80px'}>\n                        <FormSubHeader title={localize('Identity verification')} />\n                        <IDVForm selected_country={selected_country} class_name='idv-layout' />\n\n                        <FormSubHeader title={localize('Details')} />\n                        <PersonalDetailsForm\n                            class_name='account-form__poi-confirm-example_container'\n                            is_rendered_for_idv\n                            editable_fields={values.confirmation_checkbox ? [] : changeable_fields}\n                            side_note={side_note_image}\n                            inline_note_text={\n                                <Localize\n                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                    components={[<strong key={0} />]}\n                                />\n                            }\n                        />\n                    </FormBody>\n                    <FormFooter className='proof-of-identity__footer account-form__footer--reset'>\n                        {isDesktop() && (\n                            <Button className='back-btn' onClick={handleBack} type='button' has_effect large secondary>\n                                <BackButtonIcon className='back-btn-icon' /> {localize('Go Back')}\n                            </Button>\n                        )}\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid}\n                            text={localize('Verify')}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n});\n\nexport default IdvDocumentSubmit;\n","import IdvDocumentSubmit from './idv-document-submit';\n\nexport default IdvDocumentSubmit;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Form, Formik, FormikHelpers, FormikState, FormikValues } from 'formik';\nimport { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport { Button, DesktopWrapper, HintBox, Loading, Text } from '@deriv/components';\nimport {\n    filterObjProperties,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    isEmptyObject,\n    isMobile,\n    removeEmptyPropertiesFromObject,\n    TIDVErrorStatus,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport PoiNameDobExample from '../../../../Assets/ic-poi-name-dob-example.svg';\nimport FormBody from '../../../form-body';\nimport IDVForm from '../../../forms/idv-form';\nimport FormFooter from '../../../form-footer';\nimport FormSubHeader from '../../../form-sub-header';\nimport PersonalDetailsForm from '../../../forms/personal-details-form.jsx';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../../Helpers/utils';\nimport {\n    GENERIC_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    generateIDVError,\n} from '../../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport { TIDVFormValues, TPersonalDetailsForm } from '../../../../Types';\nimport LoadErrorMessage from '../../../load-error-message';\n\ntype TRestState = {\n    api_error: string;\n    errors?: boolean;\n    form_initial_values: TIdvFailedForm;\n    changeable_fields: string[];\n};\n\ntype TIdvFailed = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    handleSubmit: () => void;\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    residence_list: ResidenceList;\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'];\n    selected_country?: ResidenceList[0];\n};\n\ntype TIDVFailureConfig = {\n    required_fields: string[];\n    side_note_image: JSX.Element;\n    failure_message: React.ReactNode;\n    inline_note_text: React.ReactNode;\n};\n\ntype TIdvFailedForm = Partial<TIDVFormValues> & Partial<TPersonalDetailsForm>;\n\nconst IdvFailed = ({\n    getChangeableFields,\n    is_from_external,\n    residence_list,\n    account_settings,\n    handleSubmit,\n    mismatch_status = IDV_ERROR_STATUS.Failed.code,\n    latest_status,\n    selected_country,\n}: TIdvFailed) => {\n    const {\n        client: { setIsAlreadyAttempted },\n    } = useStore();\n\n    const [idv_failure, setIdvFailure] = React.useState<TIDVFailureConfig>({\n        required_fields: [],\n        side_note_image: <PoiNameDobExample />,\n        failure_message: null,\n        inline_note_text: null,\n    });\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        api_error: '',\n        errors: false,\n        form_initial_values: {},\n        changeable_fields: [],\n    });\n\n    // Document upload not required for the below error codes\n    const is_document_upload_required = React.useMemo(\n        () =>\n            ![\n                IDV_ERROR_STATUS.DobMismatch.code,\n                IDV_ERROR_STATUS.NameMismatch.code,\n                IDV_ERROR_STATUS.NameDobMismatch.code,\n            ].includes(mismatch_status),\n        [mismatch_status]\n    );\n\n    /**\n     * If user needs to resubmit IDV document, the country should be the new selected country\n     * If user needs to update Personal info, the country should be the country of the latest status\n     */\n    const chosen_country = React.useMemo(\n        () =>\n            is_document_upload_required && !is_from_external\n                ? selected_country ?? {}\n                : residence_list.find(residence_data => residence_data.value === latest_status?.country_code) ?? {},\n        [selected_country, is_document_upload_required, latest_status?.country_code, residence_list, is_from_external]\n    );\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n\n    React.useEffect(() => {\n        const initializeFormValues = async (required_fields: string[]) => {\n            await WS.wait('get_settings');\n            const form_data = filterObjProperties(account_settings, required_fields);\n            if (form_data.date_of_birth) {\n                form_data.date_of_birth = toMoment(form_data.date_of_birth).format('YYYY-MM-DD');\n            }\n            // Remove the checkbox value as it is used only for moving cursor to the error field\n            form_data.confirmation_checkbox = false;\n            let initial_form_values = form_data;\n            if (is_document_upload_required) {\n                initial_form_values = {\n                    document_type: {\n                        id: '',\n                        text: '',\n                        value: '',\n                        example_format: '',\n                        sample_image: '',\n                    },\n                    document_number: '',\n                    ...initial_form_values,\n                };\n            }\n            setRestState({\n                form_initial_values: { ...initial_form_values },\n                changeable_fields: [...getChangeableFields()],\n                api_error: '',\n            });\n            setIsLoading(false);\n        };\n\n        setIsAlreadyAttempted(true);\n\n        const error_config = generateIDVError(\n            is_document_upload_required,\n            latest_status,\n            chosen_country,\n            mismatch_status\n        );\n        setIdvFailure(error_config);\n        initializeFormValues(error_config?.required_fields ?? []).catch(e => {\n            setRestState({\n                form_initial_values: {},\n                changeable_fields: [],\n                api_error: e?.error?.message,\n            });\n        });\n    }, [\n        mismatch_status,\n        account_settings,\n        is_document_upload_required,\n        getChangeableFields,\n        generateIDVError,\n        setIsAlreadyAttempted,\n    ]);\n\n    const onSubmit = async (\n        values: TIdvFailedForm,\n        { setStatus, setSubmitting, status }: FormikHelpers<TIdvFailedForm> & FormikState<TIdvDocumentSubmitForm>\n    ) => {\n        delete values.confirmation_checkbox;\n        setSubmitting(true);\n        setStatus({ ...status, error_msg: null });\n        const { document_number, document_type } = values;\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ ...status, error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response.error) {\n                setRestState(prev_state => ({ ...prev_state, api_error: response.error.message }));\n                setSubmitting(false);\n                return;\n            }\n            const submit_data = {\n                identity_verification_document_add: 1,\n                document_number,\n                document_type: document_type?.id,\n                issuing_country: chosen_country.value,\n            };\n\n            if (!submit_data.document_type || submit_data.document_type === IDV_NOT_APPLICABLE_OPTION.id) {\n                setSubmitting(false);\n                handleSubmit();\n                return;\n            }\n            const idv_update_response = await WS.send(submit_data);\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : idv_update_response?.error?.message ?? GENERIC_ERROR_MESSAGE;\n                setStatus({ ...status, error_msg: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleSubmit();\n        }\n    };\n\n    const validateFields = (values: TIdvFailedForm) => {\n        const errors: Record<string, unknown> = {};\n        if (is_document_upload_required) {\n            const { document_type, document_number, document_additional } = values;\n            const needs_additional_document = !!document_type?.additional;\n            errors.document_type = isDocumentTypeValid(document_type as FormikValues);\n            if (!shouldHideHelperImage(document_type?.id as string)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number ?? '', document_type as FormikValues);\n            }\n        }\n\n        const validateValues = validate(errors, values);\n\n        validateValues(val => val, idv_failure?.required_fields ?? [], localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        if (!values.confirmation_checkbox) {\n            errors.confirmation_checkbox = 'error';\n        }\n\n        setRestState(prev_state => ({\n            ...prev_state,\n            errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)),\n        }));\n\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    if (rest_state?.api_error) return <LoadErrorMessage error_message={rest_state.api_error} />;\n\n    if (is_loading && Object.keys(rest_state?.form_initial_values ?? {}).length === 0) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const setScrollOffset = () => {\n        if (isMobile()) {\n            if (is_from_external) {\n                return '140px';\n            }\n            return '180px';\n        }\n        return '80px';\n    };\n\n    return (\n        <Formik\n            initialValues={rest_state?.form_initial_values ?? {}}\n            onSubmit={onSubmit}\n            validate={validateFields}\n            className='proof-of-identity__container'\n        >\n            {({ isSubmitting, isValid, dirty, status, values, errors }) => (\n                <Form\n                    className={classNames('proof-of-identity__mismatch-container', {\n                        'upload-layout': is_document_upload_required,\n                    })}\n                >\n                    <FormBody className='form-body' scroll_offset={setScrollOffset()}>\n                        <Text size={isMobile() ? 'xs' : 's'} weight='bold' align='center'>\n                            <Localize i18n_default_text='Your identity verification failed because:' />\n                        </Text>\n                        {(status?.error_msg || idv_failure?.failure_message) && (\n                            <HintBox\n                                className={classNames('proof-of-identity__failed-message', 'hint-box-layout')}\n                                icon='IcAlertDanger'\n                                message={\n                                    <Text as='p' size={isMobile() ? 'xxs' : 'xs'} data-testid={mismatch_status}>\n                                        {status?.error_msg ?? idv_failure?.failure_message}\n                                    </Text>\n                                }\n                                is_danger\n                            />\n                        )}\n                        {is_document_upload_required && (\n                            <React.Fragment>\n                                <Text size='xs' align={isMobile() ? 'left' : 'center'}>\n                                    <Localize i18n_default_text='Let’s try again. Choose another document and enter the corresponding details.' />\n                                </Text>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={chosen_country} class_name='idv-layout idv-resubmit' />\n                                <FormSubHeader title={localize('Details')} />\n                            </React.Fragment>\n                        )}\n                        <PersonalDetailsForm\n                            class_name='account-form__poi-confirm-example_container'\n                            editable_fields={values.confirmation_checkbox ? [] : rest_state?.changeable_fields}\n                            is_rendered_for_idv\n                            side_note={idv_failure?.side_note_image}\n                            inline_note_text={idv_failure?.inline_note_text}\n                            mismatch_status={mismatch_status}\n                        />\n                        <DesktopWrapper>\n                            {!is_from_external && (\n                                <div className='proof-of-identity__actions'>\n                                    <Button\n                                        className='proof-of-identity__submit-button'\n                                        type='submit'\n                                        has_effect\n                                        is_disabled={!dirty || isSubmitting || !isValid}\n                                        text={\n                                            is_document_upload_required\n                                                ? localize('Verify')\n                                                : localize('Update profile')\n                                        }\n                                        large\n                                        primary\n                                    />\n                                </div>\n                            )}\n                        </DesktopWrapper>\n                    </FormBody>\n                    {(is_from_external || isMobile()) && (\n                        <FormFooter>\n                            <Button\n                                type='submit'\n                                has_effect\n                                is_disabled={!dirty || isSubmitting || !isValid}\n                                text={is_document_upload_required ? localize('Verify') : localize('Update profile')}\n                                large\n                                primary\n                            />\n                        </FormFooter>\n                    )}\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default IdvFailed;\n","import IdvRejected from './idv-failed';\n\nexport default IdvRejected;\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IdvDocumentRejected from '../../../../Assets/ic-idv-document-rejected.svg';\n\ntype TIdvLimited = {\n    handleRequireSubmission: () => void;\n};\n\nconst IdvLimited = ({ handleRequireSubmission }: TIdvLimited) => {\n    return (\n        <div className='proof-of-identity__container'>\n            <IdvDocumentRejected className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {localize('ID verification failed')}\n            </Text>\n            <Text className='proof-of-identity__text btm-spacer' align='center' size='xs'>\n                {localize('We were unable to verify your ID with the details you provided. ')}\n                {localize('Please upload your identity document.')}\n            </Text>\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={handleRequireSubmission}\n                large\n                text={localize('Upload identity document')}\n                primary\n            />\n        </div>\n    );\n};\n\nexport default IdvLimited;\n","import IdvLimited from './idv-limited';\n\nexport default IdvLimited;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Text } from '@deriv/components';\nimport { TIDVErrorStatus, IDV_ERROR_STATUS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport IdvDocumentPending from '../../../../Assets/ic-idv-document-pending.svg';\nimport PoaButton from '../../../poa/poa-button';\n\ntype TIdvSubmitComplete = {\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    needs_poa: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvSubmitComplete = observer(\n    ({ is_from_external, mismatch_status, needs_poa, redirect_button }: Partial<TIdvSubmitComplete>) => {\n        const { client } = useStore();\n        const { is_already_attempted } = client;\n\n        const is_mismatch_error =\n            mismatch_status === IDV_ERROR_STATUS.NameDobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.DobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.NameMismatch.code;\n\n        const is_expired_or_failed_error =\n            mismatch_status === IDV_ERROR_STATUS.Expired.code || mismatch_status === IDV_ERROR_STATUS.Failed.code;\n\n        const getHeaderText = () => {\n            if (is_already_attempted) {\n                if (is_mismatch_error) return <Localize i18n_default_text='Your profile is updated' />;\n                if (is_expired_or_failed_error)\n                    return <Localize i18n_default_text='Your document has been submitted' />;\n            }\n            return <Localize i18n_default_text='Your documents were submitted successfully' />;\n        };\n\n        const getDescriptionText = () => {\n            if (is_already_attempted && (is_mismatch_error || is_expired_or_failed_error))\n                return (\n                    <Localize i18n_default_text=\"We'll review your proof of identity again and will give you an update as soon as possible.\" />\n                );\n            return (\n                <Localize i18n_default_text='We’ll review your documents and notify you of its status within 5 minutes.' />\n            );\n        };\n\n        const poa_button = !is_from_external && (\n            <PoaButton custom_text={<Localize i18n_default_text='Submit proof of address' />} />\n        );\n\n        return (\n            <div className={classNames('proof-of-identity__container', 'proof-of-identity__container--status')}>\n                <IdvDocumentPending className='icon' />\n                <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                    {getHeaderText()}\n                </Text>\n                <Text className='proof-of-identity__text text' size='xs' align='center'>\n                    {getDescriptionText()}\n                </Text>\n                {needs_poa ? (\n                    <React.Fragment>\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text=\"Next, we'll need your proof of address.\" />\n                        </Text>\n                        {poa_button}\n                    </React.Fragment>\n                ) : (\n                    <div className='proof-of-identity__redirection'>{redirect_button}</div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default React.memo(IdvSubmitComplete);\n","import IdvSubmitComplete from './idv-submit-complete';\n\nexport default IdvSubmitComplete;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../../poa/continue-trading-button/continue-trading-button';\nimport IdvDocumentVerified from '../../../../Assets/ic-idv-verified.svg';\nimport PoaButton from '../../../poa/poa-button/poa-button';\n\ntype TIdvVerified = {\n    needs_poa: boolean;\n    is_from_external: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvVerified = ({ needs_poa, is_from_external, redirect_button }: Partial<TIdvVerified>) => {\n    const header_Text = needs_poa ? (\n        <Localize i18n_default_text='Your ID is verified. You will also need to submit proof of your address.' />\n    ) : (\n        <Localize i18n_default_text='ID verification passed' />\n    );\n\n    return (\n        <div\n            className={classNames('proof-of-identity__container', 'proof-of-identity__container--status')}\n            data-testid='poi_idv_verified_container'\n        >\n            <IdvDocumentVerified className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {header_Text}\n            </Text>\n            {needs_poa ? (\n                <React.Fragment>\n                    {!isMobile() && (\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text=\"Next, we'll need your proof of address.\" />\n                        </Text>\n                    )}\n                    {!is_from_external && (\n                        <PoaButton custom_text={<Localize i18n_default_text='Submit proof of address' />} />\n                    )}\n                </React.Fragment>\n            ) : (\n                redirect_button || <ContinueTradingButton className='continue-trade' />\n            )}\n        </div>\n    );\n};\n\nexport default IdvVerified;\n","import IdvVerified from './idv-verified';\n\nexport default IdvVerified;\n","import React from 'react';\nimport { PlatformContext } from '@deriv/shared';\nimport { ButtonLink, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../icon-message-content';\n\ntype TGoToPersonalDetailsButton = {\n    has_invalid_postal_code?: boolean;\n    anchor?: string;\n    from?: string;\n    text?: string;\n};\n\nconst GoToPersonalDetailsButton = ({ anchor, from, text }: TGoToPersonalDetailsButton) => {\n    const from_string = from ? `?from=${from}` : '';\n    const anchor_string = anchor ? `#${anchor}` : '';\n    return (\n        <ButtonLink to={`/account/personal-details${from_string}${anchor_string}`}>\n            <Text className='dc-btn__text' weight='bold' as='p'>\n                {text ?? localize('Go to personal details')}\n            </Text>\n        </ButtonLink>\n    );\n};\n\nexport const MissingPersonalDetails = ({ has_invalid_postal_code, from }: TGoToPersonalDetailsButton) => {\n    const { is_appstore } = React.useContext(PlatformContext);\n    if (has_invalid_postal_code)\n        return (\n            <IconMessageContent\n                message={localize('Your postal code is invalid')}\n                text={localize('Please check and update your postal code before submitting proof of identity.')}\n                icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n            >\n                <GoToPersonalDetailsButton\n                    anchor='address_postcode'\n                    from={from}\n                    text={localize('Update postal code')}\n                />\n            </IconMessageContent>\n        );\n    return (\n        <IconMessageContent\n            message={localize('Your personal details are missing')}\n            text={localize('Please complete your personal details before you verify your identity.')}\n            icon={\n                <Icon icon={is_appstore ? 'IcAccountMissingDetailsDashboard' : 'IcAccountMissingDetails'} size={128} />\n            }\n        >\n            <GoToPersonalDetailsButton from={from} />\n        </IconMessageContent>\n    );\n};\n","import { MissingPersonalDetails } from './missing-personal-details';\n\nexport default MissingPersonalDetails;\n","import { PoiButton } from './poi-button';\n\nexport default PoiButton;\n","import { ButtonLink, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport React from 'react';\n\nexport const PoiButton = () => (\n    <ButtonLink className='account-management__button' to='/account/proof-of-identity'>\n        <Text className='dc-btn__text' weight='bold' as='p'>\n            {localize('Proof of identity')}\n        </Text>\n    </ButtonLink>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { GetSettings } from '@deriv/api-types';\nimport { Checkbox, HintBox, Loading, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    isEmptyObject,\n    isMobile,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport PoiNameDobExample from '../../../Assets/ic-poi-name-dob-example.svg';\nimport FormBody from '../../form-body';\nimport LoadErrorMessage from '../../load-error-message';\nimport PersonalDetailsForm from '../../forms/personal-details-form.jsx';\nimport { GENERIC_ERROR_MESSAGE, DUPLICATE_ACCOUNT_ERROR_MESSAGE } from '../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { makeSettingsRequest, validate, validateName } from '../../../Helpers/utils';\nimport { TInputFieldValues } from '../../../Types';\n\ntype TRestState = {\n    api_error: string;\n    show_form: boolean;\n    errors?: boolean;\n    form_initial_values: TInputFieldValues;\n    changeable_fields: string[];\n};\n\ntype TPoiConfirmWithExampleFormContainer = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    onFormConfirm?: () => void;\n};\n\nconst PoiConfirmWithExampleFormContainer = ({\n    account_settings,\n    getChangeableFields,\n    onFormConfirm,\n}: TPoiConfirmWithExampleFormContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [checked, setChecked] = React.useState(false);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        show_form: true,\n        form_initial_values: { first_name: '', last_name: '', date_of_birth: '' },\n        changeable_fields: [],\n        api_error: '',\n    });\n\n    const side_note_image = <PoiNameDobExample />;\n\n    React.useEffect(() => {\n        const initializeFormValues = () => {\n            WS.wait('get_settings').then(() => {\n                const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n                const form_initial_values = filterObjProperties(account_settings, visible_settings);\n                if (form_initial_values.date_of_birth) {\n                    form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format(\n                        'YYYY-MM-DD'\n                    );\n                }\n                setRestState({\n                    ...rest_state,\n                    changeable_fields: getChangeableFields(),\n                    form_initial_values,\n                });\n                setIsLoading(false);\n            });\n        };\n\n        initializeFormValues();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [account_settings]);\n\n    const onSubmit = async (\n        values: TInputFieldValues,\n        { setStatus, setSubmitting }: FormikHelpers<TInputFieldValues>\n    ) => {\n        if (checked) return;\n        setStatus({ error_msg: '' });\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data?.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response?.error) {\n                setRestState({ ...rest_state, api_error: response.error.message });\n                return;\n            }\n            const { first_name, last_name, date_of_birth } = response?.get_settings ?? {\n                ...rest_state.form_initial_values,\n            };\n            setRestState({ ...rest_state, form_initial_values: { first_name, last_name, date_of_birth } });\n            setChecked(true);\n            setIsLoading(false);\n\n            if (onFormConfirm) {\n                setTimeout(() => {\n                    onFormConfirm();\n                }, 500);\n            }\n        }\n    };\n\n    const validateFields = (values: TInputFieldValues) => {\n        const errors: TInputFieldValues = {};\n        const validateValues = validate(errors, values);\n\n        const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n\n        validateValues(val => val, required_fields, localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        setRestState({ ...rest_state, errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)) });\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    const {\n        form_initial_values: { ...form_initial_values },\n        api_error,\n    } = rest_state;\n\n    if (api_error) return <LoadErrorMessage error_message={api_error} />;\n\n    if (is_loading) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    return (\n        <Formik initialValues={form_initial_values} enableReinitialize onSubmit={onSubmit} validate={validateFields}>\n            {({ errors, handleSubmit, isSubmitting, status }) => (\n                <Form className='account-form__poi-confirm-example' onSubmit={handleSubmit}>\n                    <FormBody>\n                        <PersonalDetailsForm\n                            editable_fields={rest_state.changeable_fields}\n                            is_rendered_for_onfido\n                            side_note={side_note_image}\n                            inline_note_text={\n                                <Localize\n                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                    components={[<strong key={0} />]}\n                                />\n                            }\n                        />\n                        <button\n                            type='submit'\n                            className={classNames('account-form__poi-confirm-example--button', {\n                                'account-form__poi-confirm-example--button__disabled':\n                                    checked || !isEmptyObject(errors),\n                            })}\n                        >\n                            <Checkbox\n                                value={checked}\n                                label={\n                                    <Text size={isMobile() ? 'xxs' : 'xs'}>\n                                        {localize(\n                                            'I confirm that the name and date of birth above match my chosen identity document (see below)'\n                                        )}\n                                    </Text>\n                                }\n                                disabled={isSubmitting}\n                            />\n                        </button>\n                        {status?.error_msg && (\n                            <div className='account-form__poi-confirm-example--status-message'>\n                                <HintBox\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size='xxxs'>\n                                            {status?.error_msg}\n                                        </Text>\n                                    }\n                                    is_danger\n                                    className='hint-box-layout'\n                                />\n                            </div>\n                        )}\n                    </FormBody>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PoiConfirmWithExampleFormContainer;\n","import PoiConfirmWithExampleFormContainer from './poi-confirm-with-example-form-container';\n\nexport default PoiConfirmWithExampleFormContainer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Field, FormikErrors, FormikValues, FormikHelpers } from 'formik';\nimport { Autocomplete, Button, DesktopWrapper, HintBox, MobileWrapper, Text, SelectNative } from '@deriv/components';\nimport { IDV_ERROR_STATUS, isMobile, TIDVErrorStatus, POIContext } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport FormFooter from '../../form-footer';\nimport { useResidenceList } from '@deriv/api';\n\ntype TCountrySelector = {\n    handleSelectionNext: () => void;\n    is_from_external: boolean;\n    mismatch_status?: TIDVErrorStatus;\n};\n\nconst CountrySelector = ({ handleSelectionNext, is_from_external, mismatch_status }: TCountrySelector) => {\n    const { setSelectedCountry } = React.useContext(POIContext);\n    const { data: country_list, isLoading } = useResidenceList();\n\n    const initial_form_values: FormikValues = {\n        country_input: '',\n    };\n\n    const validateFields = (values: FormikValues) => {\n        const errors: FormikErrors<FormikValues> = {};\n        const { country_input } = values;\n\n        if (!country_input) {\n            errors.country_input = localize('Please select the country of document issuance.');\n        } else if (!country_list.find((c: FormikValues) => c.text === country_input)) {\n            errors.country_input = localize('Please select a valid country of document issuance.');\n        }\n\n        return errors;\n    };\n\n    const updateSelectedCountry = (country_name: string) => {\n        const matching_country = country_list?.find((c: FormikValues) => c.text === country_name);\n        if (matching_country) {\n            setSelectedCountry?.(matching_country);\n        }\n    };\n\n    const submitHandler = (values: FormikValues, { setSubmitting }: FormikHelpers<FormikValues>) => {\n        updateSelectedCountry(values.country_input);\n        setSubmitting(false);\n        handleSelectionNext?.();\n    };\n\n    const failed_message: React.ReactNode = mismatch_status ? IDV_ERROR_STATUS[mismatch_status]?.message ?? null : null;\n\n    return (\n        <Formik initialValues={initial_form_values} validate={validateFields} onSubmit={submitHandler}>\n            {({\n                dirty,\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                touched,\n                values,\n            }) => (\n                <React.Fragment>\n                    <div\n                        className={classNames('proof-of-identity__container', {\n                            'min-height': !is_from_external,\n                        })}\n                    >\n                        {failed_message ? (\n                            <React.Fragment>\n                                <Text align='center' weight='bold' size={isMobile() ? 'xs' : 's'}>\n                                    <Localize i18n_default_text='Your identity verification failed because:' />\n                                </Text>\n                                <HintBox\n                                    className={classNames('proof-of-identity__failed-message', 'hint-box-layout')}\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size={isMobile() ? 'xxs' : 'xs'}>\n                                            {failed_message}\n                                        </Text>\n                                    }\n                                    is_danger\n                                />\n                            </React.Fragment>\n                        ) : (\n                            <Text className='proof-of-identity__header' align='center' weight='bold'>\n                                <Localize i18n_default_text='Proof of identity' />\n                            </Text>\n                        )}\n\n                        <Text className='proof-of-identity__country-text ' size='xs'>\n                            <Localize i18n_default_text='In which country was your document issued?' />\n                        </Text>\n                        <fieldset className='proof-of-identity__fieldset'>\n                            <Field name='country_input'>\n                                {({ field }: FormikValues) => (\n                                    <React.Fragment>\n                                        <DesktopWrapper>\n                                            <Autocomplete\n                                                className={classNames({ 'external-dropdown': is_from_external })}\n                                                {...field}\n                                                data_testid='dt_external_dropdown'\n                                                name='country_input'\n                                                data-lpignore='true'\n                                                error={touched.country_input && errors.country_input}\n                                                autoComplete='off'\n                                                type='text'\n                                                label={localize('Country')}\n                                                list_items={country_list}\n                                                value={values.country_input}\n                                                onBlur={(e: FormikValues) => {\n                                                    handleBlur(e);\n                                                    const current_input = e.target.value;\n                                                    if (\n                                                        !country_list.find(\n                                                            (c: FormikValues) => c.text === current_input\n                                                        )\n                                                    ) {\n                                                        setFieldValue('country_input', '', true);\n                                                        updateSelectedCountry('');\n                                                    }\n                                                }}\n                                                onChange={handleChange}\n                                                onItemSelection={({ text }: FormikValues) => {\n                                                    const select_value =\n                                                        text === 'No results found' || !text ? '' : text;\n                                                    setFieldValue('country_input', select_value, true);\n                                                    updateSelectedCountry(text);\n                                                }}\n                                                required\n                                            />\n                                        </DesktopWrapper>\n                                        <MobileWrapper>\n                                            <div className='proof-of-identity__dropdown-container'>\n                                                <SelectNative\n                                                    {...field}\n                                                    name='country_input'\n                                                    error={touched.country_input && errors.country_input}\n                                                    label={localize('Country')}\n                                                    placeholder={localize('Please select')}\n                                                    list_items={country_list}\n                                                    value={values.country_input}\n                                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                        handleChange(e);\n                                                        updateSelectedCountry(e.target.value);\n                                                    }}\n                                                    use_text={true}\n                                                    required\n                                                />\n                                            </div>\n                                        </MobileWrapper>\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        </fieldset>\n                    </div>\n                    <FormFooter\n                        className={classNames('proof-of-identity__footer', { 'external-footer': is_from_external })}\n                    >\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            onClick={() => handleSubmit()}\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid || isLoading}\n                            is_loading={false}\n                            text={localize('Next')}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\n\nexport default CountrySelector;\n","import PoiCountrySelector from './poi-country-selector';\n\nexport default PoiCountrySelector;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    handleRequireSubmission: () => void;\n    is_from_external: boolean;\n    redirect_button: React.ReactElement;\n};\n\nconst Expired = ({ handleRequireSubmission, is_from_external, redirect_button }: TExpired) => {\n    return (\n        <IconMessageContent\n            message={localize('New proof of identity document needed')}\n            icon={<Icon icon='IcPoiUpload' size={128} />}\n        >\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={handleRequireSubmission}\n                large\n                text={localize('Upload Document')}\n                primary\n            />\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default Expired;\n","import Expired from './expired';\n\nexport default Expired;\n","import { POILimited } from './limited';\n\nexport default POILimited;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const POILimited = () => (\n    <IconMessageContent\n        message={localize(\"You've reached the limit for uploading your documents.\")}\n        text={\n            <Localize\n                i18n_default_text='Please contact us via <0>live chat</0>.'\n                components={[\n                    <span key={0} className='link link--orange' onClick={() => window.LC_API.open_chat_window()} />,\n                ]}\n            />\n        }\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n    />\n);\n","import { OnfidoNotRequired } from './not-required';\n\nexport default OnfidoNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const OnfidoNotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of identity verification not required')}\n        text={localize(\n            'Your account does not need identity verification at this time. We will inform you if identity verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoiVerified' size={128} />}\n    />\n);\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\ntype TListItem = {\n    text: React.ReactNode;\n    index?: number;\n};\n\nconst ListItem = observer(({ text, index }: TListItem) => {\n    const {\n        ui: { is_desktop },\n    } = useStore();\n    const text_size = is_desktop ? 'xs' : 'xxs';\n    return (\n        <div className='account-management__list-text-container'>\n            {index && (\n                <Text size={text_size} className='account-management__list-text'>\n                    <Localize i18n_default_text='{{index}}.' values={{ index }} />{' '}\n                </Text>\n            )}\n            <Text size={text_size} className='account-management__list-text'>\n                {text}\n            </Text>\n        </div>\n    );\n});\n\nexport default ListItem;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Div100vhContainer, Text, Button, ThemedScrollbars, Icon } from '@deriv/components';\nimport { getOnfidoError } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport ListItem from './list-item';\n\ntype TIconMessageList = {\n    className?: string;\n    icon: React.ReactElement;\n    message: string;\n    message_list: Array<string>;\n    onContinue: () => void;\n};\n\nconst IconMessageList = observer(({ className, icon, message, message_list = [], onContinue }: TIconMessageList) => {\n    const { ui } = useStore();\n    const { is_mobile, is_desktop } = ui;\n    return (\n        <ThemedScrollbars is_bypassed={is_mobile}>\n            <Div100vhContainer\n                className='account-management__message-wrapper'\n                is_disabled={is_desktop}\n                height_offset='110px'\n            >\n                <div\n                    className={classNames('account-management__message-content', {\n                        [`${className}__message-content`]: className,\n                    })}\n                    data-testid='dt_icon_message_list'\n                >\n                    {icon && (\n                        <div\n                            className={classNames('account-management__message-icon', {\n                                [`${className}__message-icon`]: className,\n                            })}\n                        >\n                            {icon}\n                        </div>\n                    )}\n                    <Text\n                        as='div'\n                        weight='bold'\n                        className={classNames('account-management__message', {\n                            [`${className}__message`]: className,\n                        })}\n                        size={is_desktop ? 's' : 'xs'}\n                    >\n                        {message}\n                    </Text>\n\n                    {message_list && (\n                        <div className='account-management__list-container'>\n                            <div className='account-management__list-message'>\n                                <div className='account-management__list-icon'>\n                                    <Icon icon='IcAlertDanger' color='red' />\n                                </div>\n                                <section>\n                                    {message_list.length < 2 ? (\n                                        <ListItem text={getOnfidoError(message_list[0])} />\n                                    ) : (\n                                        message_list.map((text, idx) => (\n                                            <ListItem\n                                                key={text}\n                                                text={getOnfidoError(message_list[idx])}\n                                                index={idx + 1}\n                                            />\n                                        ))\n                                    )}\n                                </section>\n                            </div>\n                        </div>\n                    )}\n                    {onContinue && (\n                        <Button\n                            type='button'\n                            className='account-management__continue'\n                            onClick={onContinue}\n                            large\n                            primary\n                        >\n                            <Localize i18n_default_text='Verify again' />\n                        </Button>\n                    )}\n                </div>\n            </Div100vhContainer>\n        </ThemedScrollbars>\n    );\n});\n\nexport default IconMessageList;\n","import IconMessageList from './icon-message-list';\n\nexport default IconMessageList;\n","import { RejectedReasons } from './rejected-reasons';\n\nexport default RejectedReasons;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageList from '../../../icon-message-list';\n\ntype TIconMessageList = {\n    handleRequireSubmission: () => void;\n    rejected_reasons: string[];\n};\n\nexport const RejectedReasons = ({ handleRequireSubmission, rejected_reasons }: TIconMessageList) => (\n    <IconMessageList\n        message={localize('Your proof of identity submission failed because:')}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        message_list={rejected_reasons}\n        onContinue={handleRequireSubmission}\n    />\n);\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\n\ntype TUnsupportedFailed = {\n    error?: string;\n};\n\nconst UnsupportedFailed = ({ error }: TUnsupportedFailed) => (\n    <IconMessageContent\n        message={localize('Proof of identity documents upload failed')}\n        text={error}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        className='account-management-dashboard'\n    />\n);\n\nexport default UnsupportedFailed;\n","import UnsupportedFailed from './unsupported-failed';\n\nexport default UnsupportedFailed;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { localize } from '@deriv/translations';\nimport { compressImageFiles, readFiles, TSettings } from '@deriv/shared';\nimport { TFile } from 'Types';\n\ntype TProcessedFile = TFile & TSettings & { message: string };\n\nconst fileReadErrorMessage = (filename: string) => {\n    return localize('Unable to read file {{name}}', { name: filename });\n};\n\nconst uploadFile = (file: File, getSocket: () => WebSocket, settings: TSettings) => {\n    return new Promise((resolve, reject) => {\n        if (!file) {\n            reject();\n        }\n\n        // File uploader instance connected to binary_socket\n        const uploader = new DocumentUploader({ connection: getSocket() });\n\n        let is_file_error = false;\n\n        compressImageFiles([file])\n            .then((files_to_process: File[]) => {\n                readFiles(files_to_process, fileReadErrorMessage, settings)\n                    .then((processed_files: TProcessedFile[]) => {\n                        processed_files.forEach((item: TProcessedFile) => {\n                            if (item.message) {\n                                is_file_error = true;\n                                reject(item);\n                            }\n                        });\n                        const total_to_upload = processed_files.length;\n                        if (is_file_error || !total_to_upload) {\n                            return; // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        uploader.upload(processed_files[0]).then(resolve).catch(reject);\n                    })\n                    /* eslint-disable no-console */\n                    .catch(error => console.error('error: ', error));\n            })\n            /* eslint-disable no-console */\n            .catch(error => console.error('error: ', error));\n    });\n};\n\nexport default uploadFile;\n","import { localize } from '@deriv/translations';\nimport { FormikValues } from 'formik';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: localize('Upload your selfie.'),\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: localize('Expiry date'),\n    type: 'date',\n    required: true,\n};\n\nexport const getDocumentIndex = ({ country_code }: FormikValues) => [\n    {\n        onfido_name: 'Passport',\n        card: {\n            title: localize('Passport'),\n            description: localize('Upload the page that contains your photo.'),\n            icon: 'IcPoiPassport',\n        },\n        details: {\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Passport number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the page of your passport that contains your photo.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.PASSPORT,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'passport',\n                    icon: 'IcPassport',\n                    info: localize('Upload the page of your passport that contains your photo.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'Driving Licence',\n        card: {\n            title: localize('Driving licence'),\n            description: localize('Upload the front and back of your driving licence.'),\n            icon: 'IcPoiDrivingLicence',\n        },\n        details: {\n            fields_title: localize('First, enter your driving licence number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Driving licence number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your driving licence.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'driving_licence_front',\n                    icon: 'IcDrivingLicenceFront',\n                    info: localize('Upload the front of your driving licence.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'driving_licence_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your driving licence.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'National Identity Card',\n        card: {\n            title: localize('Identity card'),\n            description: localize('Upload the front and back of your identity card.'),\n            icon: 'IcPoiIdentityCard',\n        },\n        details: {\n            fields_title: localize('First, enter your identity card number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Identity card number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your identity card.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'identity_card_front',\n                    icon: 'IcIdCardFront',\n                    info: localize('Upload the front of your identity card.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'identity_card_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your identity card.'),\n                },\n            ],\n        },\n    },\n    ...(country_code === 'ng'\n        ? [\n              {\n                  card: {\n                      title: localize('NIMC slip and proof of age'),\n                      description: localize('Upload both of these documents to prove your identity.'),\n                      icon: 'IcPoiNimcSlip',\n                  },\n                  details: {\n                      fields: [\n                          {\n                              name: 'document_id',\n                              label: localize('NIMC slip number'),\n                              type: 'text',\n                              required: true,\n                          },\n                      ],\n                      documents_title: localize('Next, upload both of the following documents.'),\n                      documents: [\n                          {\n                              document_type: DOCUMENT_TYPES.NIMC_SLIP,\n                              lifetime_valid: true,\n                              pageType: PAGE_TYPE.FRONT,\n                              name: 'nimc_slip',\n                              icon: 'IcPoiNimcSlipHorizontal',\n                              info: localize('Upload your NIMC slip.'),\n                          },\n                          {\n                              document_type: DOCUMENT_TYPES.BIRTH_CERTIFICATE,\n                              pageType: PAGE_TYPE.PHOTO,\n                              name: 'birth_certificate_front',\n                              icon: 'IcDop',\n                              info: localize(\n                                  'Upload your proof of age: birth certificate or age declaration document.'\n                              ),\n                          },\n                      ],\n                  },\n              },\n          ]\n        : []),\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, FormikValues } from 'formik';\nimport { DatePicker, Input } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\nimport { ROOT_CLASS } from '../constants';\n\nconst InputField = ({ data }: FormikValues) => {\n    const min_date = toMoment().add(6, 'months').format('YYYY-MM-DD');\n    switch (data.type) {\n        case 'text':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <Input\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            type='text'\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                        />\n                    )}\n                </Field>\n            );\n        case 'date':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <DatePicker\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            date_format='YYYY-MM-DD'\n                            display_format='DD-MM-YYYY'\n                            start_date={min_date}\n                            min_date={min_date}\n                            should_show_today={false}\n                            name={data.name}\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                            readOnly\n                        />\n                    )}\n                </Field>\n            );\n        default:\n            return null;\n    }\n};\n\nInputField.propTypes = {\n    data: PropTypes.object,\n};\n\nexport default InputField;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field, FieldProps, FormikProps, FormikValues } from 'formik';\nimport { localize } from '@deriv/translations';\nimport { isMobile, supported_filetypes, max_document_size } from '@deriv/shared';\nimport { Button, Icon, Text, FileDropzone } from '@deriv/components';\nimport { ROOT_CLASS } from '../constants';\n\nconst DROPZONE_ERRORS = {\n    'file-too-large': localize('File size should be 8MB or less'),\n    'file-invalid-type': localize('File uploaded is not supported'),\n    'too-many-files': localize('Please select one file only'),\n    GENERAL: localize('Sorry, an error occured. Please select another file.'),\n};\ntype TDROPZONE_ERRORS = Readonly<typeof DROPZONE_ERRORS>;\n\ntype TUploader = {\n    data: FormikValues;\n    value: FormikValues;\n    is_full: boolean;\n    has_frame: boolean;\n    onChange: (e: unknown) => void;\n    setFieldValue: FormikProps<FormikValues>['setFieldValue'];\n    handleChange: (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => void;\n};\n\ntype TMessage = {\n    data?: FormikValues;\n    open?: () => void;\n};\n\ntype THandleRejectFiles = Array<{\n    file: File;\n    errors: [\n        {\n            message: string;\n            code: string;\n        }\n    ];\n}>;\n\nconst Message = ({ data, open }: TMessage) => (\n    <div className={`${ROOT_CLASS}__uploader-details`}>\n        <Icon className={`${ROOT_CLASS}__uploader-icon`} icon={data?.icon} size={236} />\n        <Text as='p' size='xs' color='general' align='center'>\n            {data?.info}\n        </Text>\n        <Button\n            medium\n            secondary\n            text={isMobile() ? localize('Tap here to upload') : localize('Drop file or click here to upload')}\n            onClick={open}\n        />\n    </div>\n);\n\nconst Preview = ({ data, setFieldValue, value, has_frame, handleChange }: Partial<TUploader>) => {\n    const [background_url, setBackgroundUrl] = React.useState('');\n\n    React.useEffect(() => {\n        setBackgroundUrl(value?.file ? URL.createObjectURL(value?.file) : '');\n    }, [value]);\n\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details ${ROOT_CLASS}__uploader-details--preview`}>\n            <div\n                className={classNames(`${ROOT_CLASS}__uploader-image`, {\n                    [`${ROOT_CLASS}__uploader-image--has-frame`]: has_frame,\n                })}\n                style={{ backgroundImage: `url(${background_url})` }}\n            >\n                {has_frame && <Icon icon='IcPoiFrame' className={`${ROOT_CLASS}__uploader-frame`} />}\n                {(!background_url || value?.file.type.indexOf('pdf') !== -1) && (\n                    <React.Fragment>\n                        <Icon icon='IcCloudUpload' size={50} />\n                        <Text as='p' size='xs' color='general' align='center'>\n                            {value?.file.name}\n                        </Text>\n                    </React.Fragment>\n                )}\n                <Icon\n                    icon='IcCloseCircle'\n                    className={`${ROOT_CLASS}__uploader-remove`}\n                    onClick={() => {\n                        handleChange?.(null, setFieldValue);\n                    }}\n                    size={16}\n                />\n            </div>\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n        </div>\n    );\n};\n\nconst Uploader = ({ data, value, is_full, onChange, has_frame }: Partial<TUploader>) => {\n    const [image, setImage] = React.useState<FormikValues>();\n\n    React.useEffect(() => {\n        setImage(value);\n    }, [value]);\n\n    const handleChange = (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        onChange?.(file);\n        setFieldValue?.(data?.name, file);\n    };\n\n    const handleAccept = (files: object[], setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const file = { file: files[0], errors: [], ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const handleReject = (files: THandleRejectFiles, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const errors = files[0].errors?.map((error: { code: string }) =>\n            DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                ? DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                : DROPZONE_ERRORS.GENERAL\n        );\n        const file = { ...files[0], errors, ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const ValidationErrorMessage: React.ComponentProps<typeof FileDropzone>['validation_error_message'] = open => (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            {image?.errors?.map((error: string, index: number) => (\n                <Text key={index} as='p' size='xs' color='secondary' align='center'>\n                    {error}\n                </Text>\n            ))}\n            <Button\n                medium\n                secondary\n                text={isMobile() ? localize('Tap here to upload') : localize('Drop file or click here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n\n    return (\n        <Field name={data?.name}>\n            {({ form: { setFieldValue } }: FieldProps) => (\n                <div\n                    className={classNames(`${ROOT_CLASS}__uploader`, {\n                        [`${ROOT_CLASS}__uploader--full`]: is_full,\n                    })}\n                >\n                    <FileDropzone\n                        accept={supported_filetypes}\n                        error_message={localize('Please upload supported file type.')}\n                        filename_limit={32}\n                        hover_message={localize('Drop files here..')}\n                        max_size={max_document_size}\n                        message={(open?: () => void) => <Message open={open} data={data} />}\n                        preview_single={\n                            image && (\n                                <Preview\n                                    data={data}\n                                    value={image}\n                                    has_frame={has_frame}\n                                    setFieldValue={setFieldValue}\n                                    handleChange={handleChange}\n                                />\n                            )\n                        }\n                        multiple={false}\n                        onDropAccepted={(files: object[]) => handleAccept(files, setFieldValue)}\n                        onDropRejected={(files: THandleRejectFiles) => handleReject(files, setFieldValue)}\n                        validation_error_message={value?.errors?.length ? ValidationErrorMessage : undefined}\n                        noClick\n                        value={(image ? [image] : []) as unknown as React.ComponentProps<typeof FileDropzone>['value']}\n                    />\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default Uploader;\n","import { localize } from '@deriv/translations';\nimport { FormikErrors, FormikValues } from 'formik';\n\nexport const setInitialValues = (fields: FormikValues) => {\n    const values: FormikValues = {};\n    fields.forEach((field: FormikValues) => {\n        values[field.name] = '';\n    });\n    return values;\n};\n\nexport const checkIsEmpty = (value: unknown) => {\n    return typeof value === 'string' ? !value.trim() : !value;\n};\n\ntype TFields = {\n    name: string;\n    label: string;\n    type: string;\n    required: boolean;\n}[];\n\ntype TDocument = {\n    document_type: string;\n    pageType: string;\n    name: string;\n    icon: string;\n    info: string;\n}[];\n\nexport const validateFields = (values: FormikValues, fields: TFields = [], documents: TDocument = []) => {\n    const errors: FormikErrors<FormikValues> = {};\n\n    fields.forEach((field: { name: string; label: string; type: string; required: boolean }) => {\n        const { name, label, type } = field;\n        const value = values[name];\n\n        if (field.required && checkIsEmpty(value)) {\n            errors[name] = localize('{{label}} is required.', {\n                label,\n            });\n        } else if (type === 'text' && value.length > 30) {\n            errors[name] = localize('{{label}} must be less than 30 characters.', {\n                label,\n            });\n        } else if (type === 'text' && !/^[\\w\\s-]{0,30}$/g.test(value)) {\n            errors[name] = localize('Only letters, numbers, space, underscore, and hyphen are allowed for {{label}}.', {\n                label,\n            });\n        }\n    });\n\n    documents.forEach((document: { name: string }) => {\n        const { name } = document;\n        const value = values[name];\n\n        if (checkIsEmpty(value)) {\n            errors[name] = localize('{{name}} is required.', {\n                name,\n            });\n        } else if (value.errors?.length) {\n            errors[name] = value.errors[0];\n        }\n    });\n\n    return errors;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Form, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { Button, Icon, Text } from '@deriv/components';\nimport InputField from './input-field';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, date_field, getDocumentIndex } from '../constants';\n\nconst icons = [\n    {\n        icon: 'IcPoiClearPhoto',\n        text: localize('A clear colour photo or scanned image'),\n    },\n    {\n        icon: 'IcPoiFileFormat',\n        text: localize('JPEG, JPG, PNG, PDF, or GIF'),\n    },\n    {\n        icon: 'IcPoiFileSize',\n        text: localize('Less than 8MB'),\n    },\n    {\n        icon: 'IcPoiDocExpiry',\n        text: localize('Must be valid for at least 6 months'),\n    },\n];\n\ntype TDocumentsUpload = {\n    initial_values?: FormikValues;\n    is_from_external?: boolean;\n    goToCards: () => void;\n    onSubmit: () => void;\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n};\n\ntype TIconsItem = {\n    data: FormikValues;\n};\n\nconst IconsItem = ({ data }: TIconsItem) => (\n    <div className={`${ROOT_CLASS}__icons-item`}>\n        <Icon icon={data.icon} size={24} />\n        <Text as='p' size='xxxs' align='center'>\n            {data.text}\n        </Text>\n    </div>\n);\n\nconst DocumentsUpload = ({ initial_values, is_from_external, data, goToCards, onSubmit }: TDocumentsUpload) => {\n    const { fields, documents_title, documents } = data;\n    const is_expiry_date_required = fields.some(field => field.name === date_field.name);\n\n    const fields_title = is_expiry_date_required ? (\n        <Localize\n            i18n_default_text='First, enter your {{label}} and the expiry date.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    ) : (\n        <Localize\n            i18n_default_text='First, enter your {{label}}.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={classNames(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: isMobile(),\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([...(fields || []), ...(documents || [])])}\n                validate={values => validateFields(values, fields, documents)}\n                onSubmit={onSubmit}\n            >\n                {({ values, isValid, touched }: FormikValues) => {\n                    const is_form_touched = Object.keys(touched).length > 0;\n                    const is_form_empty = Object.values(values).some(\n                        (field, key) => (field === null || field === '') && fields?.[key]?.required\n                    );\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <div className={`${ROOT_CLASS}__fields-content`}>\n                                <Text as='h3' size='s' color='prominent'>\n                                    {fields_title}\n                                </Text>\n                                <div className={`${ROOT_CLASS}__fields-wrap`}>\n                                    {fields?.map((field: FormikValues) => (\n                                        <InputField key={field.name} data={field} />\n                                    ))}\n                                </div>\n                                <div className={`${ROOT_CLASS}__divider`} />\n                                <Text as='h3' size='s' color='prominent'>\n                                    {documents_title}\n                                </Text>\n                                <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                    {documents?.map((item: FormikValues) => (\n                                        <Uploader\n                                            key={item.name}\n                                            data={item}\n                                            value={values[item.name]}\n                                            is_full={documents.length === 1 || is_from_external}\n                                        />\n                                    ))}\n                                </div>\n                                <div className={`${ROOT_CLASS}__icons`}>\n                                    {icons.map(item =>\n                                        item.icon === 'IcPoiDocExpiry' && !is_expiry_date_required ? null : (\n                                            <IconsItem key={item.icon} data={item} />\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                            <div className={`${ROOT_CLASS}__btns`}>\n                                <Button\n                                    onClick={goToCards}\n                                    secondary\n                                    large\n                                    text={localize('Go back')}\n                                    icon={<Icon icon={'IcButtonBack'} size={16} />}\n                                />\n                                <Button\n                                    type='submit'\n                                    primary\n                                    large\n                                    is_disabled={!isValid || (!is_form_touched && is_form_empty)}\n                                    text={localize('Next')}\n                                />\n                            </div>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default DocumentsUpload;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Form, FormikProps, FormikValues } from 'formik';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { Button, Icon, Text } from '@deriv/components';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, SELFIE_DOCUMENT } from '../constants';\n\ntype TSelfieUpload = {\n    initial_values?: FormikValues;\n    goBack: () => void;\n    onConfirm: () => void;\n    onFileDrop: () => void;\n};\n\nconst SelfieUpload = ({ initial_values, goBack, onConfirm, onFileDrop }: TSelfieUpload) => {\n    return (\n        <div\n            className={classNames(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: isMobile(),\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([SELFIE_DOCUMENT])}\n                validate={values => validateFields(values, undefined, [SELFIE_DOCUMENT])}\n                onSubmit={onConfirm}\n            >\n                {({ values, isValid, isSubmitting, touched }: Partial<FormikProps<FormikValues>>) => {\n                    let is_form_touched, is_form_empty;\n                    if (touched) {\n                        is_form_touched = Object.keys(touched).length > 0;\n                    }\n                    if (values) {\n                        is_form_empty = Object.values(values).some(field => field === null || field === '');\n                    }\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <div className={`${ROOT_CLASS}__fields-content`}>\n                                <Text as='h3' size='s' weight='bold' color='prominent'>\n                                    {localize('Upload your selfie')}\n                                </Text>\n                                <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                    <Uploader\n                                        data={SELFIE_DOCUMENT}\n                                        value={values ? values[SELFIE_DOCUMENT.name] : ''}\n                                        is_full={true}\n                                        onChange={onFileDrop}\n                                        has_frame\n                                    />\n                                </div>\n                                <div className={`${ROOT_CLASS}__notice`}>\n                                    <Text as='p' size='xs' color='general'>\n                                        {localize(\n                                            'Before uploading, please ensure that you’re facing forward in the selfie, your face is within the frame, and your eyes are clearly visible even if you’re wearing glasses.'\n                                        )}\n                                    </Text>\n                                </div>\n                            </div>\n                            <div className={`${ROOT_CLASS}__btns`}>\n                                <Button\n                                    onClick={goBack}\n                                    secondary\n                                    large\n                                    text={localize('Go back')}\n                                    icon={<Icon icon={'IcButtonBack'} size={16} />}\n                                />\n                                <Button\n                                    type='submit'\n                                    primary\n                                    large\n                                    is_disabled={!isValid || isSubmitting || (!is_form_touched && is_form_empty)}\n                                    text={localize('Confirm and upload')}\n                                />\n                            </div>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default SelfieUpload;\n","import React from 'react';\nimport DocumentsUpload from './documents-upload';\nimport SelfieUpload from './selfie-upload';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from '../constants';\nimport './card-details.scss';\nimport { FormikValues } from 'formik';\n\ntype TCardDetails = {\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n    onComplete: (e: object) => void;\n    goToCards: () => void;\n    is_from_external?: boolean;\n    setIsCfdPoiCompleted?: (is_cfd_poi_completed: boolean) => void;\n};\n\nconst CardDetails = ({ data, goToCards, onComplete, is_from_external, setIsCfdPoiCompleted }: TCardDetails) => {\n    const [documents, setDocuments] = React.useState<FormikValues>();\n    const [selfie, setSelfie] = React.useState<FormikValues>();\n    const [is_selfie_upload, setIsSelfieUpload] = React.useState(false);\n\n    const onSubmitDocuments = (values?: FormikValues) => {\n        setDocuments(values);\n        setIsSelfieUpload(true);\n    };\n\n    const onConfirmDocuments = (values?: FormikValues) => {\n        onComplete({ ...documents, ...values });\n        setIsCfdPoiCompleted?.(true);\n    };\n\n    return (\n        <React.Fragment>\n            {!is_selfie_upload ? (\n                <DocumentsUpload\n                    initial_values={documents}\n                    is_from_external={is_from_external}\n                    data={data}\n                    goToCards={goToCards}\n                    onSubmit={onSubmitDocuments}\n                />\n            ) : (\n                <SelfieUpload\n                    initial_values={selfie}\n                    goBack={() => setIsSelfieUpload(false)}\n                    onConfirm={onConfirmDocuments}\n                    onFileDrop={(value?: string) => setSelfie({ [SELFIE_DOCUMENT.name]: value })}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CardDetails;\n","import CardDetails from './card-details';\n\nexport default CardDetails;\n","import React from 'react';\nimport { Loading, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport { UploadComplete } from '../upload-complete/upload-complete';\nimport PoiUnsupportedFailed from '../../../poi-unsupported-failed';\nimport uploadFile from '../../../file-uploader-container/upload-file';\nimport OnfidoUpload from '../../../../Sections/Verification/ProofOfIdentity/onfido-sdk-view-container';\n\nimport CardDetails from './card-details';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from './constants';\nimport { FormikValues } from 'formik';\n\nconst STATUS = {\n    IS_UPLOADING: 'IS_UPLOADING',\n    IS_COMPLETED: 'IS_COMPLETED',\n    IS_FAILED: 'IS_FAILED',\n};\n\ntype TDetailComponent = {\n    document: ReturnType<typeof getDocumentIndex>[number];\n    onClickBack: () => void;\n    root_class: string;\n    country_code_key?: string;\n    height?: string | number;\n    handleComplete?: () => void;\n    is_onfido_supported?: boolean;\n    is_from_external?: boolean;\n    setIsCfdPoiCompleted?: () => void;\n    is_mt5?: boolean;\n    handlePOIforMT5Complete?: () => void;\n};\n\nconst DetailComponent = ({\n    document,\n    onClickBack,\n    root_class,\n    country_code_key,\n    height,\n    handleComplete,\n    is_onfido_supported,\n    is_from_external,\n    setIsCfdPoiCompleted,\n    is_mt5,\n    handlePOIforMT5Complete,\n    ...props\n}: TDetailComponent) => {\n    const [status, setStatus] = React.useState('');\n    const [response_error, setError] = React.useState('');\n\n    let is_any_failed = false;\n\n    const uploadFiles = (data: FormikValues) =>\n        new Promise((resolve, reject) => {\n            const docs = document.details.documents.map((item: FormikValues) => item.name);\n            const files = Object.values(data).filter(item => [...docs, SELFIE_DOCUMENT.name].includes(item.name));\n            const files_length = files.length;\n            let file_to_upload_index = 0;\n            const results: object[] = [];\n            const uploadNext = () => {\n                const item = files[file_to_upload_index];\n                const { file, document_type, pageType, lifetime_valid } = item;\n                const expiration_date =\n                    typeof data.expiry_date?.format === 'function' ? data.expiry_date.format('YYYY-MM-DD') : undefined;\n                uploadFile(file, WS.getSocket, {\n                    document_type,\n                    page_type: pageType,\n                    expiration_date,\n                    document_id: data.document_id || '',\n                    lifetime_valid: +(lifetime_valid && !expiration_date),\n                    document_issuing_country: country_code_key,\n                })\n                    .then(response => {\n                        file_to_upload_index += 1;\n                        if (response.warning || response.error) {\n                            is_any_failed = true;\n                            setStatus(STATUS.IS_FAILED);\n                            setError(\n                                response.message || (response.error ? response.error.message : localize('Failed'))\n                            );\n                            if (file_to_upload_index < files_length) {\n                                uploadNext();\n                            }\n                        } else if (file_to_upload_index < files_length) {\n                            results.push(response);\n                            uploadNext();\n                        } else {\n                            resolve(results);\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            };\n\n            uploadNext();\n        });\n\n    const onComplete = (values: FormikValues) => {\n        setStatus(STATUS.IS_UPLOADING);\n        uploadFiles(values)\n            .then(() => {\n                if (!is_any_failed) {\n                    if (is_mt5) {\n                        handlePOIforMT5Complete?.();\n                    } else {\n                        setStatus(STATUS.IS_COMPLETED);\n                    }\n                }\n            })\n            .catch(error => {\n                setStatus(STATUS.IS_FAILED);\n                setError(error.message);\n            });\n    };\n\n    switch (status) {\n        case STATUS.IS_UPLOADING:\n            return <Loading is_fullscreen={false} is_slow_loading status={[localize('Uploading documents')]} />;\n        case STATUS.IS_COMPLETED:\n            return <UploadComplete is_from_external={true} needs_poa={false} is_manual_upload />;\n        case STATUS.IS_FAILED:\n            return <PoiUnsupportedFailed error={response_error} />;\n        default:\n            return (\n                <React.Fragment>\n                    {is_onfido_supported ? (\n                        <React.Fragment>\n                            <div className={`${root_class}__detail-header`} onClick={onClickBack}>\n                                <Icon icon='IcArrowLeftBold' />\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className={`${root_class}__back-title`}\n                                >\n                                    {localize('Back')}\n                                </Text>\n                            </div>\n                            <OnfidoUpload\n                                country_code={country_code_key}\n                                documents_supported={[document.onfido_name]}\n                                height={height ?? null}\n                                handleComplete={is_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                is_default_enabled\n                                handleViewComplete={is_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                {...props}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <CardDetails\n                            data={document.details}\n                            onComplete={onComplete}\n                            goToCards={onClickBack}\n                            is_from_external={is_from_external}\n                            setIsCfdPoiCompleted={setIsCfdPoiCompleted}\n                        />\n                    )}\n                </React.Fragment>\n            );\n    }\n};\n\nexport default DetailComponent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\n\ntype TCardWithArrow = {\n    onClick: () => void;\n    title: string;\n    description: string;\n    icon: string;\n};\n\nconst CardWithArrow = ({ onClick, title, description, icon }: TCardWithArrow) => {\n    return (\n        <div className='manual-poi__card' onClick={onClick}>\n            <Icon className='manual-poi__card-icon' icon={icon} size={64} />\n            <div className='manual-poi__card-content'>\n                <Text as='p' size='xs' weight='bold' color='prominent'>\n                    {title}\n                </Text>\n                <Text as='p' size={isMobile() ? 'xxxs' : 'xxs'}>\n                    {description}\n                </Text>\n            </div>\n\n            <Icon icon='IcChevronRight' size={isMobile() ? 23 : 31} />\n        </div>\n    );\n};\n\nexport { CardWithArrow };\n","import React from 'react';\nimport { Card } from '@deriv/components';\nimport { CardWithArrow } from './card-with-arrow';\nimport { getDocumentIndex } from './constants';\n\ntype TDocument = {\n    toggleDetail: (index: number) => void;\n    documents: ReturnType<typeof getDocumentIndex>;\n};\n\nexport const Documents = ({ toggleDetail, documents }: TDocument) => (\n    <React.Fragment>\n        {documents.map((item, index: number) => (\n            <Card\n                style={{\n                    margin: '1.6rem 0',\n                    height: '11.2rem',\n                }}\n                key={item.card?.icon}\n                renderContent={() => <CardWithArrow onClick={() => toggleDetail(index)} {...item.card} />}\n            />\n        ))}\n    </React.Fragment>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { localize } from '@deriv/translations';\nimport { Timeline } from '@deriv/components';\nimport { isMobile } from '@deriv/shared';\nimport { identity_status_codes } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport DetailComponent from './detail-component';\nimport { Documents } from './documents';\nimport { getDocumentIndex, DOCUMENT_TYPES } from './constants';\nimport UploadComplete from '../upload-complete';\nimport { FormikValues } from 'formik';\nimport Verified from '../verified';\nimport Limited from '../limited';\nimport Expired from '../expired';\n\nconst checkNimcStep = (documents: FormikValues) => {\n    let has_nimc = false;\n    documents.forEach((document: FormikValues) => {\n        if (document.document_type === DOCUMENT_TYPES.NIMC_SLIP) {\n            has_nimc = true;\n        }\n    });\n    return has_nimc;\n};\n\ntype TUnsupported = {\n    country_code: string;\n    handlePOIforMT5Complete: () => void;\n    manual: {\n        status: string;\n    };\n    redirect_button: React.ReactElement;\n    needs_poa: boolean;\n    handleRequireSubmission: () => void;\n    handleViewComplete: () => void;\n    allow_poi_resubmission: boolean;\n    onfido: {\n        submissions_left: number;\n    };\n};\n\nconst Unsupported = ({\n    country_code,\n    handlePOIforMT5Complete,\n    manual,\n    redirect_button,\n    needs_poa,\n    handleRequireSubmission,\n    allow_poi_resubmission,\n    handleViewComplete,\n    onfido,\n    ...props\n}: Partial<TUnsupported>) => {\n    const [detail, setDetail] = React.useState<number | null>(null);\n    const toggleDetail = (index: number) => setDetail(index);\n\n    const documents = getDocumentIndex({\n        country_code,\n    });\n\n    if (manual) {\n        if (manual.status === identity_status_codes.pending)\n            return <UploadComplete is_manual_upload needs_poa={needs_poa} redirect_button={redirect_button} />;\n        else if ([identity_status_codes.rejected, identity_status_codes.suspected].includes(manual.status)) {\n            if (!allow_poi_resubmission) return <Limited />;\n        } else if (manual.status === identity_status_codes.verified) {\n            return <Verified needs_poa={needs_poa} redirect_button={redirect_button} />;\n        } else if (manual.status === identity_status_codes.expired) {\n            return <Expired redirect_button={redirect_button} handleRequireSubmission={handleRequireSubmission} />;\n        }\n    }\n\n    if (detail !== null) {\n        const is_onfido_supported =\n            country_code === 'ng' &&\n            !checkNimcStep(documents[detail ?? 0].details.documents) &&\n            onfido &&\n            onfido.submissions_left > 0;\n        return (\n            <DetailComponent\n                is_onfido_supported={is_onfido_supported}\n                country_code_key={country_code}\n                document={documents[detail]}\n                root_class='manual-poi'\n                onClickBack={() => setDetail(null)}\n                handlePOIforMT5Complete={handlePOIforMT5Complete}\n                handleComplete={handleViewComplete}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <Timeline\n            className={classNames('manual-poi', {\n                'manual-poi--mobile': isMobile(),\n            })}\n            disabled_items={[2]}\n        >\n            <Timeline.Item item_title={localize('Please upload one of the following documents:')}>\n                <Documents documents={documents} toggleDetail={toggleDetail} />\n            </Timeline.Item>\n            <Timeline.Item item_title={localize('Upload your selfie')}>\n                <div />\n            </Timeline.Item>\n        </Timeline>\n    );\n};\nexport default Unsupported;\n","import Unsupported from './unsupported';\nimport './unsupported.scss';\n\nexport default Unsupported;\n","import { UploadComplete } from './upload-complete';\n\nexport default UploadComplete;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { PlatformContext, isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport PoaButton from '../../../poa/poa-button';\nimport { ContinueTradingButton } from '../../../poa/continue-trading-button/continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content/icon-message-content';\nimport { TPlatformContext, TPOIStatus } from 'Types';\nimport classNames from 'classnames';\n\nexport const UploadComplete = ({\n    needs_poa,\n    redirect_button,\n    is_from_external,\n    is_manual_upload = false,\n}: TPOIStatus) => {\n    const { is_appstore } = React.useContext<TPlatformContext>(PlatformContext);\n    const message = localize('Your documents were submitted successfully');\n    const description = is_manual_upload\n        ? localize('We’ll review your documents and notify you of its status within 1 - 3 working days.')\n        : localize('We’ll review your documents and notify you of its status within 5 minutes.');\n\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent\n                message={message}\n                text={description}\n                icon={\n                    is_appstore ? (\n                        <Icon icon='IcPoiVerifiedDashboard' width={273} height={128} />\n                    ) : (\n                        <Icon icon='IcPoiVerified' size={128} />\n                    )\n                }\n                className={classNames({ 'account-management-dashboard': is_appstore })}\n            >\n                {!is_from_external && (redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />))}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent\n            message={message}\n            icon={\n                is_appstore ? (\n                    <Icon icon='IcPoiVerifiedDashboard' width={273} height={128} />\n                ) : (\n                    <Icon icon='IcPoiVerified' size={128} />\n                )\n            }\n            className={classNames({ 'account-management-dashboard': is_appstore })}\n        >\n            <React.Fragment>\n                <div className='account-management__text-container'>\n                    <Text align='center' size='xs' as={is_appstore ? 'span' : 'p'}>\n                        {description}\n                    </Text>\n                    <Text align='center' size='xs' as={is_appstore ? 'span' : 'p'}>\n                        {localize('You must also submit a proof of address.')}\n                    </Text>\n                </div>\n                <PoaButton />\n            </React.Fragment>\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default UploadComplete;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TPOIStatus } from 'Types';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoaButton from '../../../poa/poa-button';\n\nexport const Verified = ({ needs_poa, redirect_button, is_from_external }: TPOIStatus) => {\n    const message = localize('Your proof of identity is verified');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent\n                message={message}\n                icon={<Icon icon='IcPoaVerified' size={128} data_testid='dt_IcPoaVerified' />}\n                className='account-management-dashboard'\n            >\n                {!is_from_external && redirect_button}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent\n            message={message}\n            icon={<Icon icon='IcPoaVerified' size={128} />}\n            className='account-management-dashboard'\n            text={localize('To continue trading, you must also submit a proof of address.')}\n        >\n            {!is_from_external && (\n                <React.Fragment>\n                    <PoaButton />\n                </React.Fragment>\n            )}\n        </IconMessageContent>\n    );\n};\n\nexport default Verified;\n","import { Verified } from './verified';\n\nexport default Verified;\n","import { FormikErrors, FormikValues } from 'formik';\n\n/**\n * Takes validation result of a form, sets warnings on component's state and pass errors down to the form\n *\n * @param {object} values - object containing form field values and validations\n * @return {object} object containing errors and warnings\n */\nfunction splitValidationResultTypes(values: FormikValues) {\n    const warnings: FormikErrors<FormikValues> = {};\n    const errors: FormikErrors<FormikValues> = {};\n    Object.keys(values).forEach((field: string) => {\n        const item = values[field];\n        if (Array.isArray(item)) {\n            if (item[0] === 'warn') {\n                warnings[field] = item[1];\n            } else if (item[0] === 'error') {\n                errors[field] = item[1];\n            }\n        }\n    });\n    return { warnings, errors };\n}\n\nexport { splitValidationResultTypes };\n","import React from 'react';\nimport { Button, Icon, Modal, Text, DesktopWrapper, MobileDialog, MobileWrapper } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\ntype RiskToleranceWarningModalProps = {\n    show_risk_modal: boolean;\n    handleAcceptRisk: () => void;\n    title: string;\n    button_text?: string;\n    body_content: JSX.Element;\n    has_sub_header?: boolean;\n};\n\nconst RiskToleranceWarningModal = ({\n    show_risk_modal,\n    handleAcceptRisk,\n    title,\n    button_text,\n    body_content,\n    has_sub_header = false,\n}: RiskToleranceWarningModalProps) => {\n    return (\n        <React.Fragment>\n            <DesktopWrapper>\n                <Modal\n                    width='44rem'\n                    title={title}\n                    height='41rem'\n                    is_open={show_risk_modal}\n                    className='center-risk-modal'\n                    toggleModal={handleAcceptRisk}\n                    has_close_icon={false}\n                >\n                    <Modal.Body>\n                        <Icon icon='IcRedWarning' size='63' />\n                        <Text as='p' size='xs' align='center' line_height='s' className='risk-acceptance__text'>\n                            {body_content}\n                        </Text>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </Modal>\n            </DesktopWrapper>\n            <MobileWrapper>\n                <MobileDialog\n                    visible={show_risk_modal}\n                    title={has_sub_header ? localize('Trading Experience Assessment') : title}\n                    portal_element_id='modal_root'\n                    has_close_icon={false}\n                >\n                    <Modal.Body className='risk-tolerance-modal'>\n                        {has_sub_header ? (\n                            <Text\n                                size='xs'\n                                line_height='s'\n                                weight='bold'\n                                as='p'\n                                className='risk-tolerance-modal__title'\n                            >\n                                {title}\n                                <div className='risk-tolerance-modal__title--separator' />\n                            </Text>\n                        ) : null}\n                        <div className='risk-tolerance-modal__wrapper'>\n                            <Icon icon='IcRedWarning' size='65' />\n                            <Text as='p' size='xs' align='center' line_height='l' className='risk-acceptance__text'>\n                                {body_content}\n                            </Text>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer className='risk-tolerance-modal__footer'>\n                        <Button\n                            type='button'\n                            large\n                            text={button_text ?? localize('OK')}\n                            primary\n                            onClick={handleAcceptRisk}\n                        />\n                    </Modal.Footer>\n                </MobileDialog>\n            </MobileWrapper>\n        </React.Fragment>\n    );\n};\n\nexport default RiskToleranceWarningModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport { Text, RadioGroup } from '@deriv/components';\nimport { TTradingAssessmentForm } from 'Types';\n\ntype TradingAssessmentRadioButtonProps = {\n    disabled_items: string[];\n    text?: string;\n    list: { text: string; value: string }[];\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    values: TTradingAssessmentForm;\n    form_control: keyof TTradingAssessmentForm;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\nconst TradingAssessmentRadioButton = ({\n    disabled_items,\n    text,\n    list,\n    onChange,\n    values,\n    form_control,\n    setEnableNextSection,\n}: TradingAssessmentRadioButtonProps) => {\n    React.useEffect(() => {\n        setEnableNextSection(!!values[form_control]);\n    }, [form_control, setEnableNextSection, values]);\n\n    return (\n        <div className='trading-assessment__wrapper__question'>\n            <Text as='h1' color='prominent' weight='bold' size='xs'>\n                {text}\n            </Text>\n            <Field name={form_control}>\n                {() => (\n                    <RadioGroup\n                        className='trading-assessment__wrapper__question--radio-group'\n                        name={form_control}\n                        should_wrap_items\n                        required\n                        selected={values[form_control]}\n                        onToggle={e => {\n                            onChange(e);\n                            setEnableNextSection(true);\n                        }}\n                    >\n                        {list.map(answer => (\n                            <RadioGroup.Item\n                                className='trading-assessment__wrapper__question--radio-group--item'\n                                key={answer.value}\n                                label={answer?.text}\n                                value={answer?.value}\n                                disabled={disabled_items.includes(form_control)}\n                            />\n                        ))}\n                    </RadioGroup>\n                )}\n            </Field>\n        </div>\n    );\n};\n\nexport default TradingAssessmentRadioButton;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'formik';\nimport { DesktopWrapper, Dropdown, MobileWrapper, Text, SelectNative } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TTradingAssessmentForm, TQuestion } from 'Types';\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\n\ntype TradingAssessmentDropdownProps = {\n    disabled_items: string[];\n    item_list: TQuestion[];\n    onChange: (\n        e: React.ChangeEvent<HTMLSelectElement>,\n        form_control: keyof TTradingAssessmentForm,\n        setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void\n    ) => void;\n    values: TTradingAssessmentForm;\n    setFieldValue: (field: string, value: string, shouldValidate?: boolean) => void;\n    setEnableNextSection: (enable: boolean) => void;\n};\n\ntype TField = {\n    field: {\n        name: string;\n        value: string;\n        onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    };\n    meta: {\n        error: string;\n        touched: string;\n    };\n};\n\nconst TradingAssessmentDropdown = ({\n    disabled_items,\n    item_list,\n    onChange,\n    values,\n    setFieldValue,\n    setEnableNextSection,\n}: TradingAssessmentDropdownProps) => {\n    React.useEffect(() => {\n        checkIfAllFieldsFilled();\n    }, [values]);\n\n    const checkIfAllFieldsFilled = () => {\n        if (values) {\n            setEnableNextSection(\n                Boolean(\n                    values.cfd_experience &&\n                        values.cfd_frequency &&\n                        values.trading_experience_financial_instruments &&\n                        values.trading_frequency_financial_instruments\n                )\n            );\n        }\n    };\n\n    return (\n        <div className='trading-assessment__wrapper__dropdown'>\n            {item_list.map(question => (\n                <Field name={question.form_control} key={question.form_control}>\n                    {({ field, meta }: TField) => {\n                        const should_extend_trading_frequency_field =\n                            question.form_control === 'trading_frequency_financial_instruments' &&\n                            question?.question_text.length > MAX_QUESTION_TEXT_LENGTH;\n\n                        return (\n                            <React.Fragment>\n                                <DesktopWrapper>\n                                    <Dropdown\n                                        {...field}\n                                        classNameDisplay={classNames({\n                                            'trading-frequency--field': should_extend_trading_frequency_field,\n                                        })}\n                                        is_align_text_left\n                                        name={question?.form_control}\n                                        placeholder={question?.question_text}\n                                        list={question?.answer_options}\n                                        onChange={e =>\n                                            onChange(\n                                                e as React.ChangeEvent<HTMLSelectElement>,\n                                                question.form_control,\n                                                setFieldValue\n                                            )\n                                        }\n                                        value={values[question.form_control]}\n                                        disabled={disabled_items.includes(question.form_control)}\n                                        error={meta.touched && meta.error}\n                                    />\n                                </DesktopWrapper>\n                                <MobileWrapper>\n                                    <Text as='h1' color='prominent' weight='bold' size='xs'>\n                                        {question?.question_text}\n                                    </Text>\n                                    <SelectNative\n                                        {...field}\n                                        placeholder={localize('Please select')}\n                                        label={localize('Please select')}\n                                        name={question?.form_control}\n                                        list_items={question?.answer_options}\n                                        onChange={e => {\n                                            onChange(e, question.form_control, setFieldValue);\n                                        }}\n                                        value={values[question.form_control]}\n                                        hide_top_placeholder\n                                        disabled={disabled_items.includes(question.form_control)}\n                                        error={meta.touched && meta.error}\n                                    />\n                                </MobileWrapper>\n                            </React.Fragment>\n                        );\n                    }}\n                </Field>\n            ))}\n        </div>\n    );\n};\n\nexport default TradingAssessmentDropdown;\n","export const MAX_QUESTION_TEXT_LENGTH = 90;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Formik, Form, FormikErrors } from 'formik';\nimport { Button, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport TradingAssessmentRadioButton from './trading-assessment-radio-buttons';\nimport TradingAssessmentDropdown from './trading-assessment-dropdown';\nimport { getTradingAssessmentQuestions } from '../../Constants/trading-assessment-questions';\nimport { TTradingAssessmentForm, TQuestion } from 'Types';\nimport ScrollToFieldWithError from '../forms/scroll-to-field-with-error';\nimport { MAX_QUESTION_TEXT_LENGTH } from '../../Constants/trading-assessment';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\n\ntype TradingAssessmentFormProps = {\n    class_name?: string;\n    disabled_items: string[];\n    form_value: TTradingAssessmentForm;\n    onSubmit: (values?: TTradingAssessmentForm, action?: React.ReactNode, should_override?: boolean) => void;\n    onCancel: (form_data: TTradingAssessmentForm) => void;\n    should_move_to_next: boolean;\n    setSubSectionIndex: (index: number) => void;\n    is_independent_section: boolean;\n    is_mobile?: boolean;\n};\n\nconst TradingAssessmentForm = observer(\n    ({\n        class_name,\n        disabled_items,\n        form_value,\n        onSubmit,\n        onCancel,\n        should_move_to_next,\n        setSubSectionIndex,\n        is_independent_section,\n        is_mobile,\n    }: TradingAssessmentFormProps) => {\n        const { traders_hub } = useStore();\n        const { is_eu_user } = traders_hub;\n        const assessment_questions = getTradingAssessmentQuestions();\n        const stored_items = parseInt(localStorage.getItem('current_question_index') ?? '0');\n        const [is_section_filled, setIsSectionFilled] = React.useState(false);\n        const [current_question_details, setCurrentQuestionDetails] = React.useState({\n            current_question_index: 0,\n            current_question: assessment_questions[stored_items],\n        });\n        const [form_data, setFormData] = React.useState({ ...form_value });\n        const last_question_index = assessment_questions.length - 1;\n        const should_display_previous_button = is_independent_section\n            ? current_question_details.current_question_index !== 0\n            : true;\n\n        React.useEffect(() => {\n            setCurrentQuestionDetails(prevState => {\n                return {\n                    ...prevState,\n                    current_question_index: stored_items || 0,\n                    current_question: stored_items\n                        ? assessment_questions[stored_items]\n                        : assessment_questions[prevState.current_question_index],\n                };\n            });\n            if (!is_independent_section) {\n                setSubSectionIndex(stored_items);\n            }\n            setFormData(form_value);\n        }, []);\n\n        React.useEffect(() => {\n            if (should_move_to_next) displayNextPage();\n        }, [should_move_to_next]);\n\n        const displayNextPage = () => {\n            if (form_data.risk_tolerance === 'No') {\n                // onSubmit hold reference to a function that takes 3 params - values, action and should_override\n                onSubmit(form_data, null, true);\n            } else {\n                const next_question = current_question_details.current_question_index + 1;\n\n                if (next_question < assessment_questions.length) {\n                    setCurrentQuestionDetails(prev_state_question => {\n                        const next_state_question_index = prev_state_question.current_question_index + 1;\n                        localStorage.setItem('current_question_index', String(next_state_question_index));\n                        // Sub section form progress is not required when the section is independent\n                        if (!is_independent_section) {\n                            setSubSectionIndex(next_state_question_index);\n                        }\n                        return {\n                            current_question_index: next_state_question_index,\n                            current_question: assessment_questions[next_state_question_index],\n                        };\n                    });\n                }\n            }\n        };\n\n        const displayPreviousPage = () => {\n            const prev_question = current_question_details.current_question_index - 1;\n            if (prev_question >= 0) {\n                setCurrentQuestionDetails(prev_state_question => {\n                    const prev_state_question_index = prev_state_question.current_question_index - 1;\n                    localStorage.setItem('current_question_index', String(prev_state_question_index));\n                    if (!is_independent_section) {\n                        setSubSectionIndex(prev_state_question_index);\n                    }\n                    return {\n                        current_question_index: prev_state_question_index,\n                        current_question: assessment_questions[prev_state_question_index],\n                    };\n                });\n            } else {\n                onCancel(form_data);\n            }\n        };\n\n        const handleValueSelection = (\n            e: React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>,\n            form_control: keyof TTradingAssessmentForm,\n            callBackFn: (form_control: keyof TTradingAssessmentForm, value: string) => void\n        ) => {\n            if (typeof e.persist === 'function') e.persist();\n            callBackFn(form_control, e.target.value);\n            setFormData(prev_form => ({ ...prev_form, [form_control]: e.target.value }));\n        };\n\n        const isAssessmentCompleted = (answers: TTradingAssessmentForm) =>\n            Object.values(answers).every(answer => Boolean(answer));\n\n        const nextButtonHandler = (values: TTradingAssessmentForm, { setTouched }) => {\n            if (is_section_filled) {\n                if (isAssessmentCompleted(values) && stored_items === last_question_index) {\n                    onSubmit(values);\n                } else {\n                    setTouched({});\n                    displayNextPage();\n                }\n            }\n        };\n\n        const handleValidate = (values: TTradingAssessmentForm) => {\n            const errors: FormikErrors<TTradingAssessmentForm> = {};\n\n            if (!values.risk_tolerance && current_question_details.current_question.section === 'risk_tolerance') {\n                errors.risk_tolerance = 'error';\n            }\n            if (\n                !values.source_of_experience &&\n                current_question_details.current_question.section === 'source_of_experience'\n            ) {\n                errors.source_of_experience = 'error';\n            }\n            if (current_question_details.current_question.section === 'trading_experience') {\n                const trading_experience_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_experience',\n                    'cfd_frequency',\n                    'trading_experience_financial_instruments',\n                    'trading_frequency_financial_instruments',\n                ];\n                trading_experience_required_fields.forEach(field => {\n                    if (!values[field]) {\n                        errors[field] = localize('Please select an option');\n                    }\n                });\n            }\n            if (current_question_details.current_question.section === 'trading_knowledge') {\n                const trading_knowledge_required_fields: (keyof TTradingAssessmentForm)[] = [\n                    'cfd_trading_definition',\n                    'leverage_impact_trading',\n                    'leverage_trading_high_risk_stop_loss',\n                    'required_initial_margin',\n                ];\n                trading_knowledge_required_fields.forEach(field => {\n                    if (!values[field] && current_question_details.current_question.form_control === field) {\n                        errors[field] = 'error';\n                    }\n                });\n            }\n\n            return errors;\n        };\n\n        return (\n            <div className={classNames('trading-assessment', class_name)}>\n                {is_eu_user ? (\n                    <div className='details-form__banner-container'>\n                        <InlineNoteWithIcon\n                            icon='IcAlertWarning'\n                            message={localize(\n                                'To assess your trading experience and if our products are suitable for you. Please provide accurate and complete answers, as they may affect the outcome of this assessment.'\n                            )}\n                            title={localize('Why do we collect this?')}\n                        />\n                    </div>\n                ) : (\n                    <Text as='p' color='prominent' size='xxs' className='trading-assessment__side-note'>\n                        <Localize i18n_default_text='In providing our services to you, we are required to obtain information from you in order to assess whether a given product or service is appropriate for you.' />\n                    </Text>\n                )}\n                <Formik initialValues={{ ...form_value }} validate={handleValidate} onSubmit={nextButtonHandler}>\n                    {({ errors, setFieldValue, values, setErrors, touched }) => {\n                        const { question_text, form_control, answer_options, questions } =\n                            current_question_details.current_question;\n                        const has_long_question = questions?.some(\n                            question => question.question_text.length > MAX_QUESTION_TEXT_LENGTH\n                        );\n                        const is_section_required = Object.keys(values).some(\n                            field => !!errors[field] && !!touched[field]\n                        );\n\n                        return (\n                            <React.Fragment>\n                                <Text weight='bold' size='xs' className='trading-assessment__question-counter'>\n                                    <Localize\n                                        i18n_default_text='Question {{ current }} of {{ total }}'\n                                        values={{\n                                            current: current_question_details.current_question_index + 1,\n                                            total: last_question_index + 1,\n                                        }}\n                                    />\n                                    <Text color='loss-danger' size='xxs'>\n                                        {is_section_required && <Localize i18n_default_text={'* This is required'} />}\n                                    </Text>\n                                </Text>\n                                <section className={'trading-assessment__form'}>\n                                    <Form noValidate className='trading-assessment__form--layout'>\n                                        <ScrollToFieldWithError should_recollect_inputs_names={is_section_filled} />\n                                        <div\n                                            className={classNames('trading-assessment__form--fields', {\n                                                'field-layout': has_long_question,\n                                            })}\n                                        >\n                                            {questions?.length ? (\n                                                <TradingAssessmentDropdown\n                                                    item_list={questions as TQuestion[]}\n                                                    onChange={handleValueSelection}\n                                                    values={values}\n                                                    setFieldValue={setFieldValue}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            ) : (\n                                                <TradingAssessmentRadioButton\n                                                    text={question_text}\n                                                    list={answer_options ?? []}\n                                                    onChange={e => {\n                                                        handleValueSelection(\n                                                            e,\n                                                            form_control as keyof TTradingAssessmentForm,\n                                                            setFieldValue\n                                                        );\n                                                    }}\n                                                    values={values}\n                                                    form_control={form_control as keyof TTradingAssessmentForm}\n                                                    setEnableNextSection={setIsSectionFilled}\n                                                    disabled_items={disabled_items ?? []}\n                                                />\n                                            )}\n                                        </div>\n                                        <Modal.Footer\n                                            has_separator\n                                            is_bypassed={is_mobile}\n                                            className='trading-assessment__existing_btn '\n                                        >\n                                            <Button.Group className='trading-assessment__btn-group'>\n                                                {should_display_previous_button && (\n                                                    <Button\n                                                        has_effect\n                                                        onClick={() => {\n                                                            setErrors({});\n                                                            displayPreviousPage();\n                                                        }}\n                                                        text={localize('Previous')}\n                                                        type='button'\n                                                        secondary\n                                                        large\n                                                        className='trading-assessment__btn-group--btn'\n                                                    />\n                                                )}\n                                                <Button\n                                                    has_effect\n                                                    text={localize('Next')}\n                                                    large\n                                                    primary\n                                                    className='trading-assessment__btn-group--btn'\n                                                    name='Next'\n                                                />\n                                            </Button.Group>\n                                        </Modal.Footer>\n                                    </Form>\n                                </section>\n                            </React.Fragment>\n                        );\n                    }}\n                </Formik>\n            </div>\n        );\n    }\n);\n\nexport default TradingAssessmentForm;\n","import { observer, useStore } from '@deriv/stores';\nimport React from 'react';\nimport { TTradingAssessmentForm } from 'Types';\nimport TradingAssessmentForm from './trading-assessment-form';\n\ntype TradingAssessmentNewUserProps = {\n    disabled_items: string[];\n    goToNextStep: () => void;\n    goToPreviousStep: () => void;\n    onSave: (current_step: number, values: TTradingAssessmentForm) => void;\n    onCancel: (current_step: number, goToPreviousStep: () => void) => void;\n    onSubmit: (\n        current_step?: number,\n        values?: TTradingAssessmentForm,\n        goToNextStep?: () => void,\n        action?: React.ReactNode,\n        should_override?: boolean\n    ) => void;\n    getCurrentStep: () => number;\n    value: TTradingAssessmentForm;\n    setSubSectionIndex: (index: number) => void;\n};\n\nconst TradingAssessmentNewUser = observer(\n    ({\n        disabled_items,\n        goToNextStep,\n        goToPreviousStep,\n        onSave,\n        onCancel,\n        onSubmit,\n        getCurrentStep,\n        value,\n        setSubSectionIndex,\n    }: TradingAssessmentNewUserProps) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n        const handleCancel = (values: TTradingAssessmentForm) => {\n            const current_step = getCurrentStep() - 1;\n            onSave(current_step, values);\n            onCancel(current_step, goToPreviousStep);\n        };\n\n        const handleSubmit = (\n            values?: TTradingAssessmentForm,\n            actions?: React.ReactNode,\n            should_override?: boolean\n        ) => {\n            let process_form_values = { ...values };\n            if (should_override) {\n                // Remove the keys with no values\n                process_form_values = Object.entries(process_form_values).reduce((accumulator, [key, val]) => {\n                    if (val) {\n                        return { ...accumulator, [key]: val };\n                    }\n                    return { ...accumulator };\n                }, {});\n            }\n            onSubmit(getCurrentStep() - 1, process_form_values, null, goToNextStep, should_override);\n        };\n\n        return (\n            <TradingAssessmentForm\n                form_value={value}\n                onSubmit={handleSubmit}\n                onCancel={handleCancel}\n                setSubSectionIndex={setSubSectionIndex}\n                disabled_items={disabled_items}\n                should_move_to_next={false}\n                is_independent_section={false}\n                is_mobile={is_mobile}\n            />\n        );\n    }\n);\n\nexport default TradingAssessmentNewUser;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { AUTH_STATUS_CODES, MT5_ACCOUNT_STATUS, routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { TAuthStatusCodes, TMT5AccountStatus } from '../Types/common.type';\nimport { Link } from 'react-router-dom';\n\nconst getStatusBadgeConfig = (\n    mt5_account_status: TMT5AccountStatus,\n    openFailedVerificationModal?: (selected_account_type: string) => void,\n    selected_account_type?: string,\n    setIsVerificationModalVisible?: (value: boolean) => void,\n    user_account_status?: { poi_status: TAuthStatusCodes; poa_status: TAuthStatusCodes }\n) => {\n    const BadgeTextComponent = <Text key={0} weight='bold' size='xxxs' color='warning' />;\n\n    switch (mt5_account_status) {\n        case MT5_ACCOUNT_STATUS.PENDING:\n            return {\n                text: (\n                    <Localize\n                        i18n_default_text='<0>Pending verification</0>'\n                        components={[<Text key={0} weight='bold' size='xxxs' color='var(--status-warning)' />]}\n                    />\n                ),\n                icon: 'IcAlertWarning',\n            };\n        case MT5_ACCOUNT_STATUS.FAILED:\n            return {\n                text: (\n                    <Localize\n                        i18n_default_text='<0>Verification failed.</0> <1>Why?</1>'\n                        components={[\n                            <Text key={0} weight='bold' size='xxxs' color='var(--status-danger)' />,\n                            <Text\n                                key={1}\n                                className='link-verification-failed'\n                                onClick={() => {\n                                    openFailedVerificationModal?.(selected_account_type ?? '');\n                                }}\n                            />,\n                        ]}\n                    />\n                ),\n                icon: 'IcRedWarning',\n            };\n        case MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION: {\n            const redirect_url =\n                user_account_status?.poi_status === AUTH_STATUS_CODES.NONE\n                    ? routes.proof_of_identity\n                    : routes.proof_of_address;\n            return {\n                text: (\n                    <Localize\n                        i18n_default_text='<0>Needs verification.</0><1>Verify now</1>'\n                        components={[\n                            <Text key={0} weight='bold' size='xxxs' color='var(--status-info)' />,\n                            setIsVerificationModalVisible ? (\n                                <Text\n                                    key={1}\n                                    className='link-need-verification'\n                                    onClick={() => setIsVerificationModalVisible?.(true)}\n                                />\n                            ) : (\n                                <Link key={1} className='link-need-verification' to={redirect_url} />\n                            ),\n                        ]}\n                    />\n                ),\n                icon: 'IcAlertInfo',\n            };\n        }\n        case MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION:\n            return {\n                text: <Localize i18n_default_text='<0>No new positions</0>' components={[BadgeTextComponent]} />,\n                icon: 'IcAlertWarning',\n            };\n        case MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION:\n            return {\n                text: <Localize i18n_default_text='<0>Account closed</0>' components={[BadgeTextComponent]} />,\n                icon: 'IcAlertWarning',\n            };\n        default:\n            return {\n                text: '',\n                icon: '',\n            };\n    }\n};\n\nexport default getStatusBadgeConfig;\n","import React from 'react';\nimport { GetAccountStatus, ResidenceList } from '@deriv/api-types';\nimport { IDV_ERROR_STATUS, getIDVError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport PoiNameDobExample from '../Assets/ic-poi-name-dob-example.svg';\nimport PoiNameExample from '../Assets/ic-poi-name-example.svg';\nimport PoiDobExample from '../Assets/ic-poi-dob-example.svg';\nimport { getIDVDocumentType } from '../Helpers/utils';\n\nconst handleOnClick = () => window.LC_API.open_chat_window();\n\nexport const GENERIC_ERROR_MESSAGE = (\n    <Localize i18n_default_text='Sorry, an internal error occurred. Hit the above checkbox to try again.' />\n);\n\nexport const DUPLICATE_ACCOUNT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text='An account with these details already exists. Please make sure the details you entered are correct as only one real account is allowed per client. If this is a mistake, contact us via <0>live chat</0>.'\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const CLAIMED_DOCUMENT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text=\"This document number was already submitted for a different account. It seems you have an account with us that doesn't need further verification. Please contact us via <0>live chat</0> if you need help.\"\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const generateIDVError = (\n    is_document_upload_required: boolean,\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    chosen_country: DeepRequired<ResidenceList[0]>,\n    mismatch_status: keyof typeof IDV_ERROR_STATUS\n) => {\n    const document_name = is_document_upload_required\n        ? 'identity document'\n        : getIDVDocumentType(latest_status, chosen_country);\n\n    switch (mismatch_status) {\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return {\n                required_fields: ['first_name', 'last_name'],\n                side_note_image: <PoiNameExample />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.NameMismatch.message,\n            };\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return {\n                required_fields: ['date_of_birth'],\n                side_note_image: <PoiDobExample />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>date of birth</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.DobMismatch.message,\n            };\n        default:\n            return {\n                required_fields: ['first_name', 'last_name', 'date_of_birth'],\n                side_note_image: <PoiNameDobExample />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: getIDVError(mismatch_status),\n            };\n    }\n};\n","import React from 'react';\nimport { GetFinancialAssessment, GetSettings } from '@deriv/api-types';\nimport { generateValidationFunction, getDefaultFields } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { getTradingAssessmentQuestions } from '../Constants/trading-assessment-questions';\n\ntype TTradingAssessmentConfig = {\n    account_settings: GetSettings;\n    financial_assessment: GetFinancialAssessment;\n    real_account_signup_target: string;\n    setSubSectionIndex: number;\n};\n\nconst default_form_config = {\n    supported_in: ['maltainvest'],\n};\n\nexport const getTradingAssessmentFormConfig = (financial_assessment: GetFinancialAssessment) => {\n    return {\n        risk_tolerance: {\n            ...default_form_config,\n            default_value: financial_assessment?.risk_tolerance ?? '',\n        },\n        source_of_experience: {\n            ...default_form_config,\n            default_value: financial_assessment?.source_of_experience ?? '',\n        },\n        cfd_experience: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_experience ?? '',\n        },\n        cfd_frequency: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_frequency ?? '',\n        },\n        trading_experience_financial_instruments: {\n            ...default_form_config,\n            default_value: financial_assessment?.trading_experience_financial_instruments ?? '',\n        },\n        trading_frequency_financial_instruments: {\n            ...default_form_config,\n            default_value: financial_assessment?.trading_frequency_financial_instruments ?? '',\n        },\n        cfd_trading_definition: {\n            ...default_form_config,\n            default_value: financial_assessment?.cfd_trading_definition ?? '',\n        },\n        leverage_impact_trading: {\n            ...default_form_config,\n            default_value: financial_assessment?.leverage_impact_trading ?? '',\n        },\n        leverage_trading_high_risk_stop_loss: {\n            ...default_form_config,\n            default_value: financial_assessment?.leverage_trading_high_risk_stop_loss ?? '',\n        },\n        required_initial_margin: {\n            ...default_form_config,\n            default_value: financial_assessment?.required_initial_margin ?? '',\n        },\n    };\n};\n\nconst tradingAssessmentConfig = (\n    {\n        real_account_signup_target,\n        financial_assessment,\n        account_settings,\n        setSubSectionIndex,\n    }: TTradingAssessmentConfig,\n    TradingAssessmentNewUser: React.Component\n) => {\n    const trading_assessment_form_config = getTradingAssessmentFormConfig(financial_assessment);\n    return {\n        header: {\n            active_title: localize('Complete your trading assessment'),\n            title: localize('Trading assessment'),\n        },\n        body: TradingAssessmentNewUser,\n        form_value: getDefaultFields(real_account_signup_target, trading_assessment_form_config),\n        props: {\n            validate: generateValidationFunction(real_account_signup_target, trading_assessment_form_config),\n            disabled_items: account_settings?.immutable_fields,\n            setSubSectionIndex,\n        },\n        sub_step_count: getTradingAssessmentQuestions().length,\n    };\n};\n\nexport default tradingAssessmentConfig;\n","/**\n * Object containing error code strings returned by the API.\n */\nexport const API_ERROR_CODES = Object.freeze({\n    DUPLICATE_ACCOUNT: 'DuplicateAccount',\n    CLAIMED_DOCUMENT: 'ClaimedDocument',\n});\n","import { Localize } from '@deriv/translations';\nimport React from 'react';\nimport { TFilesDescription } from '../Types';\n\nexport const getFileUploaderDescriptions = (page: string): TFilesDescription => {\n    const proof_of_income_descriptions = {\n        title: <Localize i18n_default_text='The document must be recent and include your name and address:' />,\n        descriptions: [\n            {\n                id: 'signed_document',\n                value: (\n                    <Localize i18n_default_text='The document must be up-to-date and signed by the issuance authority.' />\n                ),\n            },\n            {\n                id: 'contains_letterhead',\n                value: <Localize i18n_default_text='The document must contain a letterhead.' />,\n            },\n            {\n                id: 'invalid_rejected',\n                value: <Localize i18n_default_text='Invalid or incomplete documents shall be rejected.' />,\n            },\n        ],\n    };\n    const proof_of_address_descriptions = {\n        title: (\n            <Localize i18n_default_text='We accept only these types of documents as proof of your address. The document must be recent (issued within last 6 months) and include your name and address:' />\n        ),\n        descriptions: [\n            {\n                id: 'utility_bill',\n                value: <Localize i18n_default_text='Utility bill: electricity, water, gas, or landline phone bill.' />,\n            },\n            {\n                id: 'financial_legal_government_document',\n                value: (\n                    <Localize i18n_default_text='Financial, legal, or government document: recent bank statement, affidavit, or government-issued letter.' />\n                ),\n            },\n            {\n                id: 'home_rental_agreement',\n                value: <Localize i18n_default_text='Home rental agreement: valid and current agreement.' />,\n            },\n        ],\n    };\n\n    if (page === 'poinc') return proof_of_income_descriptions;\n    if (page === 'poa') return proof_of_address_descriptions;\n    return { title: '', descriptions: [] };\n};\n","import { localize } from '@deriv/translations';\n\n// Note: Ensure that the object keys matches BE API's keys. This is simply a mapping for FE templates\n\nconst getIDVDocumentConfig = () => ({\n    ke: {\n        alien_card: {\n            new_display_name: '',\n            example_format: '123456',\n        },\n        national_id: {\n            new_display_name: '',\n            example_format: '12345678',\n        },\n        passport: {\n            new_display_name: '',\n            example_format: 'A12345678',\n        },\n    },\n    za: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '1234567890123',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: '1234567890123',\n        },\n    },\n    ng: {\n        bvn: {\n            new_display_name: localize('Bank Verification Number'),\n            example_format: '12345678901',\n        },\n        cac: {\n            new_display_name: localize('Corporate Affairs Commission'),\n            example_format: '12345678',\n        },\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'ABC123456789',\n        },\n        nin: {\n            new_display_name: localize('National Identity Number'),\n            example_format: '12345678901',\n        },\n        nin_slip: {\n            new_display_name: localize('National Identity Number Slip'),\n            example_format: '12345678901',\n        },\n        tin: {\n            new_display_name: localize('Taxpayer identification number'),\n            example_format: '12345678-1234',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '1234567890123456789',\n        },\n    },\n    gh: {\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'B1234567',\n        },\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'GHA-123456789-1',\n        },\n        passport: {\n            new_display_name: localize('Passport'),\n            example_format: 'G1234567',\n        },\n        ssnit: {\n            new_display_name: localize('Social Security and National Insurance Trust'),\n            example_format: 'C123456789012',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '01234567890',\n        },\n    },\n    br: {\n        cpf: {\n            new_display_name: localize('CPF'),\n            example_format: '123.456.789-12',\n        },\n    },\n    ug: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'CM12345678PE1D',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: 'CM12345678PE1D',\n            additional_document_example_format: '0123456789',\n        },\n    },\n    zw: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '081234567F53',\n        },\n    },\n    cl: {\n        national_id: {\n            example_format: '123456789',\n        },\n    },\n    ar: {\n        dni: {\n            example_format: '12345678',\n        },\n    },\n    mx: {\n        curp: {\n            example_format: 'ABCD123456HEFGIJ00',\n        },\n    },\n    id: {\n        nik: {\n            example_format: '1234567890123456',\n        },\n    },\n    in: {\n        aadhaar: {\n            example_format: '123456789012',\n            additional_document_example_format: 'ABCDE1234F',\n        },\n        drivers_license: {\n            example_format: 'AB1234567890123',\n        },\n        epic: {\n            example_format: 'ABC1234567',\n        },\n        pan: {\n            example_format: 'ABCDE1234F',\n        },\n        passport: {\n            example_format: 'A1234567',\n            additional_document_example_format: 'AB1234567890123',\n        },\n    },\n    pe: {\n        national_id: {\n            example_format: '12345678',\n        },\n    },\n    vn: {\n        national_id: {\n            example_format: '12345678901',\n        },\n    },\n});\n\nexport const getIDVDocuments = (country_code: string) => {\n    const IDV_DOCUMENT_DATA: { [key: string]: object } = getIDVDocumentConfig();\n    return IDV_DOCUMENT_DATA[country_code];\n};\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\n\n//TODO: Check if these phrases are required;\nexport const getOnfidoPhrases = () => ({\n    country_select: {\n        alert_dropdown: {\n            country_not_found: <Localize i18n_default_text='Country not found' />,\n        },\n        alert: {\n            another_doc: (\n                <Localize i18n_default_text='Documents from that country are not currently supported — <fallback>try another document type</fallback>' />\n            ),\n        },\n        button_primary: <Localize i18n_default_text='Submit document' />,\n        search: {\n            accessibility: <Localize i18n_default_text='Select country' />,\n            input_placeholder: <Localize i18n_default_text='e.g. United States' />,\n            label: <Localize i18n_default_text='Search for country' />,\n        },\n        title: <Localize i18n_default_text='Select issuing country' />,\n    },\n    cross_device_checklist: {\n        button_primary: <Localize i18n_default_text='Submit verification' />,\n        info: <Localize i18n_default_text='Tips' />,\n        list_item_doc_multiple: <Localize i18n_default_text='Documents uploaded' />,\n        list_item_doc_one: <Localize i18n_default_text='Document uploaded' />,\n        list_item_selfie: <Localize i18n_default_text='Selfie uploaded' />,\n        subtitle: <Localize i18n_default_text=\"We're now ready to verify your identity\" />,\n        title: <Localize i18n_default_text=\"Great, that's everything we need\" />,\n    },\n    cross_device_error_desktop: {\n        subtitle: <Localize i18n_default_text='The link only works on mobile devices' />,\n        title: <Localize i18n_default_text=\"Something's gone wrong\" />,\n    },\n    cross_device_error_restart: {\n        subtitle: <Localize i18n_default_text=\"You'll need to restart your verification on your computer\" />,\n        title: <Localize i18n_default_text=\"Something's gone wrong\" />,\n    },\n    cross_device_intro: {\n        button_primary: <Localize i18n_default_text='Get secure link' />,\n        list_accessibility: <Localize i18n_default_text='Steps required to continue verification on your mobile' />,\n        list_item_finish: <Localize i18n_default_text='Check back here to finish the submission' />,\n        list_item_open_link: <Localize i18n_default_text='Open the link and complete the tasks' />,\n        list_item_send_phone: <Localize i18n_default_text='Send a secure link to your phone' />,\n        subtitle: <Localize i18n_default_text=\"Here's how to do it:\" />,\n        title: <Localize i18n_default_text='Continue on your phone' />,\n    },\n    cross_device_return: {\n        body: <Localize i18n_default_text='Your computer may take a few seconds to update' />,\n        subtitle: <Localize i18n_default_text='You can now return to your computer to continue' />,\n        title: <Localize i18n_default_text='Uploads successful' />,\n    },\n    doc_confirmation: {\n        alert: {\n            blur_detail: <Localize i18n_default_text='Make sure everything is clear' />,\n            blur_title: <Localize i18n_default_text='Blurry photo detected' />,\n            crop_detail: <Localize i18n_default_text='Make sure full document is visible' />,\n            crop_title: <Localize i18n_default_text='Cut-off image detected' />,\n            glare_detail: <Localize i18n_default_text='Move away from direct light' />,\n            glare_title: <Localize i18n_default_text='Glare detected' />,\n            no_doc_detail: <Localize i18n_default_text='Make sure all of the document is in the photo' />,\n            no_doc_title: <Localize i18n_default_text='No document detected' />,\n        },\n        body_id: <Localize i18n_default_text='Make sure your card details are clear to read, with no blur or glare' />,\n        body_image_medium: <Localize i18n_default_text='It’ll take longer to verify you if we can’t read it' />,\n        body_image_poor: <Localize i18n_default_text='To smoothly verify you, we need a better photo' />,\n        body_license: (\n            <Localize i18n_default_text='Make sure your license details are clear to read, with no blur or glare' />\n        ),\n        body_passport: (\n            <Localize i18n_default_text='Make sure your passport details are clear to read, with no blur or glare' />\n        ),\n        body_permit: (\n            <Localize i18n_default_text='Make sure your permit details are clear to read, with no blur or glare' />\n        ),\n        body_tax_letter: <Localize i18n_default_text='Make sure details are clear to read, with no blur or glare' />,\n        button_close: <Localize i18n_default_text='Close' />,\n        button_primary_redo: <Localize i18n_default_text='Redo' />,\n        button_primary_upload: <Localize i18n_default_text='Confirm' />,\n        button_primary_upload_anyway: <Localize i18n_default_text='Upload anyway' />,\n        button_secondary_redo: <Localize i18n_default_text='Redo' />,\n        button_zoom: <Localize i18n_default_text='Enlarge image' />,\n        image_accessibility: <Localize i18n_default_text='Photo of your document' />,\n        title: <Localize i18n_default_text='Check your image' />,\n    },\n    doc_select: {\n        button_id: <Localize i18n_default_text='Identity card' />,\n        button_id_detail: <Localize i18n_default_text='Front and back' />,\n        button_license: <Localize i18n_default_text=\"Driver's license\" />,\n        button_license_detail: <Localize i18n_default_text='Front and back' />,\n        button_passport: <Localize i18n_default_text='Passport' />,\n        button_passport_detail: <Localize i18n_default_text='Face photo page' />,\n        button_permit: <Localize i18n_default_text='Residence permit' />,\n        button_permit_detail: <Localize i18n_default_text='Front and back' />,\n        extra_no_mobile: <Localize i18n_default_text='Sorry, no mobile phone bills' />,\n        list_accessibility: <Localize i18n_default_text='Documents you can use to verify your identity' />,\n        subtitle: <Localize i18n_default_text='It must be an official photo ID' />,\n        subtitle_poa: (\n            <Localize i18n_default_text='These are the documents most likely to show your current home address' />\n        ),\n        title: <Localize i18n_default_text='Choose document' />,\n        title_poa: <Localize i18n_default_text='Select a %{country} document' />,\n    },\n    doc_submit: {\n        button_link_upload: <Localize i18n_default_text='or upload photo – no scans or photocopies' />,\n        button_primary: <Localize i18n_default_text='Continue on phone' />,\n        subtitle: <Localize i18n_default_text='Take a photo with your phone' />,\n        title_id_back: <Localize i18n_default_text='Submit identity card (back)' />,\n        title_id_front: <Localize i18n_default_text='Submit identity card (front)' />,\n        title_license_back: <Localize i18n_default_text='Submit license (back)' />,\n        title_license_front: <Localize i18n_default_text='Submit license (front)' />,\n        title_passport: <Localize i18n_default_text='Submit passport photo page' />,\n        title_permit_back: <Localize i18n_default_text='Submit residence permit (back)' />,\n        title_permit_front: <Localize i18n_default_text='Submit residence permit (front)' />,\n    },\n    error_unsupported_browser: {\n        subtitle_android: <Localize i18n_default_text='Restart the process on the latest version of Google Chrome' />,\n        subtitle_ios: <Localize i18n_default_text='Restart the process on the latest version of Safari' />,\n        title_android: <Localize i18n_default_text='Unsupported browser' />,\n        title_ios: <Localize i18n_default_text='Unsupported browser' />,\n    },\n    generic: {\n        accessibility: {\n            close_sdk_screen: <Localize i18n_default_text='Close identity verification screen' />,\n            dismiss_alert: <Localize i18n_default_text='Dismiss alert' />,\n        },\n        back: <Localize i18n_default_text='back' />,\n        close: <Localize i18n_default_text='close' />,\n        errors: {\n            interrupted_flow_error: {\n                instruction: <Localize i18n_default_text='Restart process on a different device' />,\n                message: <Localize i18n_default_text='Camera not detected' />,\n            },\n            invalid_size: {\n                instruction: <Localize i18n_default_text='Must be under 10MB.' />,\n                message: <Localize i18n_default_text='File size exceeded.' />,\n            },\n            invalid_type: {\n                instruction: <Localize i18n_default_text='Try using another file type.' />,\n                message: <Localize i18n_default_text='File not uploaded.' />,\n            },\n            lazy_loading: {\n                message: <Localize i18n_default_text='An error occurred while loading the component' />,\n            },\n            multiple_faces: {\n                instruction: <Localize i18n_default_text='Only your face can be in the selfie' />,\n                message: <Localize i18n_default_text='Multiple faces found' />,\n            },\n            no_face: {\n                instruction: <Localize i18n_default_text='Your face is needed in the selfie' />,\n                message: <Localize i18n_default_text='No face found' />,\n            },\n            request_error: {\n                instruction: <Localize i18n_default_text='Please try again' />,\n                message: <Localize i18n_default_text='Connection lost' />,\n            },\n            sms_failed: {\n                instruction: <Localize i18n_default_text='Copy the link to your phone' />,\n                message: <Localize i18n_default_text=\"Something's gone wrong\" />,\n            },\n            sms_overuse: {\n                instruction: <Localize i18n_default_text='Copy the link to your phone' />,\n                message: <Localize i18n_default_text='Too many failed attempts' />,\n            },\n            unsupported_file: {\n                instruction: <Localize i18n_default_text='Try using a JPG or PNG file' />,\n                message: <Localize i18n_default_text='File type not supported' />,\n            },\n        },\n        lazy_load_placeholder: <Localize i18n_default_text='Loading...' />,\n        loading: <Localize i18n_default_text='Loading' />,\n    },\n    get_link: {\n        alert_wrong_number: <Localize i18n_default_text='Check that your number is correct' />,\n        button_copied: <Localize i18n_default_text='Copied' />,\n        button_copy: <Localize i18n_default_text='Copy' />,\n        button_submit: <Localize i18n_default_text='Send link' />,\n        info_qr_how: <Localize i18n_default_text='How to scan a QR code' />,\n        info_qr_how_list_item_camera: <Localize i18n_default_text='Point your phone’s camera at the QR code' />,\n        info_qr_how_list_item_download: (\n            <Localize i18n_default_text='If it doesn’t work, download a QR code scanner from Google Play or the App Store' />\n        ),\n        link_divider: <Localize i18n_default_text='or' />,\n        link_qr: <Localize i18n_default_text='Scan QR code' />,\n        link_sms: <Localize i18n_default_text='Get link via SMS' />,\n        link_url: <Localize i18n_default_text='Copy link' />,\n        loader_sending: <Localize i18n_default_text='Sending' />,\n        number_field_input_placeholder: <Localize i18n_default_text='Enter mobile number' />,\n        number_field_label: <Localize i18n_default_text='Enter your mobile number:' />,\n        subtitle_qr: <Localize i18n_default_text='Scan the QR code with your phone' />,\n        subtitle_sms: <Localize i18n_default_text='Send this one-time link to your phone' />,\n        subtitle_url: <Localize i18n_default_text='Open the link on your mobile' />,\n        title: <Localize i18n_default_text='Get your secure link' />,\n        url_field_label: <Localize i18n_default_text='Copy the link to your mobile browser' />,\n    },\n    linked_computer: {\n        button_primary: <Localize i18n_default_text='Continue' />,\n        info: <Localize i18n_default_text='Make sure§' />,\n        list_item_desktop_open: <Localize i18n_default_text='2. Your desktop window stays open' />,\n        list_item_sent_by_you: <Localize i18n_default_text='1. This link was sent by you' />,\n        subtitle: <Localize i18n_default_text='Continue with the verification' />,\n        title: <Localize i18n_default_text='Linked to your computer' />,\n    },\n    mobilePhrases: {\n        photo_upload: {\n            body_id_back: <Localize i18n_default_text='Take a photo of the back of your card' />,\n            body_id_front: <Localize i18n_default_text='Take a photo of the front of your card' />,\n            body_license_back: <Localize i18n_default_text='Take a photo of the back of your license' />,\n            body_license_front: <Localize i18n_default_text='Take a photo of the front of your license' />,\n            body_passport: <Localize i18n_default_text='Take a photo of your passport photo page' />,\n            body_selfie: <Localize i18n_default_text='Take a selfie showing your face' />,\n        },\n        selfie_capture: {\n            alert: {\n                camera_inactive: {\n                    detail: (\n                        <Localize i18n_default_text='Take a photo using the <fallback>basic camera mode</fallback> instead' />\n                    ),\n                },\n                camera_not_working: {\n                    detail: (\n                        <Localize i18n_default_text='Take a photo using the <fallback>basic camera mode</fallback> instead' />\n                    ),\n                },\n            },\n        },\n        upload_guide: {\n            button_primary: <Localize i18n_default_text='Take a photo' />,\n            title: <Localize i18n_default_text='Passport photo page' />,\n        },\n    },\n    outro: {\n        body: <Localize i18n_default_text='Thank you' />,\n        title: <Localize i18n_default_text='Verification complete' />,\n    },\n    permission_recovery: {\n        button_primary: <Localize i18n_default_text='Refresh' />,\n        info: <Localize i18n_default_text='Recovery' />,\n        list_header_cam: <Localize i18n_default_text='Follow these steps to recover camera access:' />,\n        list_item_action_cam: (\n            <Localize i18n_default_text='Refresh this page to restart the identity verification process' />\n        ),\n        list_item_how_to_cam: <Localize i18n_default_text='Grant access to your camera from your browser settings' />,\n        subtitle_cam: <Localize i18n_default_text='Recover camera access to continue face verification' />,\n        title_cam: <Localize i18n_default_text='Camera access is denied' />,\n    },\n    permission: {\n        body_cam: <Localize i18n_default_text='We cannot verify you without using your camera' />,\n        button_primary_cam: <Localize i18n_default_text='Enable camera' />,\n        subtitle_cam: <Localize i18n_default_text='When prompted, you must enable camera access to continue' />,\n        title_cam: <Localize i18n_default_text='Allow camera access' />,\n    },\n    photo_upload: {\n        body_bank_statement: <Localize i18n_default_text='Provide the whole document page for best results' />,\n        body_benefits_letter: <Localize i18n_default_text='Provide the whole document page for best results' />,\n        body_bill: <Localize i18n_default_text='Provide the whole document page for best results' />,\n        body_government_letter: <Localize i18n_default_text='Provide the whole document page for best results' />,\n        body_id_back: <Localize i18n_default_text='Upload back of card from your computer' />,\n        body_id_front: <Localize i18n_default_text='Upload front of card from your computer' />,\n        body_license_back: <Localize i18n_default_text='Upload back of license from your computer' />,\n        body_license_front: <Localize i18n_default_text='Upload front of license from your computer' />,\n        body_passport: <Localize i18n_default_text='Upload passport photo page from your computer' />,\n        body_selfie: <Localize i18n_default_text='Upload a selfie from your computer' />,\n        body_tax_letter: <Localize i18n_default_text='Provide the whole document page for best results' />,\n        button_take_photo: <Localize i18n_default_text='Take photo' />,\n        button_upload: <Localize i18n_default_text='Upload' />,\n        title_selfie: <Localize i18n_default_text='Selfie' />,\n    },\n    selfie_capture: {\n        alert: {\n            camera_inactive: {\n                detail: (\n                    <Localize i18n_default_text='Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>' />\n                ),\n                detail_no_fallback: <Localize i18n_default_text='Make sure your device has a working camera' />,\n                title: <Localize i18n_default_text='Camera not working?' />,\n            },\n            camera_not_working: {\n                detail: (\n                    <Localize i18n_default_text='It may be disconnected. <fallback>Try using your phone instead</fallback>.' />\n                ),\n                detail_no_fallback: <Localize i18n_default_text=\"Make sure your device's camera works\" />,\n                title: <Localize i18n_default_text='Camera not working' />,\n            },\n            timeout: {\n                detail: (\n                    <Localize i18n_default_text=\"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\" />\n                ),\n                title: <Localize i18n_default_text='Looks like you took too long' />,\n            },\n        },\n        button_accessibility: <Localize i18n_default_text='Take a photo' />,\n        frame_accessibility: <Localize i18n_default_text='View from camera' />,\n        title: <Localize i18n_default_text='Take a selfie' />,\n    },\n    selfie_confirmation: {\n        image_accessibility: <Localize i18n_default_text='Photo of your face' />,\n        subtitle: <Localize i18n_default_text='Make sure your selfie clearly shows your face' />,\n        title: <Localize i18n_default_text='Check selfie' />,\n    },\n    selfie_intro: {\n        button_primary: <Localize i18n_default_text='Continue' />,\n        list_accessibility: <Localize i18n_default_text='Tips to take a good selfie' />,\n        list_item_face_forward: (\n            <Localize i18n_default_text='Face forward and make sure your eyes are clearly visible' />\n        ),\n        list_item_no_glasses: <Localize i18n_default_text='Remove your glasses, if necessary' />,\n        subtitle: <Localize i18n_default_text=\"We'll compare it with your document\" />,\n        title: <Localize i18n_default_text='Take a selfie' />,\n    },\n    sms_sent: {\n        info: <Localize i18n_default_text='Tips' />,\n        info_link_expire: <Localize i18n_default_text='Your link will expire in one hour' />,\n        info_link_window: <Localize i18n_default_text='Keep this window open while using your mobile' />,\n        link: <Localize i18n_default_text='Resend link' />,\n        subtitle: <Localize i18n_default_text=\"We've sent a secure link to %{number}\" />,\n        subtitle_minutes: <Localize i18n_default_text='It may take a few minutes to arrive' />,\n        title: <Localize i18n_default_text='Check your mobile' />,\n    },\n    switch_phone: {\n        info: <Localize i18n_default_text='Tips' />,\n        info_link_expire: <Localize i18n_default_text='Your mobile link will expire in one hour' />,\n        info_link_refresh: <Localize i18n_default_text=\"Don't refresh this page\" />,\n        info_link_window: <Localize i18n_default_text='Keep this window open while using your mobile' />,\n        link: <Localize i18n_default_text='Cancel' />,\n        subtitle: <Localize i18n_default_text=\"Once you\\'ve finished we'll take you to the next step\" />,\n        title: <Localize i18n_default_text='Connected to your mobile' />,\n    },\n    upload_guide: {\n        button_primary: <Localize i18n_default_text='Upload photo' />,\n        image_detail_blur_alt: <Localize i18n_default_text='Example of a blurry document' />,\n        image_detail_blur_label: <Localize i18n_default_text='All details must be clear — nothing blurry' />,\n        image_detail_cutoff_alt: <Localize i18n_default_text='Example of a cut-off document' />,\n        image_detail_cutoff_label: <Localize i18n_default_text='Show all details — including the bottom 2 lines' />,\n        image_detail_glare_alt: <Localize i18n_default_text='Example of a document with glare' />,\n        image_detail_glare_label: <Localize i18n_default_text='Move away from direct light — no glare' />,\n        image_detail_good_alt: <Localize i18n_default_text='Document example' />,\n        image_detail_good_label: <Localize i18n_default_text='The photo should clearly show your document' />,\n        subtitle: <Localize i18n_default_text='Scans and photocopies are not accepted' />,\n        title: <Localize i18n_default_text='Upload passport photo page' />,\n    },\n});\n\nexport const LANGUAGE_CODES = {\n    ID: 'id_ID',\n    EN: 'en_US',\n};\n","import { localize } from '@deriv/translations';\n\nexport const getTradingAssessmentQuestions = () => [\n    {\n        question_text: localize(\n            'Do you understand that you could potentially lose 100% of the money you use to trade?'\n        ),\n        section: 'risk_tolerance',\n        answer_options: [\n            { text: localize('Yes'), value: 'Yes' },\n            { text: localize('No'), value: 'No' },\n        ],\n        form_control: 'risk_tolerance',\n        field_type: 'radio',\n    },\n    {\n        question_text: localize('How much knowledge and experience do you have in relation to online trading?'),\n        section: 'source_of_experience',\n        form_control: 'source_of_experience',\n        answer_options: [\n            {\n                text: localize(\n                    'I have an academic degree, professional certification, and/or work experience related to financial services.'\n                ),\n                value: 'I have an academic degree, professional certification, and/or work experience.',\n            },\n            {\n                text: localize(\n                    'I trade forex CFDs and other complex financial instruments regularly on other platforms.'\n                ),\n                value: 'I trade forex CFDs and other complex financial instruments.',\n            },\n            {\n                text: localize('I have attended seminars, training, and/or workshops related to trading.'),\n                value: 'I have attended seminars, training, and/or workshops.',\n            },\n            {\n                text: localize('I am interested in trading but have very little experience.'),\n                value: 'I have little experience.',\n            },\n            {\n                text: localize('I have no knowledge and experience in trading at all.'),\n                value: 'I have no knowledge.',\n            },\n        ],\n        field_type: 'radio',\n    },\n    {\n        section: 'trading_experience',\n        questions: [\n            {\n                question_text: localize('How much experience do you have in CFD trading?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_experience',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How many CFD trades have you placed in the past 12 months?'),\n                field_type: 'dropdown',\n                form_control: 'cfd_frequency',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n            {\n                question_text: localize('How much experience do you have with other financial instruments?'),\n                field_type: 'dropdown',\n                form_control: 'trading_experience_financial_instruments',\n                answer_options: [\n                    {\n                        text: localize('No experience'),\n                        value: 'No experience',\n                    },\n                    {\n                        text: localize('Less than a year'),\n                        value: 'Less than a year',\n                    },\n                    {\n                        text: localize('1 - 2 years'),\n                        value: '1 - 2 years',\n                    },\n                    {\n                        text: localize('Over 3 years'),\n                        value: 'Over 3 years',\n                    },\n                ],\n            },\n            {\n                question_text: localize(\n                    'How many trades have you placed with other financial instruments in the past 12 months?'\n                ),\n                form_control: 'trading_frequency_financial_instruments',\n                field_type: 'dropdown',\n                answer_options: [\n                    {\n                        text: localize('None'),\n                        value: 'No transactions in the past 12 months',\n                    },\n                    {\n                        text: '1 - 5',\n                        value: '1 - 5 transactions in the past 12 months',\n                    },\n                    {\n                        text: '6 - 10',\n                        value: '6 - 10 transactions in the past 12 months',\n                    },\n                    {\n                        text: '11 - 39',\n                        value: '11 - 39 transactions in the past 12 months',\n                    },\n                    {\n                        text: localize('40 or more'),\n                        value: '40 transactions or more in the past 12 months',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        question_text: localize('In your understanding, CFD trading allows you to'),\n        section: 'trading_knowledge',\n        form_control: 'cfd_trading_definition',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Purchase commodities or shares of a company.'),\n                value: 'Purchase shares of a company or physical commodities.',\n            },\n            {\n                text: localize(\n                    'Place a position on the price movement of an asset where the outcome is a fixed return or nothing at all.'\n                ),\n                value: 'Place a bet on the price movement.',\n            },\n            {\n                text: localize('Speculate on the price movement of an asset without actually owning it.'),\n                value: 'Speculate on the price movement.',\n            },\n            {\n                text: localize('Make a long-term investment for a guaranteed profit.'),\n                value: 'Make a long-term investment.',\n            },\n        ],\n    },\n    {\n        question_text: localize('How does leverage affect CFD trading?'),\n        section: 'trading_knowledge',\n        form_control: 'leverage_impact_trading',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Leverage helps to mitigate risk.'),\n                value: 'Leverage is a risk mitigation technique.',\n            },\n            {\n                text: localize('Leverage prevents you from opening large positions.'),\n                value: 'Leverage prevents you from opening large positions.',\n            },\n            { text: localize('Leverage guarantees profits.'), value: 'Leverage guarantees profits.' },\n            {\n                text: localize(\n                    'Leverage lets you open large positions for a fraction of trade value, which may result in increased profit or loss.'\n                ),\n                value: \"Leverage lets you open larger positions for a fraction of the trade's value.\",\n            },\n        ],\n    },\n    {\n        question_text: localize(\n            \"Leverage trading is high-risk, so it's a good idea to use risk management features such as stop loss. Stop loss allows you to\"\n        ),\n        section: 'trading_knowledge',\n        form_control: 'leverage_trading_high_risk_stop_loss',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('Cancel your trade at any time within a specified timeframe.'),\n                value: 'Cancel your trade at any time within a chosen timeframe.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the loss is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the loss is more than or equal to a specific amount.',\n            },\n            {\n                text: localize(\n                    'Close your trade automatically when the profit is equal to or more than a specified amount, as long as there is adequate market liquidity.'\n                ),\n                value: 'Close your trade automatically when the profit is more than or equal to a specific amount.',\n            },\n            {\n                text: localize('Make a guaranteed profit on your trade.'),\n                value: 'Make a guaranteed profit on your trade.',\n            },\n        ],\n    },\n    {\n        question_text: localize('When are you required to pay an initial margin?'),\n        section: 'trading_knowledge',\n        form_control: 'required_initial_margin',\n        field_type: 'radio',\n        answer_options: [\n            {\n                text: localize('When opening a leveraged CFD trade.'),\n                value: 'When opening a Leveraged CFD trade.',\n            },\n            { text: localize('When trading multipliers.'), value: 'When trading Multipliers.' },\n            {\n                text: localize('When buying shares of a company.'),\n                value: 'When buying shares of a company.',\n            },\n            { text: localize('All of the above.'), value: 'All of the above.' },\n        ],\n    },\n];\n"],"names":["observer","getCurrentStep","onSave","onCancel","goToNextStep","goToPreviousStep","validate","onSubmit","disabled_items","selected_step_ref","has_real_account","props","React","address_state_to_display","setAddressStateToDisplay","useStore","ui","residence","client","is_eu_user","traders_hub","is_desktop","is_mobile","useStatesList","states_list","data","isFetched","handleCancel","values","current_step","Formik","initialValues","value","splitValidationResultTypes","errors","validateOnMount","actions","address_state","length","getLocation","setSubmitting","handleSubmit","isSubmitting","setFieldValue","handleChange","setFieldTouched","AutoHeightWrapper","default_height","height_offset","setRef","height","ref","noValidate","Div100vhContainer","className","is_disabled","icon","message","Localize","i18n_default_text","title","localize","Text","as","align","size","line_height","ThemedScrollbars","classNames","name","required","label","maxLength","placeholder","disabled","includes","address_line_1","address_line_2","address_city","Loading","is_fullscreen","Field","field","DesktopWrapper","Autocomplete","autoComplete","type","list_items","onItemSelection","text","list_portal_id","MobileWrapper","SelectNative","use_text","onChange","e","target","address_postcode","Modal","has_separator","is_bypassed","FormSubmitButton","is_absolute","has_cancel","cancel_label","popover_message","id","test","components","key","Popover","alignment","disable_message_icon","is_bubble_hover_enabled","zIndex","onBlur","second_line_label","onClick","checked","selected","htmlFor","Icon","toLowerCase","getCurrencyDisplayCode","children","is_title_enabled","is_fiat","item_count","description","has_fiat","useState","is_currency_selected","setIsCurrencySelected","Hr","goToStep","set_currency","has_wallet_account","currency","has_active_real_account","legal_allowed_currencies","upgradeable_currencies","available_crypto_currencies","is_dxtrade_allowed","is_mt5_allowed","accounts","has_currency","Boolean","real_account_signup","real_account_signup_target","resetRealAccountSignupParams","crypto","filter","selected_currency","String","CURRENCY_TYPE","fiat","is_bypass_step","setIsBypassStep","should_disable_fiat","Object","item","landing_company_shortcode","error_code","error_details","keys","route_to_address_details","getAddressDetailsFields","dmt5_label","platform_name_dxtrade","getPlatformSettings","reorderCurrencies","map","avbl_currency","component","RadioButton","crypto_data","is_center","has_button","has_any_real_account","toggleAccountsDialog","toggleShouldShowRealAccountsList","color","isMobile","weight","Button","primary","has_demo_icon","header","redirect_label","redirectOnClick","should_show_refresh","refresh_message","PageError","messages","redirect_urls","routes","redirect_labels","buttonOnClick","location","reload","descriptions","UploadMessage","onFileDrop","onError","document_files","setDocumentFiles","file_error","setFileError","FileDropzone","accept","supported_filetypes","error_message","filename_limit","hover_message","max_size","max_document_size","multiple","onDropAccepted","files","onDropRejected","is_file_too_large","file","supported_files","each_file","getSupportedFiles","validation_error_message","data_testid","examples","files_description","EMPLOYMENT_VALUES","getAccountTurnoverList","getOccupationList","getFormattedOccupationList","employment_status","FinancialDetailsDropdownField","dropdown_list","field_key","useFormikContext","handleBlur","touched","Dropdown","is_align_text_left","list","error","FinancialDetailsOccupationDropdownField","getFormattedOccupationValues","occupation","fields_to_scroll_top","fields_to_scroll_bottom","isDesktop","autohide","window","innerHeight","Number","has_side_note","side_note","side_note_position","ScrollbarsContainer","scroll_offset","subtitle","title_text_size","title_as_class","replace","warn","rest","form","Input","undefined","portal_id","meta","DateOfBirthPicker","toMoment","format","class_name","selected_country","hide_hint","can_skip_document_verification","document_list","setDocumentList","selected_doc","setSelectedDoc","document_data","identity","services","idv","documents_supported","default_document","example_format","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","document_types","new_document_list","d","display_name","getDocumentData","new_display_name","additional_document_example_format","additional","resetDocumentItemSelected","getDocument","find","onKeyUp","document_name","document_type","current_input","formatInput","bindDocumentData","selected_document","bottom_label","getExampleFormat","document_number","generatePlaceholderText","onPaste","preventEmptyClipboardPaste","additional_document_placeholder","document_additional","inline_note_text","is_virtual","is_svg","is_rendered_for_idv","editable_fields","residence_list","is_fully_authenticated","account_opening_reason_list","closeRealAccountSignup","salutation_list","is_rendered_for_onfido","is_qualified_for_poa","should_close_tooltip","setShouldCloseTooltip","no_confirmation_needed","mismatch_status","is_svg_only","is_tax_residence_popover_open","setIsTaxResidencePopoverOpen","is_tin_popover_open","setIsTinPopoverOpen","handleToolTipStatus","getNameAndDobLabels","is_asterisk_needed","first_name_label","last_name_label","dob_label","is_rendered_for_idv_or_onfido","getFieldHint","field_name","poa_clarification_message","is_confirmation_checkbox_disabled","verifyFields","some","InlineMessage","font_size","Link","to","event","RadioGroup","salutation","onToggle","persist","isFieldImmutable","has_error","hint","first_name","last_name","date_of_birth","PlaceOfBirthField","citizen","should_hide_disabled_options","PhoneField","phone","TaxResidenceField","TaxIdentificationNumberField","getEmploymentStatusList","Checkbox","tax_identification_confirm","legal_entity_name","getLegalEntityName","withTabIndex","AccountOpeningReasonField","account_opening_reason","confirmation_checkbox","label_font_size","no_header","validPhone","stopPropagation","is_open","tagName","rel","href","should_recollect_inputs_names","all_page_inputs_names","setAllPageInputsNames","scrollToElement","element_name","block","el","document","querySelector","target_element","parentElement","scrollIntoView","behavior","focus","inputs","querySelectorAll","input","current_error_field_name","input_name","prototype","hasOwnProperty","call","full_width","is_disabled_for_mobile","LeaveConfirmMessage","back","leave","has_effect","secondary","large","TransitionBlockerWithRouter","withRouter","dirty","onDirty","show","setShow","next_location","setNextLocation","history","useHistory","unblock","pathname","push","small","toggleModal","FormikConsumer","formik","submitCount","account_status","account_settings","setNoConfirmationNeeded","PoiNameDobExampleIcon","PoiNameDobExample","trackEvent","payload","Analytics","step_codename","landing_company","action","shouldShowIdentityInformation","closeToolTip","residence_data","idv_error","isDocumentTypeValid","isAdditionalDocumentValid","isDocumentNumberValid","removeEmptyPropertiesFromObject","validateIDV","enableReinitialize","user_choice","JSON","stringify","is_confirmed","selected_document_type_id","Form","onScroll","testId","style","paddingBottom","CommonMistakeExamplePartials","image","role","example_images","IcDocumentNameMismatch","IcDocumentAddressMismatch","IcOldIssuedDocument","IcBlurryDocument","IcCroppedDocument","IcEnvelope","config","ContinueTradingButton","ButtonLink","DEFAULT_BTN_TEXT","custom_text","needs_poi","redirect_button","is_redirected_from_platform","isNavigationFromP2P","isNavigationFromDerivGO","Verified","i","handleBack","handleViewComplete","getChangeableFields","side_note_image","form_initial_values","filterObjProperties","changeable_fields","initial_values","submitHandler","setStatus","status","request","makeSettingsRequest","WS","response_error","code","API_ERROR_CODES","DUPLICATE_ACCOUNT_ERROR_MESSAGE","GENERIC_ERROR_MESSAGE","get_settings","submit_data","identity_verification_document_add","formatIDVFormValues","idv_update_response","CLAIMED_DOCUMENT_ERROR_MESSAGE","error_msg","needs_additional_document","shouldHideHelperImage","validateValues","val","validateName","isValid","HintBox","is_danger","is_from_external","IDV_ERROR_STATUS","latest_status","setIsAlreadyAttempted","required_fields","failure_message","idv_failure","setIdvFailure","is_loading","setIsLoading","api_error","rest_state","setRestState","is_document_upload_required","chosen_country","country_code","initializeFormValues","form_data","initial_form_values","sample_image","error_config","generateIDVError","response","prev_state","issuing_country","isEmptyObject","handleRequireSubmission","IdvSubmitComplete","needs_poa","is_already_attempted","is_mismatch_error","is_expired_or_failed_error","poa_button","getHeaderText","header_Text","GoToPersonalDetailsButton","anchor","from","from_string","anchor_string","has_invalid_postal_code","is_appstore","PlatformContext","PoiButton","onFormConfirm","setChecked","show_form","then","setTimeout","handleSelectionNext","setSelectedCountry","POIContext","useResidenceList","country_list","isLoading","updateSelectedCountry","country_name","matching_country","c","failed_message","country_input","LC_API","open_chat_window","index","text_size","message_list","onContinue","getOnfidoError","idx","rejected_reasons","fileReadErrorMessage","filename","getSocket","settings","Promise","resolve","reject","uploader","DocumentUploader","connection","is_file_error","compressImageFiles","files_to_process","readFiles","processed_files","forEach","total_to_upload","upload","console","ROOT_CLASS","DOCUMENT_TYPES","NATIONAL_IDENTITY_CARD","NIMC_SLIP","PASSPORT","DRIVING_LICENCE","BIRTH_CERTIFICATE","SELFIE_WITH_ID","OTHER","PAGE_TYPE","FRONT","BACK","PHOTO","SELFIE_DOCUMENT","pageType","info","date_field","InputField","min_date","add","DatePicker","date_format","display_format","start_date","should_show_today","readOnly","propTypes","PropTypes","DROPZONE_ERRORS","GENERAL","Message","open","medium","Preview","has_frame","background_url","setBackgroundUrl","URL","createObjectURL","backgroundImage","indexOf","is_full","setImage","ValidationErrorMessage","preview_single","handleAccept","handleReject","noClick","setInitialValues","fields","checkIsEmpty","trim","validateFields","documents","icons","IconsItem","goToCards","documents_title","is_expiry_date_required","fields_title","is_form_touched","is_form_empty","goBack","onConfirm","onComplete","setIsCfdPoiCompleted","setDocuments","selfie","setSelfie","is_selfie_upload","setIsSelfieUpload","STATUS","onClickBack","root_class","country_code_key","handleComplete","is_onfido_supported","is_mt5","handlePOIforMT5Complete","setError","is_any_failed","is_slow_loading","is_manual_upload","onfido_name","is_default_enabled","details","docs","files_length","file_to_upload_index","results","uploadNext","lifetime_valid","expiration_date","expiry_date","uploadFile","page_type","document_id","document_issuing_country","warning","CardWithArrow","Documents","toggleDetail","Card","margin","card","renderContent","manual","allow_poi_resubmission","onfido","detail","setDetail","getDocumentIndex","identity_status_codes","has_nimc","checkNimcStep","submissions_left","Timeline","item_title","UploadComplete","width","warnings","Array","isArray","show_risk_modal","handleAcceptRisk","button_text","body_content","has_sub_header","has_close_icon","MobileDialog","visible","portal_element_id","form_control","setEnableNextSection","should_wrap_items","answer","item_list","checkIfAllFieldsFilled","cfd_experience","cfd_frequency","trading_experience_financial_instruments","trading_frequency_financial_instruments","question","should_extend_trading_frequency_field","question_text","classNameDisplay","answer_options","hide_top_placeholder","form_value","should_move_to_next","setSubSectionIndex","is_independent_section","assessment_questions","getTradingAssessmentQuestions","stored_items","parseInt","localStorage","getItem","is_section_filled","setIsSectionFilled","current_question_index","current_question","current_question_details","setCurrentQuestionDetails","setFormData","last_question_index","should_display_previous_button","prevState","displayNextPage","risk_tolerance","prev_state_question","next_state_question_index","setItem","handleValueSelection","callBackFn","prev_form","section","source_of_experience","answers","setTouched","every","setErrors","questions","has_long_question","is_section_required","current","total","prev_state_question_index","should_override","process_form_values","entries","reduce","accumulator","mt5_account_status","openFailedVerificationModal","selected_account_type","setIsVerificationModalVisible","user_account_status","BadgeTextComponent","MT5_ACCOUNT_STATUS","redirect_url","poi_status","AUTH_STATUS_CODES","handleOnClick","onKeyDown","getIDVDocumentType","getIDVError","default_form_config","supported_in","TradingAssessmentNewUser","financial_assessment","trading_assessment_form_config","default_value","cfd_trading_definition","leverage_impact_trading","leverage_trading_high_risk_stop_loss","required_initial_margin","getTradingAssessmentFormConfig","active_title","body","getDefaultFields","generateValidationFunction","immutable_fields","sub_step_count","freeze","DUPLICATE_ACCOUNT","CLAIMED_DOCUMENT","getFileUploaderDescriptions","page","proof_of_income_descriptions","proof_of_address_descriptions","getIDVDocuments","ke","alien_card","national_id","passport","za","national_id_no_photo","ng","bvn","cac","drivers_license","nin","nin_slip","tin","voter_id","gh","ssnit","br","cpf","ug","zw","cl","ar","dni","mx","curp","nik","in","aadhaar","epic","pan","pe","vn","LANGUAGE_CODES","ID","EN","field_type"],"sourceRoot":""}