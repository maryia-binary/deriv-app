{"version":3,"file":"account/js/personal-details-config.js","mappings":"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","sources":["webpack://@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/account/external umd \"@deriv/translations\"","webpack://@deriv/account/webpack/bootstrap","webpack://@deriv/account/webpack/runtime/define property getters","webpack://@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/account/./Helpers/utils.ts","webpack://@deriv/account/./Configs/personal-details-config.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { filterObjProperties, toMoment, validLength, validName, getIDVNotApplicableOption } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ResidenceList, GetSettings, GetAccountStatus } from '@deriv/api-types';\nimport { FormikValues } from 'formik';\nimport { getIDVDocumentConfig } from '../Constants/idv-document-config';\n\nexport const documentAdditionalError = (document_additional: string, document_additional_format: string) => {\n    let error_message = null;\n    if (!document_additional) {\n        error_message = localize('Please enter your document number. ');\n    } else {\n        const format_regex = getRegex(document_additional_format);\n        if (!format_regex.test(document_additional)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_settings: GetSettings;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    residence: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    account_settings,\n    residence,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const citizen = account_settings.citizen || residence;\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const should_skip_idv = account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const IDV_DOCUMENT_DATA = getIDVDocumentConfig();\n    return (\n        (Object.keys(IDV_DOCUMENT_DATA).includes(country_code) &&\n            (IDV_DOCUMENT_DATA as any)[country_code][document_type]) || {\n            new_display_name: '',\n            example_format: '',\n            sample_image: '',\n        }\n    );\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string) => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const validate =\n    (errors: Record<string, string>, values: Record<string, string>) =>\n    (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field];\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 2, max: 50 })) {\n            return localize('You should enter 2-50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format: string | undefined) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, document_additional: string) => {\n    const error_message = documentAdditionalError(document_additional, document_type.additional?.format);\n    if (error_message) {\n        return localize(error_message) + getExampleFormat(document_type.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number: string, document_type: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type.example_format;\n    if (!document_number) {\n        return localize('Please enter your document number. ') + getExampleFormat(document_type.example_format);\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type.value);\n    if (!format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n","import {\n    TSchema,\n    generateValidationFunction,\n    getDefaultFields,\n    getErrorMessages,\n    toMoment,\n    validLength,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { shouldShowIdentityInformation } from 'Helpers/utils';\nimport { TResidenseList, TUpgradeInfo } from 'Types';\nimport { GetAccountStatus, GetSettings } from '@deriv/api-types';\n\ntype TPersonalDetailsConfig = {\n    upgrade_info?: TUpgradeInfo;\n    real_account_signup_target: string;\n    residence_list: TResidenseList[];\n    account_settings: GetSettings & {\n        document_type: string;\n        document_number: string;\n    };\n    is_appstore?: boolean;\n    residence: string;\n    account_status: GetAccountStatus;\n};\n\nexport const personal_details_config = ({\n    residence_list,\n    account_settings,\n    is_appstore,\n    real_account_signup_target,\n}: TPersonalDetailsConfig) => {\n    if (!residence_list || !account_settings) {\n        return {};\n    }\n\n    // minimum characters required is 9 numbers (excluding +- signs or space)\n    const min_phone_number = 9;\n    const max_phone_number = 35;\n\n    const default_residence = real_account_signup_target === 'maltainvest' ? account_settings?.residence : '';\n\n    const config = {\n        account_opening_reason: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.account_opening_reason ?? '',\n            rules: [['req', localize('Account opening reason is required.')]],\n        },\n        salutation: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.salutation ?? '',\n            rules: [['req', localize('Salutation is required.')]],\n        },\n        first_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.first_name ?? '',\n            rules: [\n                ['req', localize('First name is required.')],\n                ['length', localize('First name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        last_name: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.last_name ?? '',\n            rules: [\n                ['req', localize('Last name is required.')],\n                ['length', localize('Last name should be between 2 and 50 characters.'), { min: 2, max: 50 }],\n                ['name', getErrorMessages().name()],\n            ],\n        },\n        date_of_birth: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.date_of_birth\n                ? toMoment(account_settings.date_of_birth).format('YYYY-MM-DD')\n                : '',\n            rules: [\n                ['req', localize('Date of birth is required.')],\n                [\n                    (v: string) => toMoment(v).isValid() && toMoment(v).isBefore(toMoment().subtract(18, 'years')),\n                    localize('You must be 18 years old and above.'),\n                ],\n            ],\n        },\n        place_of_birth: {\n            supported_in: ['maltainvest', 'iom', 'malta'],\n            default_value: account_settings.place_of_birth\n                ? residence_list.find(item => item.value === account_settings.place_of_birth)?.text\n                : '',\n            rules: [['req', localize('Place of birth is required.')]],\n        },\n        citizen: {\n            supported_in: ['iom', 'malta', 'maltainvest'],\n            default_value: account_settings.citizen\n                ? residence_list.find(item => item.value === account_settings.citizen)?.text\n                : '',\n            rules: [['req', localize('Citizenship is required')]],\n        },\n        phone: {\n            supported_in: ['svg', 'iom', 'malta', 'maltainvest'],\n            default_value: account_settings.phone ?? '',\n            rules: [\n                ['req', localize('Phone is required.')],\n                ['phone', localize('Phone is not in a proper format.')],\n                [\n                    (value: string) => {\n                        // phone_trim uses regex that trims non-digits\n                        const phone_trim = value.replace(/\\D/g, '');\n                        return validLength(phone_trim, { min: min_phone_number, max: max_phone_number });\n                    },\n                    localize('You should enter {{min}}-{{max}} numbers.', {\n                        min: min_phone_number,\n                        max: max_phone_number,\n                    }),\n                ],\n            ],\n        },\n        tax_residence: {\n            //if tax_residence is already set, we will use it as default value else for mf clients we will use residence as default value\n            default_value: account_settings?.tax_residence\n                ? residence_list.find(item => item.value === account_settings?.tax_residence)?.text ?? ''\n                : default_residence,\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Tax residence is required.')]],\n        },\n        tax_identification_number: {\n            default_value: account_settings.tax_identification_number ?? '',\n            supported_in: ['maltainvest'],\n            rules: [\n                ['req', localize('Tax Identification Number is required.')],\n                [\n                    'length',\n                    localize(\"Tax Identification Number can't be longer than 25 characters.\"),\n                    { min: 0, max: 25 },\n                ],\n                [\n                    'regular',\n                    localize('Letters, numbers, spaces, periods, hyphens and forward slashes only.'),\n                    {\n                        regex: /^(?!^$|\\s+)[A-Za-z0-9./\\s-]{0,25}$/,\n                    },\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        return !!tax_residence;\n                    },\n                    localize('Please fill in Tax residence.'),\n                ],\n                [\n                    (value: string, options: Record<string, unknown>, { tax_residence }: { tax_residence: string }) => {\n                        const from_list = residence_list.filter(res => res.text === tax_residence && res.tin_format);\n                        const tax_regex = from_list[0]?.tin_format?.[0];\n                        return tax_regex ? new RegExp(tax_regex).test(value) : true;\n                    },\n                    [\n                        'warn',\n                        localize(\n                            'This Tax Identification Number (TIN) is invalid. You may continue with account creation, but to facilitate future payment processes, valid tax information will be required.'\n                        ),\n                    ],\n                ],\n            ],\n        },\n        employment_status: {\n            default_value: account_settings.employment_status ?? '',\n            supported_in: ['maltainvest'],\n            rules: [['req', localize('Employment status is required.')]],\n        },\n        tax_identification_confirm: {\n            default_value: false,\n            supported_in: ['maltainvest'],\n            rules: [['confirm', localize('Please confirm your tax information.')]],\n        },\n        document_type: {\n            default_value: account_settings.document_type ?? {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n                sample_image: '',\n            },\n            supported_in: ['svg'],\n            rules: [],\n        },\n        document_number: {\n            default_value: account_settings.document_number ?? '',\n            supported_in: ['svg'],\n            rules: [],\n        },\n    };\n\n    const getConfig = () => {\n        if (is_appstore) {\n            const allowed_fields = ['first_name', 'last_name', 'date_of_birth', 'phone'];\n            return Object.keys(config).reduce((new_config, key) => {\n                if (allowed_fields.includes(key)) {\n                    new_config[key] = config[key];\n                }\n                return new_config;\n            }, {});\n        }\n        return config;\n    };\n\n    return [getConfig()];\n};\n\nconst personalDetailsConfig = <T>(\n    {\n        upgrade_info,\n        real_account_signup_target,\n        residence_list,\n        account_settings,\n        account_status,\n        residence,\n    }: TPersonalDetailsConfig,\n    PersonalDetails: T,\n    is_appstore = false\n) => {\n    const [config] = personal_details_config({\n        residence_list,\n        account_settings,\n        is_appstore,\n        real_account_signup_target,\n        residence,\n        account_status,\n    });\n    const disabled_items = account_settings.immutable_fields;\n    return {\n        header: {\n            active_title: is_appstore ? localize('A few personal details') : localize('Complete your personal details'),\n            title: is_appstore ? localize('PERSONAL') : localize('Personal details'),\n        },\n        body: PersonalDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(\n                real_account_signup_target,\n                transformConfig(config, {\n                    real_account_signup_target,\n                    residence_list,\n                    account_settings,\n                    account_status,\n                    residence,\n                })\n            ),\n            is_svg: upgrade_info?.can_upgrade_to === 'svg',\n            is_mf: real_account_signup_target === 'maltainvest',\n            account_opening_reason_list: [\n                {\n                    text: localize('Hedging'),\n                    value: 'Hedging',\n                },\n                {\n                    text: localize('Income Earning'),\n                    value: 'Income Earning',\n                },\n                {\n                    text: localize('Speculative'),\n                    value: 'Speculative',\n                },\n            ],\n            salutation_list: [\n                {\n                    label: localize('Mr'),\n                    value: 'Mr',\n                },\n\n                {\n                    label: localize('Ms'),\n                    value: 'Ms',\n                },\n            ],\n            disabled_items,\n            account_status,\n            residence,\n            account_settings,\n            real_account_signup_target,\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\n        icon: 'IcDashboardPersonalDetails',\n    };\n};\n\nconst transformConfig = (\n    config: TSchema,\n    { real_account_signup_target, residence_list, account_settings, account_status, residence }: TPersonalDetailsConfig\n) => {\n    // Remove required rule for malta and iom\n    if (['malta', 'iom'].includes(real_account_signup_target) && config.tax_residence) {\n        config?.tax_residence?.rules?.shift();\n    }\n    // Remove IDV for non supporting SVG countries\n    if (\n        !shouldShowIdentityInformation({\n            account_status,\n            account_settings,\n            residence,\n            residence_list,\n            real_account_signup_target,\n        })\n    ) {\n        delete config.document_type;\n        delete config.document_number;\n    }\n    return config;\n};\n\nexport default personalDetailsConfig;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getIDVNotApplicableOption","transformConfig","config","real_account_signup_target","residence_list","account_settings","account_status","residence","includes","tax_residence","rules","shift","citizen","country","find","item","value","maltainvest","should_skip_idv","status","some","Boolean","identity","services","idv","is_country_supported","shouldShowIdentityInformation","document_type","document_number","PersonalDetails","upgrade_info","is_appstore","default_residence","account_opening_reason","supported_in","default_value","localize","salutation","first_name","min","max","getErrorMessages","name","last_name","date_of_birth","toMoment","format","v","isValid","isBefore","subtract","place_of_birth","text","phone","phone_trim","replace","validLength","tax_identification_number","regex","options","tax_regex","filter","res","tin_format","RegExp","test","employment_status","tax_identification_confirm","id","example_format","sample_image","allowed_fields","keys","reduce","new_config","getConfig","personal_details_config","disabled_items","immutable_fields","header","active_title","title","body","form_value","getDefaultFields","props","validate","generateValidationFunction","is_svg","can_upgrade_to","is_mf","account_opening_reason_list","salutation_list","label","passthrough","icon"],"sourceRoot":""}