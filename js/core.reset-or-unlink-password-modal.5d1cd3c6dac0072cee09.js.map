{"version":3,"file":"js/core.reset-or-unlink-password-modal.5d1cd3c6dac0072cee09.js","mappings":"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","sources":["webpack:///./App/Containers/LinkExpiredModal/email-resent.tsx","webpack:///./App/Containers/LinkExpiredModal/link-expired-modal.tsx","webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.jsx","webpack:///./App/Containers/ResetPasswordModal/index.js","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/reset-or-unlink-password-modal.jsx","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/index.js","webpack:///./App/Containers/UnlinkPasswordModal/unlink-password-modal.jsx","webpack:///./App/Containers/UnlinkPasswordModal/index.js"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nconst EmailResent = () => {\n    return (\n        <div className='link-expired__spaced-container__content link-expired__spaced-container__email_sent'>\n            <Icon data_testid='dt_email-resent' icon='IcEmailVerificationResent' size={128} />\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text=\"<0>We've sent you an email.</0>\" components={[<strong key={0} />]} />\n            </Text>\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n        </div>\n    );\n};\n\nexport default EmailResent;\n","import classNames from 'classnames';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { Dialog, FormSubmitButton, Input, Text } from '@deriv/components';\nimport { useVerifyEmail } from '@deriv/hooks';\nimport { getErrorMessages, validEmail } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport EmailResent from './email-resent';\n\nconst LinkExpiredModal = observer(() => {\n    const { ui } = useStore();\n    const { enableApp, disableApp, is_link_expired_modal_visible: is_visible, toggleLinkExpiredModal } = ui;\n\n    const { send, error: verify_error, data: verify_data } = useVerifyEmail('reset_password');\n    const [is_email_sent, setIsEmailSent] = React.useState(false);\n\n    const formik = useFormik({\n        initialValues: { email: '' },\n        initialStatus: { error_msg: '' },\n        validate: values => (!validEmail(values.email) ? { email: getErrorMessages().email() } : {}),\n        onSubmit: values => send(values.email),\n    });\n    const {\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        resetForm,\n        setStatus,\n        setSubmitting,\n        status,\n        touched,\n        values,\n    } = formik;\n\n    React.useEffect(() => {\n        if (verify_data) {\n            setSubmitting(false);\n            setIsEmailSent(true);\n        }\n    }, [verify_data, setSubmitting]);\n\n    React.useEffect(() => {\n        if (verify_error && typeof verify_error === 'object' && 'message' in verify_error) {\n            resetForm();\n            setStatus({ error_msg: verify_error?.message });\n        }\n    }, [verify_error, resetForm, setStatus]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Dialog\n                className={classNames('link-expired__spaced-container', {\n                    'link-expired__spaced-container__fullscreen': is_email_sent,\n                })}\n                is_visible={is_visible}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                title={is_email_sent ? '' : localize('Link expired')}\n                has_close_icon\n                onConfirm={() => toggleLinkExpiredModal(false)}\n            >\n                <div className='link-expired'>\n                    {is_email_sent ? (\n                        <EmailResent />\n                    ) : (\n                        <div className='link-expired__spaced-container__content'>\n                            <Text as='p' size='xs' align='left'>\n                                <Localize\n                                    i18n_default_text='The link you clicked has expired. Ensure to click the link in the latest email in your inbox. Alternatively, enter your email below and click <0>Resend email</0> for a new link.'\n                                    components={[<strong key={0} />]}\n                                />\n                            </Text>\n                            <fieldset className='email-platform__content__fieldset'>\n                                <Input\n                                    className='email-input'\n                                    data-lpignore='true'\n                                    type='text'\n                                    name='email'\n                                    id='email'\n                                    onChange={e => {\n                                        setStatus({ error_msg: '' });\n                                        handleChange(e);\n                                    }}\n                                    disabled={isSubmitting}\n                                    onBlur={handleBlur}\n                                    error={(touched.email && errors.email) || status.error_msg}\n                                    label={localize('Email address')}\n                                    value={values.email}\n                                />\n                            </fieldset>\n                            <FormSubmitButton\n                                has_cancel\n                                cancel_label={localize('Close')}\n                                onCancel={() => toggleLinkExpiredModal(false)}\n                                is_disabled={!values.email || !!errors.email || isSubmitting}\n                                is_loading={isSubmitting}\n                                label={localize('Resend email')}\n                            />\n                        </div>\n                    )}\n                </div>\n            </Dialog>\n        </form>\n    );\n});\n\nexport default LinkExpiredModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { redirectToLogin, validPassword, validLength, getErrorMessages, WS } from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\n\nconst ResetPasswordModal = ({\n    disableApp,\n    enableApp,\n    is_loading,\n    is_mobile,\n    is_visible,\n    logoutClient,\n    verification_code,\n    toggleResetPasswordModal,\n    toggleLinkExpiredModal,\n}) => {\n    const onResetComplete = (error, actions) => {\n        actions.setSubmitting(false);\n        const error_code = error?.code;\n        // Error would be returned on invalid token (and the like) cases.\n        if (error_code) {\n            if (error_code === 'InvalidToken') {\n                toggleResetPasswordModal(false);\n                toggleLinkExpiredModal(true);\n            } else {\n                actions.resetForm({ password: '' });\n                actions.setStatus({ error_msg: error?.message });\n            }\n            return;\n        }\n\n        actions.setStatus({ reset_complete: true });\n\n        logoutClient().then(() => {\n            redirectToLogin(false, getLanguage(), false);\n        });\n    };\n\n    const handleSubmit = (values, actions) => {\n        const api_request = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code,\n        };\n\n        WS.resetPassword(api_request).then(async response => {\n            if (response.error) {\n                onResetComplete(response?.error, actions);\n            } else {\n                onResetComplete(null, actions);\n            }\n        });\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <Formik\n            initialValues={reset_initial_values}\n            initialStatus={{ reset_complete: false, error_msg: '' }}\n            validate={validateReset}\n            onSubmit={handleSubmit}\n        >\n            {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                <Dialog\n                    className='reset-password__spaced-container'\n                    is_visible={is_visible}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_loading={is_loading}\n                    dismissable={status.error_msg}\n                    onConfirm={() => toggleResetPasswordModal(false)}\n                    title={localize('Reset your password')}\n                    has_close_icon\n                    is_closed_on_cancel={false}\n                >\n                    <div className='reset-password'>\n                        <Form>\n                            {status.reset_complete ? (\n                                <div className='reset-password__password-set'>\n                                    <Text align='center' as='p' weight='bold' className='reset-password__heading'>\n                                        <Localize i18n_default_text='Your password has been changed' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                    </Text>\n                                </div>\n                            ) : (\n                                <div className='reset-password__password-selection'>\n                                    <fieldset className='reset-password__fieldset'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!((touched.password && errors.password) || status.error_msg)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='reset-password__password-field'\n                                                name='password'\n                                                label={localize('Create a password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={(touched.password && errors.password) || status.error_msg}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        {status.error_msg ? (\n                                            <Localize\n                                                i18n_default_text='{{error_msg}}'\n                                                values={{ error_msg: status.error_msg }}\n                                            />\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters. combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    {!is_mobile && <div className='reset-password__divider' />}\n                                    <Button\n                                        className={classNames('reset-password__btn', {\n                                            'reset-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                    >\n                                        <Localize i18n_default_text='Reset my password' />\n                                    </Button>\n                                </div>\n                            )}\n                        </Form>\n                    </div>\n                </Dialog>\n            )}\n        </Formik>\n    );\n};\n\nResetPasswordModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_mobile: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    verification_code: PropTypes.string,\n    toggleResetPasswordModal: PropTypes.func,\n    toggleLinkExpiredModal: PropTypes.func,\n};\n\nexport default connect(({ ui, client }) => ({\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    is_loading: ui.is_loading,\n    is_mobile: ui.is_mobile,\n    is_visible: ui.is_reset_password_modal_visible,\n    logoutClient: client.logout,\n    toggleResetPasswordModal: ui.toggleResetPasswordModal,\n    toggleLinkExpiredModal: ui.toggleLinkExpiredModal,\n    verification_code: client.verification_code.reset_password,\n}))(ResetPasswordModal);\n","import ResetPasswordModal from './reset-password-modal.jsx';\n\nexport default ResetPasswordModal;\n","import React from 'react';\nimport { Loading } from '@deriv/components';\nimport { WS } from 'Services';\nimport { connect } from 'Stores/connect';\nimport LinkExpiredModal from '../LinkExpiredModal';\nimport ResetPasswordModal from '../ResetPasswordModal';\nimport UnlinkPasswordModal from '../UnlinkPasswordModal';\n\nconst ResetOrUnlinkPasswordModal = ({ is_link_expired_modal_visible, is_logged_in }) => {\n    const [state, dispatch] = React.useReducer(\n        (old_state, updated_state) => {\n            return {\n                ...old_state,\n                ...updated_state,\n            };\n        },\n        {\n            is_loading: true,\n            is_unlinking: false,\n        }\n    );\n\n    React.useEffect(() => {\n        async function waitForAccountStatus() {\n            if (is_logged_in) {\n                const data = await WS.wait('get_account_status');\n                if (data?.get_account_status?.social_identity_provider) {\n                    dispatch({ is_unlinking: true, is_loading: false });\n                } else {\n                    dispatch({ is_unlinking: false, is_loading: false });\n                }\n            } else {\n                dispatch({ is_unlinking: false, is_loading: false });\n            }\n        }\n\n        waitForAccountStatus();\n    }, [is_logged_in]);\n\n    if (state.is_loading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    if (state.is_unlinking) {\n        return <UnlinkPasswordModal />;\n    } else if (is_link_expired_modal_visible) {\n        return <LinkExpiredModal />;\n    }\n    return <ResetPasswordModal />;\n};\n\nexport default connect(({ client, ui }) => ({\n    is_link_expired_modal_visible: ui.is_link_expired_modal_visible,\n    is_logged_in: client.is_logged_in,\n}))(ResetOrUnlinkPasswordModal);\n","import ResetOrUnlinkPasswordModal from './reset-or-unlink-password-modal.jsx';\n\nexport default ResetOrUnlinkPasswordModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, Icon, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport {\n    getErrorMessages,\n    redirectToLogin,\n    toTitleCase,\n    validPassword,\n    validLength,\n    getActionFromUrl,\n} from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { connect } from 'Stores/connect';\nimport { WS } from 'Services';\n\nconst UnlinkPassword = ({\n    logoutClient,\n    social_identity_provider,\n    toggleResetPasswordModal,\n    verification_code,\n    new_email,\n}) => {\n    const url_action = getActionFromUrl();\n    const onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n        actions.setStatus({ reset_complete: true });\n    };\n\n    const onGetPasswordResponse = (response, actions) => {\n        if (response.error) {\n            onResetComplete(response.error.message, actions);\n        } else {\n            onResetComplete(null, actions);\n        }\n    };\n\n    const handleSubmit = (values, actions) => {\n        if (url_action === 'social_email_change') {\n            const api_request = {\n                change_email: 'update',\n                new_email,\n                new_password: values.password,\n                verification_code,\n            };\n\n            WS.changeEmail(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        } else {\n            const api_request = {\n                reset_password: 1,\n                new_password: values.password,\n                verification_code,\n            };\n            WS.resetPassword(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        }\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <div className='unlink-password'>\n            <Formik\n                initialValues={reset_initial_values}\n                initialStatus={{ reset_complete: false, error_msg: '' }}\n                validate={validateReset}\n                onSubmit={handleSubmit}\n            >\n                {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                    <Form>\n                        <React.Fragment>\n                            {status.reset_complete ? (\n                                <div className='unlink-password__password-success'>\n                                    <Icon\n                                        className='unlink-password__icon'\n                                        icon={`IcUnlink${toTitleCase(social_identity_provider)}`}\n                                        size={128}\n                                    />\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Success!' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize\n                                            i18n_default_text={\n                                                'Your Deriv account has been unlinked from your {{social_identity_provider}} account. You can now log in to Deriv using your new email address and password.'\n                                            }\n                                            values={{\n                                                social_identity_provider: toTitleCase(social_identity_provider),\n                                            }}\n                                        />\n                                    </Text>\n                                    <Button\n                                        type='button'\n                                        onClick={() => {\n                                            toggleResetPasswordModal(false);\n                                            logoutClient().then(() => {\n                                                redirectToLogin(false, getLanguage(), false);\n                                            });\n                                        }}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Login now' />\n                                    </Button>\n                                </div>\n                            ) : (\n                                <div className='unlink-password__set-password'>\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Deriv password' />\n                                    </Text>\n                                    <Text as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize i18n_default_text='Enter a new password for your Deriv account.' />\n                                    </Text>\n                                    <fieldset className='unlink-password__input-field'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='unlink-password__password-field'\n                                                name='password'\n                                                label={localize('Deriv password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={touched.password && errors.password}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text as='p' size='xs' className='unlink-password__hint'>\n                                        {status.error_msg ? (\n                                            localize(status.error_msg)\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    <Button\n                                        className={classNames('unlink-password__btn', {\n                                            'unlink-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Confirm' />\n                                    </Button>\n                                </div>\n                            )}\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nUnlinkPassword.propTypes = {\n    logoutClient: PropTypes.func,\n    toggleResetPasswordModal: PropTypes.func,\n    verification_code: PropTypes.string,\n    social_identity_provider: PropTypes.string,\n};\n\nconst UnlinkPasswordModal = ({\n    disableApp,\n    enableApp,\n    is_loading,\n    is_visible,\n    logoutClient,\n    social_identity_provider,\n    toggleResetPasswordModal,\n    reset_verification_code,\n    unlink_verification_code,\n    new_email,\n}) => {\n    return (\n        <Dialog\n            className='unlink-password__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <UnlinkPassword\n                logoutClient={logoutClient}\n                social_identity_provider={social_identity_provider}\n                toggleResetPasswordModal={toggleResetPasswordModal}\n                verification_code={unlink_verification_code || reset_verification_code}\n                new_email={new_email}\n            />\n        </Dialog>\n    );\n};\n\nUnlinkPasswordModal.propTypes = {\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_loading: PropTypes.bool,\n    is_visible: PropTypes.bool,\n    logoutClient: PropTypes.func,\n    social_identity_provider: PropTypes.string,\n    toggleResetPasswordModal: PropTypes.func,\n    reset_verification_code: PropTypes.string,\n    unlink_verification_code: PropTypes.string,\n    new_email: PropTypes.string,\n};\n\nexport default connect(({ ui, client }) => ({\n    email: client.email,\n    new_email: client.new_email.social_email_change,\n    disableApp: ui.disableApp,\n    enableApp: ui.enableApp,\n    is_loading: ui.is_loading,\n    is_visible: ui.is_reset_password_modal_visible,\n    logoutClient: client.logout,\n    social_identity_provider: client.social_identity_provider,\n    toggleResetPasswordModal: ui.toggleResetPasswordModal,\n    reset_verification_code: client.verification_code.reset_password,\n    unlink_verification_code: client.verification_code.social_email_change,\n}))(UnlinkPasswordModal);\n","import UnlinkPasswordModal from './unlink-password-modal.jsx';\n\nexport default UnlinkPasswordModal;\n"],"names":["className","Icon","data_testid","icon","size","Text","as","align","Localize","i18n_default_text","components","key","observer","ui","useStore","enableApp","disableApp","is_visible","is_link_expired_modal_visible","toggleLinkExpiredModal","useVerifyEmail","send","verify_error","error","verify_data","data","React","is_email_sent","setIsEmailSent","formik","useFormik","initialValues","email","initialStatus","error_msg","validate","values","validEmail","getErrorMessages","onSubmit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","resetForm","setStatus","setSubmitting","status","touched","message","Dialog","classNames","title","localize","has_close_icon","onConfirm","Input","type","name","id","onChange","e","disabled","onBlur","label","value","FormSubmitButton","has_cancel","cancel_label","onCancel","is_disabled","is_loading","i","ResetPasswordModal","is_mobile","logoutClient","verification_code","toggleResetPasswordModal","onResetComplete","actions","error_code","code","password","reset_complete","then","redirectToLogin","getLanguage","Formik","validLength","min","max","validPassword","min_number","max_number","api_request","reset_password","new_password","WS","response","dismissable","is_closed_on_cancel","Form","weight","PasswordMeter","input","has_error","custom_feedback_messages","password_warnings","PasswordInput","autoComplete","required","Button","primary","propTypes","PropTypes","connect","client","is_reset_password_modal_visible","logout","is_logged_in","old_state","updated_state","is_unlinking","state","dispatch","get_account_status","social_identity_provider","waitForAccountStatus","Loading","is_fullscreen","UnlinkPasswordModal","UnlinkPassword","new_email","url_action","getActionFromUrl","console","onGetPasswordResponse","change_email","toTitleCase","onClick","large","reset_verification_code","unlink_verification_code","social_email_change"],"sourceRoot":""}