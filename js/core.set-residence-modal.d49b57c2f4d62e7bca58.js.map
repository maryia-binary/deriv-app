{"version":3,"file":"js/core.set-residence-modal.d49b57c2f4d62e7bca58.js","mappings":"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","sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx","webpack:///./App/Containers/SetResidenceModal/index.js","webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { Button, Dialog, Text } from '@deriv/components';\nimport { website_name } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport SetResidenceForm from './set-residence-form.jsx';\nimport 'Sass/app/modules/set-residence.scss';\nimport { observer, useStore } from '@deriv/stores';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst SetResidence = ({ enableApp, onSetResidence, residence_list, toggleModalVisibility }) => {\n    const onSetResidenceComplete = error => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        toggleModalVisibility(false);\n        enableApp();\n    };\n\n    const onSetResidencePassthrough = values => {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n        const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n        onSetResidence(modded_values, onSetResidenceComplete);\n    };\n    return (\n        <div className='set-residence'>\n            <Formik\n                initialValues={{ residence: '' }}\n                validate={values => validateResidence(values, residence_list)}\n                onSubmit={onSetResidencePassthrough}\n            >\n                {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                    <Form>\n                        <React.Fragment>\n                            <SetResidenceForm\n                                errors={errors}\n                                touched={touched}\n                                setFieldValue={setFieldValue}\n                                residence_list={residence_list}\n                            >\n                                <Text as='p' size='xxs' weight='bold' className='set-residence__subtext'>\n                                    <Localize i18n_default_text='We need this to make sure our service complies with laws and regulations in your country.' />\n                                </Text>\n                                <Button\n                                    className={classNames('set-residence__btn', {\n                                        'set-residence__btn--disabled':\n                                            !values.residence || errors.residence || isSubmitting,\n                                    })}\n                                    type='submit'\n                                    is_disabled={!values.residence || !!errors.residence || isSubmitting}\n                                    primary\n                                    large\n                                >\n                                    <Localize i18n_default_text='Set residence' />\n                                </Button>\n                            </SetResidenceForm>\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nSetResidence.propTypes = {\n    enableApp: PropTypes.func,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n    toggleModalVisibility: PropTypes.func,\n};\n\nconst SetResidenceModal = observer(() => {\n    const { ui, client } = useStore();\n    const {\n        is_set_residence_modal_visible: is_visible,\n        toggleSetResidenceModal,\n        enableApp,\n        disableApp,\n        is_loading,\n    } = ui;\n    const { onSetResidence, residence_list } = client;\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                toggleModalVisibility={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n});\n\nexport default SetResidenceModal;\n","import SetResidenceModal from './set-residence-modal.jsx';\n\nexport default SetResidenceModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    children,\n    class_prefix = 'set-residence',\n    default_value,\n    history_value,\n    errors,\n    onResidenceSelectionChanged,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            input_id='dt_core_set-residence-form_signup-residence-select'\n                            type='text'\n                            label={localize('Country of residence')}\n                            historyValue={history_value}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => {\n                                setFieldValue('residence', value ? text : '', true);\n                                onResidenceSelectionChanged?.();\n                            }}\n                        />\n                    </React.Fragment>\n                )}\n            </Field>\n            {!errors?.residence?.length && (\n                <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n                    <Localize i18n_default_text='Select the country where you currently live.' />\n                </Text>\n            )}\n            <div className={`${class_prefix}__button_wrapper`}>{children}</div>\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.object,\n    class_prefix: PropTypes.string,\n    default_value: PropTypes.string,\n    history_value: PropTypes.string,\n    errors: PropTypes.object,\n    onResidenceSelectionChanged: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetResidenceForm;\n"],"names":["isResidenceText","item","values","text","toLowerCase","residence","SetResidence","enableApp","onSetResidence","residence_list","toggleModalVisibility","onSetResidenceComplete","error","Error","className","Formik","initialValues","validate","errors","index_of_selection","findIndex","disabled","localize","website_name","validateResidence","onSubmit","modded_values","value","isSubmitting","setFieldValue","touched","Form","Text","as","size","weight","Localize","i18n_default_text","Button","classNames","type","is_disabled","primary","large","propTypes","PropTypes","observer","useStore","ui","client","is_visible","is_set_residence_modal_visible","toggleSetResidenceModal","disableApp","is_loading","length","Dialog","is_content_centered","SetResidenceForm","children","class_prefix","default_value","history_value","onResidenceSelectionChanged","setFieldTouched","React","Field","name","field","Autocomplete","autoComplete","input_id","label","historyValue","required","list_items","onItemSelection","color"],"sourceRoot":""}