{"version":3,"file":"js/core.reset-or-unlink-password-modal.25c5025dddf510dec4d7.js","mappings":"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","sources":["webpack:///./App/Containers/LinkExpiredModal/email-resent.tsx","webpack:///./App/Containers/LinkExpiredModal/link-expired-modal.tsx","webpack:///./App/Containers/ResetPasswordModal/reset-password-modal.jsx","webpack:///./App/Containers/ResetPasswordModal/index.js","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/reset-or-unlink-password-modal.jsx","webpack:///./App/Containers/ResetOrUnlinkPasswordModal/index.js","webpack:///./App/Containers/UnlinkPasswordModal/unlink-password-modal.jsx","webpack:///./App/Containers/UnlinkPasswordModal/index.js"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nconst EmailResent = () => {\n    return (\n        <div className='link-expired__spaced-container__content link-expired__spaced-container__email_sent'>\n            <Icon data_testid='dt_email-resent' icon='IcEmailVerificationResent' size={128} />\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text=\"<0>We've sent you an email.</0>\" components={[<strong key={0} />]} />\n            </Text>\n            <Text as='p' size='s' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n        </div>\n    );\n};\n\nexport default EmailResent;\n","import classNames from 'classnames';\nimport { useFormik } from 'formik';\nimport React from 'react';\nimport { Dialog, FormSubmitButton, Input, Text } from '@deriv/components';\nimport { useVerifyEmail } from '@deriv/hooks';\nimport { getErrorMessages, validEmail } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport EmailResent from './email-resent';\n\nconst LinkExpiredModal = observer(() => {\n    const { ui } = useStore();\n    const { enableApp, disableApp, is_link_expired_modal_visible: is_visible, toggleLinkExpiredModal } = ui;\n\n    const { send, error: verify_error, data: verify_data } = useVerifyEmail('reset_password');\n    const [is_email_sent, setIsEmailSent] = React.useState(false);\n\n    const formik = useFormik({\n        initialValues: { email: '' },\n        initialStatus: { error_msg: '' },\n        validate: values => (!validEmail(values.email) ? { email: getErrorMessages().email() } : {}),\n        onSubmit: values => send(values.email),\n    });\n    const {\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        resetForm,\n        setStatus,\n        setSubmitting,\n        status,\n        touched,\n        values,\n    } = formik;\n\n    React.useEffect(() => {\n        if (verify_data) {\n            setSubmitting(false);\n            setIsEmailSent(true);\n        }\n    }, [verify_data, setSubmitting]);\n\n    React.useEffect(() => {\n        if (verify_error && typeof verify_error === 'object' && 'message' in verify_error) {\n            resetForm();\n            setStatus({ error_msg: verify_error?.message });\n        }\n    }, [verify_error, resetForm, setStatus]);\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Dialog\n                className={classNames('link-expired__spaced-container', {\n                    'link-expired__spaced-container__fullscreen': is_email_sent,\n                })}\n                is_visible={is_visible}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                title={is_email_sent ? '' : localize('Link expired')}\n                has_close_icon\n                onConfirm={() => toggleLinkExpiredModal(false)}\n            >\n                <div className='link-expired'>\n                    {is_email_sent ? (\n                        <EmailResent />\n                    ) : (\n                        <div className='link-expired__spaced-container__content'>\n                            <Text as='p' size='xs' align='left'>\n                                <Localize\n                                    i18n_default_text='The link you clicked has expired. Ensure to click the link in the latest email in your inbox. Alternatively, enter your email below and click <0>Resend email</0> for a new link.'\n                                    components={[<strong key={0} />]}\n                                />\n                            </Text>\n                            <fieldset className='email-platform__content__fieldset'>\n                                <Input\n                                    className='email-input'\n                                    data-lpignore='true'\n                                    type='text'\n                                    name='email'\n                                    id='email'\n                                    onChange={e => {\n                                        setStatus({ error_msg: '' });\n                                        handleChange(e);\n                                    }}\n                                    disabled={isSubmitting}\n                                    onBlur={handleBlur}\n                                    error={(touched.email && errors.email) || status.error_msg}\n                                    label={localize('Email address')}\n                                    value={values.email}\n                                />\n                            </fieldset>\n                            <FormSubmitButton\n                                has_cancel\n                                cancel_label={localize('Close')}\n                                onCancel={() => toggleLinkExpiredModal(false)}\n                                is_disabled={!values.email || !!errors.email || isSubmitting}\n                                is_loading={isSubmitting}\n                                label={localize('Resend email')}\n                            />\n                        </div>\n                    )}\n                </div>\n            </Dialog>\n        </form>\n    );\n});\n\nexport default LinkExpiredModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport { redirectToLogin, validPassword, validLength, getErrorMessages, WS } from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\nconst ResetPasswordModal = observer(() => {\n    const { ui, client } = useStore();\n    const { logout: logoutClient, verification_code } = client;\n    const {\n        disableApp,\n        enableApp,\n        is_loading,\n        is_mobile,\n        is_reset_password_modal_visible: is_visible,\n        toggleResetPasswordModal,\n        toggleLinkExpiredModal,\n    } = ui;\n    const onResetComplete = (error, actions) => {\n        actions.setSubmitting(false);\n        const error_code = error?.code;\n        // Error would be returned on invalid token (and the like) cases.\n        if (error_code) {\n            if (error_code === 'InvalidToken') {\n                toggleResetPasswordModal(false);\n                toggleLinkExpiredModal(true);\n            } else {\n                actions.resetForm({ password: '' });\n                actions.setStatus({ error_msg: error?.message });\n            }\n            return;\n        }\n\n        actions.setStatus({ reset_complete: true });\n\n        logoutClient().then(() => {\n            redirectToLogin(false, getLanguage(), false);\n        });\n    };\n\n    const handleSubmit = (values, actions) => {\n        const api_request = {\n            reset_password: 1,\n            new_password: values.password,\n            verification_code: verification_code.reset_password,\n        };\n\n        WS.resetPassword(api_request).then(async response => {\n            if (response.error) {\n                onResetComplete(response?.error, actions);\n            } else {\n                onResetComplete(null, actions);\n            }\n        });\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <Formik\n            initialValues={reset_initial_values}\n            initialStatus={{ reset_complete: false, error_msg: '' }}\n            validate={validateReset}\n            onSubmit={handleSubmit}\n        >\n            {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                <Dialog\n                    className='reset-password__spaced-container'\n                    is_visible={is_visible}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_loading={is_loading}\n                    dismissable={status.error_msg}\n                    onConfirm={() => toggleResetPasswordModal(false)}\n                    title={localize('Reset your password')}\n                    has_close_icon\n                    is_closed_on_cancel={false}\n                >\n                    <div className='reset-password'>\n                        <Form>\n                            {status.reset_complete ? (\n                                <div className='reset-password__password-set'>\n                                    <Text align='center' as='p' weight='bold' className='reset-password__heading'>\n                                        <Localize i18n_default_text='Your password has been changed' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                    </Text>\n                                </div>\n                            ) : (\n                                <div className='reset-password__password-selection'>\n                                    <fieldset className='reset-password__fieldset'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!((touched.password && errors.password) || status.error_msg)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='reset-password__password-field'\n                                                name='password'\n                                                label={localize('Create a password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={(touched.password && errors.password) || status.error_msg}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text align='center' as='p' size='xxs' className='reset-password__subtext'>\n                                        {status.error_msg ? (\n                                            <Localize\n                                                i18n_default_text='{{error_msg}}'\n                                                values={{ error_msg: status.error_msg }}\n                                            />\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters. combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    {!is_mobile && <div className='reset-password__divider' />}\n                                    <Button\n                                        className={classNames('reset-password__btn', {\n                                            'reset-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                    >\n                                        <Localize i18n_default_text='Reset my password' />\n                                    </Button>\n                                </div>\n                            )}\n                        </Form>\n                    </div>\n                </Dialog>\n            )}\n        </Formik>\n    );\n});\n\nexport default ResetPasswordModal;\n","import ResetPasswordModal from './reset-password-modal.jsx';\n\nexport default ResetPasswordModal;\n","import React from 'react';\nimport { Loading } from '@deriv/components';\nimport { WS } from 'Services';\nimport { observer, useStore } from '@deriv/stores';\nimport LinkExpiredModal from '../LinkExpiredModal';\nimport ResetPasswordModal from '../ResetPasswordModal';\nimport UnlinkPasswordModal from '../UnlinkPasswordModal';\n\nconst ResetOrUnlinkPasswordModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_logged_in } = client;\n    const { is_link_expired_modal_visible } = ui;\n    const [state, dispatch] = React.useReducer(\n        (old_state, updated_state) => {\n            return {\n                ...old_state,\n                ...updated_state,\n            };\n        },\n        {\n            is_loading: true,\n            is_unlinking: false,\n        }\n    );\n\n    React.useEffect(() => {\n        async function waitForAccountStatus() {\n            if (is_logged_in) {\n                const data = await WS.wait('get_account_status');\n                if (data?.get_account_status?.social_identity_provider) {\n                    dispatch({ is_unlinking: true, is_loading: false });\n                } else {\n                    dispatch({ is_unlinking: false, is_loading: false });\n                }\n            } else {\n                dispatch({ is_unlinking: false, is_loading: false });\n            }\n        }\n\n        waitForAccountStatus();\n    }, [is_logged_in]);\n\n    if (state.is_loading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    if (state.is_unlinking) {\n        return <UnlinkPasswordModal />;\n    } else if (is_link_expired_modal_visible) {\n        return <LinkExpiredModal />;\n    }\n    return <ResetPasswordModal />;\n});\n\nexport default ResetOrUnlinkPasswordModal;\n","import ResetOrUnlinkPasswordModal from './reset-or-unlink-password-modal.jsx';\n\nexport default ResetOrUnlinkPasswordModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Formik, Form } from 'formik';\nimport { Button, Dialog, Icon, PasswordInput, PasswordMeter, Text } from '@deriv/components';\nimport {\n    getErrorMessages,\n    redirectToLogin,\n    toTitleCase,\n    validPassword,\n    validLength,\n    getActionFromUrl,\n} from '@deriv/shared';\nimport { getLanguage, localize, Localize } from '@deriv/translations';\nimport { WS } from 'Services';\nimport { observer, useStore } from '@deriv/stores';\n\nconst UnlinkPassword = ({\n    logoutClient,\n    social_identity_provider,\n    toggleResetPasswordModal,\n    verification_code,\n    new_email,\n}) => {\n    const url_action = getActionFromUrl();\n    const onResetComplete = (error_msg, actions) => {\n        actions.setSubmitting(false);\n        actions.resetForm({ password: '' });\n        // Error would be returned on invalid token (and the like) cases.\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error_msg) {\n            // eslint-disable-next-line no-console\n            console.error(error_msg);\n            actions.setStatus({ error_msg });\n            return;\n        }\n        actions.setStatus({ reset_complete: true });\n    };\n\n    const onGetPasswordResponse = (response, actions) => {\n        if (response.error) {\n            onResetComplete(response.error.message, actions);\n        } else {\n            onResetComplete(null, actions);\n        }\n    };\n\n    const handleSubmit = (values, actions) => {\n        if (url_action === 'social_email_change') {\n            const api_request = {\n                change_email: 'update',\n                new_email,\n                new_password: values.password,\n                verification_code,\n            };\n\n            WS.changeEmail(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        } else {\n            const api_request = {\n                reset_password: 1,\n                new_password: values.password,\n                verification_code,\n            };\n            WS.resetPassword(api_request).then(async response => {\n                onGetPasswordResponse(response, actions);\n            });\n        }\n    };\n\n    const validateReset = values => {\n        const errors = {};\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: 25,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: 25,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <div className='unlink-password'>\n            <Formik\n                initialValues={reset_initial_values}\n                initialStatus={{ reset_complete: false, error_msg: '' }}\n                validate={validateReset}\n                onSubmit={handleSubmit}\n            >\n                {({ handleBlur, errors, values, touched, isSubmitting, handleChange, status }) => (\n                    <Form>\n                        <React.Fragment>\n                            {status.reset_complete ? (\n                                <div className='unlink-password__password-success'>\n                                    <Icon\n                                        className='unlink-password__icon'\n                                        icon={`IcUnlink${toTitleCase(social_identity_provider)}`}\n                                        size={128}\n                                    />\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Success!' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize\n                                            i18n_default_text={\n                                                'Your Deriv account has been unlinked from your {{social_identity_provider}} account. You can now log in to Deriv using your new email address and password.'\n                                            }\n                                            values={{\n                                                social_identity_provider: toTitleCase(social_identity_provider),\n                                            }}\n                                        />\n                                    </Text>\n                                    <Button\n                                        type='button'\n                                        onClick={() => {\n                                            toggleResetPasswordModal(false);\n                                            logoutClient().then(() => {\n                                                redirectToLogin(false, getLanguage(), false);\n                                            });\n                                        }}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Login now' />\n                                    </Button>\n                                </div>\n                            ) : (\n                                <div className='unlink-password__set-password'>\n                                    <Text as='p' weight='bold' className='unlink-password__heading'>\n                                        <Localize i18n_default_text='Deriv password' />\n                                    </Text>\n                                    <Text as='p' size='xs' className='unlink-password__subtext'>\n                                        <Localize i18n_default_text='Enter a new password for your Deriv account.' />\n                                    </Text>\n                                    <fieldset className='unlink-password__input-field'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={getErrorMessages().password_warnings}\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='unlink-password__password-field'\n                                                name='password'\n                                                label={localize('Deriv password')}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                error={touched.password && errors.password}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text as='p' size='xs' className='unlink-password__hint'>\n                                        {status.error_msg ? (\n                                            localize(status.error_msg)\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    <Button\n                                        className={classNames('unlink-password__btn', {\n                                            'unlink-password__btn--disabled':\n                                                !values.password || errors.password || isSubmitting,\n                                        })}\n                                        type='submit'\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Confirm' />\n                                    </Button>\n                                </div>\n                            )}\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nUnlinkPassword.propTypes = {\n    logoutClient: PropTypes.func,\n    toggleResetPasswordModal: PropTypes.func,\n    verification_code: PropTypes.string,\n    social_identity_provider: PropTypes.string,\n};\n\nconst UnlinkPasswordModal = observer(() => {\n    const { ui, client } = useStore();\n    const { logout: logoutClient, social_identity_provider, verification_code } = client;\n    const {\n        disableApp,\n        enableApp,\n        is_loading,\n        is_reset_password_modal_visible: is_visible,\n        toggleResetPasswordModal,\n    } = ui;\n    const reset_verification_code = verification_code.reset_password;\n    const unlink_verification_code = verification_code.social_email_change;\n    const new_email = client.new_email.social_email_change;\n    return (\n        <Dialog\n            className='unlink-password__dialog'\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <UnlinkPassword\n                logoutClient={logoutClient}\n                social_identity_provider={social_identity_provider}\n                toggleResetPasswordModal={toggleResetPasswordModal}\n                verification_code={unlink_verification_code || reset_verification_code}\n                new_email={new_email}\n            />\n        </Dialog>\n    );\n});\n\nexport default UnlinkPasswordModal;\n","import UnlinkPasswordModal from './unlink-password-modal.jsx';\n\nexport default UnlinkPasswordModal;\n"],"names":["className","Icon","data_testid","icon","size","Text","as","align","Localize","i18n_default_text","components","key","observer","ui","useStore","enableApp","disableApp","is_visible","is_link_expired_modal_visible","toggleLinkExpiredModal","useVerifyEmail","send","verify_error","error","verify_data","data","React","is_email_sent","setIsEmailSent","formik","useFormik","initialValues","email","initialStatus","error_msg","validate","values","validEmail","getErrorMessages","onSubmit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","resetForm","setStatus","setSubmitting","status","touched","message","Dialog","classNames","title","localize","has_close_icon","onConfirm","Input","type","name","id","onChange","e","disabled","onBlur","label","value","FormSubmitButton","has_cancel","cancel_label","onCancel","is_disabled","is_loading","i","client","logoutClient","logout","verification_code","is_mobile","is_reset_password_modal_visible","toggleResetPasswordModal","onResetComplete","actions","error_code","code","password","reset_complete","then","redirectToLogin","getLanguage","Formik","validLength","min","max","validPassword","min_number","max_number","api_request","reset_password","new_password","WS","response","dismissable","is_closed_on_cancel","Form","weight","PasswordMeter","input","has_error","custom_feedback_messages","password_warnings","PasswordInput","autoComplete","required","Button","primary","is_logged_in","old_state","updated_state","is_unlinking","state","dispatch","get_account_status","social_identity_provider","waitForAccountStatus","Loading","is_fullscreen","UnlinkPasswordModal","UnlinkPassword","new_email","url_action","getActionFromUrl","console","onGetPasswordResponse","change_email","toTitleCase","onClick","large","propTypes","PropTypes","reset_verification_code","unlink_verification_code","social_email_change"],"sourceRoot":""}