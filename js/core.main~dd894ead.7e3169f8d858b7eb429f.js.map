{"version":3,"file":"js/core.main~dd894ead.7e3169f8d858b7eb429f.js","mappings":"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","sources":["webpack:///../../api/src/APIProvider.tsx","webpack:///../../api/src/useAPI.ts","webpack:///../../api/src/utils/query-utils.ts","webpack:///../../api/src/useInfiniteQuery.ts","webpack:///../../api/src/useMutation.ts","webpack:///../../api/src/useQuery.ts","webpack:///../../api/src/useInvalidateQuery.ts","webpack:///../../api/src/hooks/useAuthorize.ts","webpack:///../../api/src/useSubscription.ts","webpack:///../../api/src/hooks/useSettings.ts"],"sourcesContent":["import React, { PropsWithChildren, createContext, useContext, useEffect, useRef } from 'react';\n// @ts-expect-error `@deriv/deriv-api` is not in TypeScript, Hence we ignore the TS error.\nimport DerivAPIBasic from '@deriv/deriv-api/dist/DerivAPIBasic';\nimport { getAppId, getSocketURL, useWS } from '@deriv/shared';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\ntype APIContextData = {\n    derivAPI: DerivAPIBasic | null;\n};\n\nconst APIContext = createContext<APIContextData | null>(null);\n\ndeclare global {\n    interface Window {\n        ReactQueryClient?: QueryClient;\n        DerivAPI?: Record<string, DerivAPIBasic>;\n        WSConnections?: Record<string, WebSocket>;\n    }\n}\n\n// This is a temporary workaround to share a single `QueryClient` instance between all the packages.\nconst getSharedQueryClientContext = (): QueryClient => {\n    if (!window.ReactQueryClient) {\n        window.ReactQueryClient = new QueryClient();\n    }\n\n    return window.ReactQueryClient;\n};\n\nlet timer_id: NodeJS.Timer;\n/**\n * Handles reconnection logic by reinitializing the WebSocket instance if it is in\n * closing or closed state.\n * @param wss_url WebSocket URL\n * @returns\n */\nconst handleReconnection = (wss_url: string) => {\n    if (!window.WSConnections) return;\n    const existingWebsocketInstance = window.WSConnections[wss_url];\n    if (\n        !existingWebsocketInstance ||\n        !(existingWebsocketInstance instanceof WebSocket) ||\n        [2, 3].includes(existingWebsocketInstance.readyState)\n    ) {\n        clearTimeout(timer_id);\n        timer_id = setTimeout(() => {\n            initializeDerivAPI();\n        }, 1000);\n    }\n};\n\n/**\n * Retrieves the WebSocket URL based on the current environment.\n * @returns {string} The WebSocket URL.\n */\nconst getWebSocketURL = () => {\n    const endpoint = getSocketURL();\n    const app_id = getAppId();\n    const language = localStorage.getItem('i18n_language');\n    const brand = 'deriv';\n    const wss_url = `wss://${endpoint}/websockets/v3?app_id=${app_id}&l=${language}&brand=${brand}`;\n\n    return wss_url;\n};\n\n/**\n * Retrieves or initializes a WebSocket instance based on the provided URL.\n * @param {string} wss_url - The WebSocket URL.\n * @returns {WebSocket} The WebSocket instance associated with the provided URL.\n */\nconst getWebsocketInstance = (wss_url: string) => {\n    if (!window.WSConnections) {\n        window.WSConnections = {};\n    }\n\n    const existingWebsocketInstance = window.WSConnections[wss_url];\n    if (\n        !existingWebsocketInstance ||\n        !(existingWebsocketInstance instanceof WebSocket) ||\n        [2, 3].includes(existingWebsocketInstance.readyState)\n    ) {\n        window.WSConnections[wss_url] = new WebSocket(wss_url);\n        window.WSConnections[wss_url].addEventListener('close', () => handleReconnection(wss_url));\n    }\n\n    return window.WSConnections[wss_url];\n};\n\n/**\n * Retrieves the active WebSocket instance.\n * @returns {WebSocket} The WebSocket instance associated with the provided URL.\n */\nexport const getActiveWebsocket = () => {\n    const wss_url = getWebSocketURL();\n\n    return window?.WSConnections?.[wss_url];\n};\n\n/**\n * Initializes a DerivAPI instance for the global window. This enables a standalone connection\n * without causing race conditions with deriv-app core stores.\n * @returns {DerivAPIBasic} The initialized DerivAPI instance.\n */\nconst initializeDerivAPI = (): DerivAPIBasic => {\n    if (!window.DerivAPI) {\n        window.DerivAPI = {};\n    }\n\n    const wss_url = getWebSocketURL();\n    const websocketConnection = getWebsocketInstance(wss_url);\n\n    if (!window.DerivAPI?.[wss_url]) {\n        window.DerivAPI[wss_url] = new DerivAPIBasic({ connection: websocketConnection });\n    }\n\n    return window.DerivAPI?.[wss_url];\n};\n\nconst queryClient = getSharedQueryClientContext();\n\ntype TAPIProviderProps = {\n    /** If set to true, the APIProvider will instantiate it's own socket connection. */\n    standalone?: boolean;\n};\n\nconst APIProvider = ({ children, standalone = false }: PropsWithChildren<TAPIProviderProps>) => {\n    const WS = useWS();\n    const standaloneDerivAPI = useRef(standalone ? initializeDerivAPI() : null);\n\n    useEffect(() => {\n        let interval_id: NodeJS.Timer;\n\n        if (standalone) {\n            interval_id = setInterval(() => standaloneDerivAPI.current?.send({ ping: 1 }), 10000);\n        }\n\n        return () => clearInterval(interval_id);\n    }, [standalone]);\n\n    return (\n        <APIContext.Provider value={{ derivAPI: standalone ? standaloneDerivAPI.current : WS }}>\n            <QueryClientProvider client={queryClient}>\n                {children}\n                {/* <ReactQueryDevtools /> */}\n            </QueryClientProvider>\n        </APIContext.Provider>\n    );\n};\n\nexport const useAPIContext = () => {\n    const context = useContext(APIContext);\n    if (!context) {\n        throw new Error('useAPIContext must be used within APIProvider');\n    }\n    return context;\n};\n\nexport default APIProvider;\n","import { useCallback } from 'react';\n\nimport type {\n    TSocketEndpointNames,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\nimport { useAPIContext } from './APIProvider';\n\nconst useAPI = () => {\n    const { derivAPI } = useAPIContext();\n\n    const send = useCallback(\n        async <T extends TSocketEndpointNames | TSocketPaginateableEndpointNames = TSocketEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): Promise<TSocketResponseData<T>> => {\n            const response = await derivAPI?.send({ [name]: 1, ...(payload || {}) });\n\n            if (response.error) {\n                throw response.error;\n            }\n\n            return response;\n        },\n        [derivAPI]\n    );\n\n    const subscribe = useCallback(\n        <T extends TSocketSubscribableEndpointNames>(\n            name: T,\n            payload?: TSocketRequestPayload<T>\n        ): {\n            subscribe: (\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onData: (response: any) => void,\n                // The type will be handled by the `useSubscription` hook.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onError: (response: any) => void\n            ) => { unsubscribe?: VoidFunction };\n        } => derivAPI?.subscribe({ [name]: 1, subscribe: 1, ...(payload || {}) }),\n        [derivAPI]\n    );\n\n    return {\n        send,\n        subscribe,\n    };\n};\n\nexport default useAPI;\n","export const getQueryKeys = (name: string, props?: Record<string, unknown>) => {\n    if (!props) return [name];\n\n    delete props.req_id;\n    if (name && props[name] === 1) delete props[name];\n\n    if (Object.keys(props).length === 0) return [name];\n\n    const ordered_props = Object.keys(props)\n        .sort((a, b) => a.localeCompare(b))\n        .reduce((obj, key) => {\n            obj[key] = props[key];\n\n            return obj;\n        }, {} as { [k: string]: unknown });\n\n    const query_props = JSON.stringify(ordered_props);\n\n    return [name, query_props];\n};\n","import { useInfiniteQuery as _useInfiniteQuery } from '@tanstack/react-query';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketPaginatateableRequestCleaned,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestInfiniteQueryOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useInfiniteQuery = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true, 'useInfiniteQuery'>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketPaginatateableRequestCleaned<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestInfiniteQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    const initial_offset = payload?.offset || 0;\n    const limit = payload?.limit || 50;\n\n    return _useInfiniteQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n\n        ({ pageParam = 0 }) =>\n            send(name, {\n                ...payload,\n                limit,\n                offset: pageParam * limit + initial_offset,\n            } as unknown as TSocketRequestPayload<T>),\n        {\n            ...options,\n            getNextPageParam: options?.getNextPageParam ? options.getNextPageParam : (_lastPage, pages) => pages.length,\n        }\n    );\n};\n\nexport default useInfiniteQuery;\n","import { useCallback } from 'react';\nimport { useMutation as _useMutation } from '@tanstack/react-query';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestMutationOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nconst useMutation = <T extends TSocketEndpointNames>(name: T, options?: TSocketRequestMutationOptions<T>) => {\n    const { send } = useAPI();\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = _useMutation<TSocketResponseData<T>, TSocketError<T>, TSocketAcceptableProps<T>>(props => {\n        const prop = props?.[0];\n        const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n        return send(name, payload);\n    }, options);\n\n    const mutate = useCallback((...payload: TSocketAcceptableProps<T>) => _mutate(payload), [_mutate]);\n    const mutateAsync = useCallback((...payload: TSocketAcceptableProps<T>) => _mutateAsync(payload), [_mutateAsync]);\n\n    return {\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useMutation;\n","import { useQuery as _useQuery } from '@tanstack/react-query';\nimport type {\n    TSocketAcceptableProps,\n    TSocketEndpointNames,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n    TSocketResponseData,\n} from '../types';\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useQuery = <T extends TSocketEndpointNames>(name: T, ...props: TSocketAcceptableProps<T, true>) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    return _useQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n        () => send(name, payload),\n        options\n    );\n};\n\nexport default useQuery;\n","import { useCallback } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { TSocketEndpointNames } from '../types';\n\ntype TOptions = Parameters<ReturnType<typeof useQueryClient>['invalidateQueries']>[1];\n\nconst useInvalidateQuery = () => {\n    const queryClient = useQueryClient();\n\n    const invalidate = useCallback(\n        <T extends TSocketEndpointNames>(name: T | T[], options?: TOptions) => {\n            return queryClient.invalidateQueries(Array.isArray(name) ? name : [name], options);\n        },\n        [queryClient]\n    );\n\n    return invalidate;\n};\n\nexport default useInvalidateQuery;\n","import { useCallback, useMemo } from 'react';\nimport { getActiveAuthTokenIDFromLocalStorage, getActiveLoginIDFromLocalStorage } from '@deriv/utils';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useQuery from '../useQuery';\n\n/** A custom hook that authorize the user with the given token. If no token is given,\n * it will use the current token from localStorage.\n */\nconst useAuthorize = () => {\n    const current_token = getActiveAuthTokenIDFromLocalStorage();\n    const invalidate = useInvalidateQuery();\n\n    const { data, ...rest } = useQuery('authorize', {\n        payload: { authorize: current_token || '' },\n        options: { enabled: Boolean(current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    const switchAccount = useCallback(\n        (loginid: string) => {\n            const active_loginid = getActiveLoginIDFromLocalStorage();\n            if (active_loginid !== loginid) {\n                localStorage.setItem('active_loginid', loginid);\n                invalidate('authorize');\n            }\n        },\n        [invalidate]\n    );\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        /** Function to switch to another account */\n        switchAccount,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useAPI from './useAPI';\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketRequestPayload,\n    TSocketResponseData,\n    TSocketSubscribableEndpointNames,\n} from '../types';\n\nconst useSubscription = <T extends TSocketSubscribableEndpointNames>(name: T) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSubscribed, setSubscribed] = useState(false);\n    const [error, setError] = useState<TSocketError<T>>();\n    const [data, setData] = useState<TSocketResponseData<T>>();\n    const subscriber = useRef<{ unsubscribe?: VoidFunction }>();\n    const { subscribe: _subscribe } = useAPI();\n\n    const subscribe = useCallback(\n        (...props: TSocketAcceptableProps<T>) => {\n            const prop = props?.[0];\n            const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n\n            setIsLoading(true);\n            setSubscribed(true);\n\n            try {\n                subscriber.current = _subscribe(name, payload).subscribe(\n                    response => {\n                        setData(response);\n                        setIsLoading(false);\n                    },\n                    response => {\n                        setError(response.error);\n                        setIsLoading(false);\n                    }\n                );\n            } catch (e) {\n                setError(e as TSocketError<T>);\n            }\n        },\n        [_subscribe, name]\n    );\n\n    const unsubscribe = useCallback(() => {\n        subscriber.current?.unsubscribe?.();\n        setSubscribed(false);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            unsubscribe();\n        };\n    }, [unsubscribe]);\n\n    return {\n        subscribe,\n        unsubscribe,\n        isLoading,\n        isSubscribed,\n        error,\n        data,\n    };\n};\n\nexport default useSubscription;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const { data, ...rest } = useQuery('get_settings');\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = useCallback((payload: TSetSettingsPayload) => mutate({ payload }), [mutate]);\n\n    // Add additional information to the settings response.\n    const modified_settings = useMemo(() => {\n        const citizenship = data?.get_settings?.citizen ?? '';\n        const account = data?.get_settings?.account_opening_reason ?? '';\n        const placeofbirth = data?.get_settings?.place_of_birth ?? '';\n        const taxResidence = data?.get_settings?.tax_residence ?? '';\n        const taxIdentificationnumber = data?.get_settings?.tax_identification_number ?? '';\n\n        return {\n            ...data?.get_settings,\n            has_submitted_personal_details: Boolean(\n                citizenship && account && placeofbirth && taxResidence && taxIdentificationnumber\n            ),\n        };\n    }, [data?.get_settings]);\n\n    return {\n        /** The settings response. */\n        data: modified_settings,\n        /** Function to update user settings */\n        update,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n"],"names":["timer_id","APIContext","createContext","getWebSocketURL","endpoint","getSocketURL","app_id","getAppId","language","localStorage","getItem","getWebsocketInstance","wss_url","window","WSConnections","existingWebsocketInstance","WebSocket","includes","readyState","addEventListener","clearTimeout","setTimeout","initializeDerivAPI","handleReconnection","DerivAPI","websocketConnection","DerivAPIBasic","connection","queryClient","ReactQueryClient","QueryClient","children","standalone","WS","useWS","standaloneDerivAPI","useRef","useEffect","interval_id","setInterval","current","send","ping","clearInterval","Provider","value","derivAPI","QueryClientProvider","client","context","useContext","Error","useAPIContext","useCallback","name","payload","response","error","subscribe","getQueryKeys","props","req_id","Object","keys","length","ordered_props","sort","a","b","localeCompare","reduce","obj","key","JSON","stringify","prop","undefined","options","useAPI","initial_offset","offset","limit","_useInfiniteQuery","pageParam","getNextPageParam","_lastPage","pages","_useMutation","_mutate","mutate","_mutateAsync","mutateAsync","rest","_useQuery","useQueryClient","invalidateQueries","Array","isArray","current_token","getActiveAuthTokenIDFromLocalStorage","invalidate","useInvalidateQuery","useQuery","authorize","enabled","Boolean","data","modified_authorize","useMemo","switchAccount","loginid","getActiveLoginIDFromLocalStorage","setItem","useState","isLoading","setIsLoading","isSubscribed","setSubscribed","setError","setData","subscriber","_subscribe","e","unsubscribe","useMutation","onSuccess","mutate_rest","update","modified_settings","citizenship","get_settings","citizen","account","account_opening_reason","placeofbirth","place_of_birth","taxResidence","tax_residence","taxIdentificationnumber","tax_identification_number","has_submitted_personal_details","mutation"],"sourceRoot":""}